
shiboqi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073f4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001380  08007500  08007500  00008500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008880  08008880  0000a08c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008880  08008880  00009880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008888  08008888  0000a08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008888  08008888  00009888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800888c  0800888c  0000988c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08008890  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  2000008c  0800891c  0000a08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  0800891c  0000a650  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d849  00000000  00000000  0000a0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280b  00000000  00000000  000178fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  0001a110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000893  00000000  00000000  0001ac30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186b3  00000000  00000000  0001b4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fafb  00000000  00000000  00033b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000854ba  00000000  00000000  00043671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8b2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000377c  00000000  00000000  000c8b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000cc2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	080074e8 	.word	0x080074e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	080074e8 	.word	0x080074e8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	@ 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_frsub>:
 80004d4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__addsf3>
 80004da:	bf00      	nop

080004dc <__aeabi_fsub>:
 80004dc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080004e0 <__addsf3>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	bf1f      	itttt	ne
 80004e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004e8:	ea92 0f03 	teqne	r2, r3
 80004ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004f4:	d06a      	beq.n	80005cc <__addsf3+0xec>
 80004f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004fe:	bfc1      	itttt	gt
 8000500:	18d2      	addgt	r2, r2, r3
 8000502:	4041      	eorgt	r1, r0
 8000504:	4048      	eorgt	r0, r1
 8000506:	4041      	eorgt	r1, r0
 8000508:	bfb8      	it	lt
 800050a:	425b      	neglt	r3, r3
 800050c:	2b19      	cmp	r3, #25
 800050e:	bf88      	it	hi
 8000510:	4770      	bxhi	lr
 8000512:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000516:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800051a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4240      	negne	r0, r0
 8000522:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000526:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800052a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800052e:	bf18      	it	ne
 8000530:	4249      	negne	r1, r1
 8000532:	ea92 0f03 	teq	r2, r3
 8000536:	d03f      	beq.n	80005b8 <__addsf3+0xd8>
 8000538:	f1a2 0201 	sub.w	r2, r2, #1
 800053c:	fa41 fc03 	asr.w	ip, r1, r3
 8000540:	eb10 000c 	adds.w	r0, r0, ip
 8000544:	f1c3 0320 	rsb	r3, r3, #32
 8000548:	fa01 f103 	lsl.w	r1, r1, r3
 800054c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000550:	d502      	bpl.n	8000558 <__addsf3+0x78>
 8000552:	4249      	negs	r1, r1
 8000554:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000558:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800055c:	d313      	bcc.n	8000586 <__addsf3+0xa6>
 800055e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000562:	d306      	bcc.n	8000572 <__addsf3+0x92>
 8000564:	0840      	lsrs	r0, r0, #1
 8000566:	ea4f 0131 	mov.w	r1, r1, rrx
 800056a:	f102 0201 	add.w	r2, r2, #1
 800056e:	2afe      	cmp	r2, #254	@ 0xfe
 8000570:	d251      	bcs.n	8000616 <__addsf3+0x136>
 8000572:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000576:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800057a:	bf08      	it	eq
 800057c:	f020 0001 	biceq.w	r0, r0, #1
 8000580:	ea40 0003 	orr.w	r0, r0, r3
 8000584:	4770      	bx	lr
 8000586:	0049      	lsls	r1, r1, #1
 8000588:	eb40 0000 	adc.w	r0, r0, r0
 800058c:	3a01      	subs	r2, #1
 800058e:	bf28      	it	cs
 8000590:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000594:	d2ed      	bcs.n	8000572 <__addsf3+0x92>
 8000596:	fab0 fc80 	clz	ip, r0
 800059a:	f1ac 0c08 	sub.w	ip, ip, #8
 800059e:	ebb2 020c 	subs.w	r2, r2, ip
 80005a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80005a6:	bfaa      	itet	ge
 80005a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005ac:	4252      	neglt	r2, r2
 80005ae:	4318      	orrge	r0, r3
 80005b0:	bfbc      	itt	lt
 80005b2:	40d0      	lsrlt	r0, r2
 80005b4:	4318      	orrlt	r0, r3
 80005b6:	4770      	bx	lr
 80005b8:	f092 0f00 	teq	r2, #0
 80005bc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80005c0:	bf06      	itte	eq
 80005c2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80005c6:	3201      	addeq	r2, #1
 80005c8:	3b01      	subne	r3, #1
 80005ca:	e7b5      	b.n	8000538 <__addsf3+0x58>
 80005cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005d4:	bf18      	it	ne
 80005d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005da:	d021      	beq.n	8000620 <__addsf3+0x140>
 80005dc:	ea92 0f03 	teq	r2, r3
 80005e0:	d004      	beq.n	80005ec <__addsf3+0x10c>
 80005e2:	f092 0f00 	teq	r2, #0
 80005e6:	bf08      	it	eq
 80005e8:	4608      	moveq	r0, r1
 80005ea:	4770      	bx	lr
 80005ec:	ea90 0f01 	teq	r0, r1
 80005f0:	bf1c      	itt	ne
 80005f2:	2000      	movne	r0, #0
 80005f4:	4770      	bxne	lr
 80005f6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80005fa:	d104      	bne.n	8000606 <__addsf3+0x126>
 80005fc:	0040      	lsls	r0, r0, #1
 80005fe:	bf28      	it	cs
 8000600:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000604:	4770      	bx	lr
 8000606:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800060a:	bf3c      	itt	cc
 800060c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000610:	4770      	bxcc	lr
 8000612:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000616:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800061a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800061e:	4770      	bx	lr
 8000620:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000624:	bf16      	itet	ne
 8000626:	4608      	movne	r0, r1
 8000628:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800062c:	4601      	movne	r1, r0
 800062e:	0242      	lsls	r2, r0, #9
 8000630:	bf06      	itte	eq
 8000632:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000636:	ea90 0f01 	teqeq	r0, r1
 800063a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800063e:	4770      	bx	lr

08000640 <__aeabi_ui2f>:
 8000640:	f04f 0300 	mov.w	r3, #0
 8000644:	e004      	b.n	8000650 <__aeabi_i2f+0x8>
 8000646:	bf00      	nop

08000648 <__aeabi_i2f>:
 8000648:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	ea5f 0c00 	movs.w	ip, r0
 8000654:	bf08      	it	eq
 8000656:	4770      	bxeq	lr
 8000658:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800065c:	4601      	mov	r1, r0
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	e01c      	b.n	800069e <__aeabi_l2f+0x2a>

08000664 <__aeabi_ul2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f04f 0300 	mov.w	r3, #0
 8000670:	e00a      	b.n	8000688 <__aeabi_l2f+0x14>
 8000672:	bf00      	nop

08000674 <__aeabi_l2f>:
 8000674:	ea50 0201 	orrs.w	r2, r0, r1
 8000678:	bf08      	it	eq
 800067a:	4770      	bxeq	lr
 800067c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000680:	d502      	bpl.n	8000688 <__aeabi_l2f+0x14>
 8000682:	4240      	negs	r0, r0
 8000684:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000688:	ea5f 0c01 	movs.w	ip, r1
 800068c:	bf02      	ittt	eq
 800068e:	4684      	moveq	ip, r0
 8000690:	4601      	moveq	r1, r0
 8000692:	2000      	moveq	r0, #0
 8000694:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000698:	bf08      	it	eq
 800069a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800069e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80006a2:	fabc f28c 	clz	r2, ip
 80006a6:	3a08      	subs	r2, #8
 80006a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006ac:	db10      	blt.n	80006d0 <__aeabi_l2f+0x5c>
 80006ae:	fa01 fc02 	lsl.w	ip, r1, r2
 80006b2:	4463      	add	r3, ip
 80006b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006b8:	f1c2 0220 	rsb	r2, r2, #32
 80006bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006c0:	fa20 f202 	lsr.w	r2, r0, r2
 80006c4:	eb43 0002 	adc.w	r0, r3, r2
 80006c8:	bf08      	it	eq
 80006ca:	f020 0001 	biceq.w	r0, r0, #1
 80006ce:	4770      	bx	lr
 80006d0:	f102 0220 	add.w	r2, r2, #32
 80006d4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006d8:	f1c2 0220 	rsb	r2, r2, #32
 80006dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006e0:	fa21 f202 	lsr.w	r2, r1, r2
 80006e4:	eb43 0002 	adc.w	r0, r3, r2
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006ee:	4770      	bx	lr

080006f0 <__aeabi_fmul>:
 80006f0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006f8:	bf1e      	ittt	ne
 80006fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006fe:	ea92 0f0c 	teqne	r2, ip
 8000702:	ea93 0f0c 	teqne	r3, ip
 8000706:	d06f      	beq.n	80007e8 <__aeabi_fmul+0xf8>
 8000708:	441a      	add	r2, r3
 800070a:	ea80 0c01 	eor.w	ip, r0, r1
 800070e:	0240      	lsls	r0, r0, #9
 8000710:	bf18      	it	ne
 8000712:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000716:	d01e      	beq.n	8000756 <__aeabi_fmul+0x66>
 8000718:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800071c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000720:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000724:	fba0 3101 	umull	r3, r1, r0, r1
 8000728:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800072c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000730:	bf3e      	ittt	cc
 8000732:	0049      	lslcc	r1, r1, #1
 8000734:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000738:	005b      	lslcc	r3, r3, #1
 800073a:	ea40 0001 	orr.w	r0, r0, r1
 800073e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000742:	2afd      	cmp	r2, #253	@ 0xfd
 8000744:	d81d      	bhi.n	8000782 <__aeabi_fmul+0x92>
 8000746:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800074a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800074e:	bf08      	it	eq
 8000750:	f020 0001 	biceq.w	r0, r0, #1
 8000754:	4770      	bx	lr
 8000756:	f090 0f00 	teq	r0, #0
 800075a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800075e:	bf08      	it	eq
 8000760:	0249      	lsleq	r1, r1, #9
 8000762:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000766:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800076a:	3a7f      	subs	r2, #127	@ 0x7f
 800076c:	bfc2      	ittt	gt
 800076e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000772:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000776:	4770      	bxgt	lr
 8000778:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800077c:	f04f 0300 	mov.w	r3, #0
 8000780:	3a01      	subs	r2, #1
 8000782:	dc5d      	bgt.n	8000840 <__aeabi_fmul+0x150>
 8000784:	f112 0f19 	cmn.w	r2, #25
 8000788:	bfdc      	itt	le
 800078a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800078e:	4770      	bxle	lr
 8000790:	f1c2 0200 	rsb	r2, r2, #0
 8000794:	0041      	lsls	r1, r0, #1
 8000796:	fa21 f102 	lsr.w	r1, r1, r2
 800079a:	f1c2 0220 	rsb	r2, r2, #32
 800079e:	fa00 fc02 	lsl.w	ip, r0, r2
 80007a2:	ea5f 0031 	movs.w	r0, r1, rrx
 80007a6:	f140 0000 	adc.w	r0, r0, #0
 80007aa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80007ae:	bf08      	it	eq
 80007b0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007b4:	4770      	bx	lr
 80007b6:	f092 0f00 	teq	r2, #0
 80007ba:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80007be:	bf02      	ittt	eq
 80007c0:	0040      	lsleq	r0, r0, #1
 80007c2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80007c6:	3a01      	subeq	r2, #1
 80007c8:	d0f9      	beq.n	80007be <__aeabi_fmul+0xce>
 80007ca:	ea40 000c 	orr.w	r0, r0, ip
 80007ce:	f093 0f00 	teq	r3, #0
 80007d2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007d6:	bf02      	ittt	eq
 80007d8:	0049      	lsleq	r1, r1, #1
 80007da:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80007de:	3b01      	subeq	r3, #1
 80007e0:	d0f9      	beq.n	80007d6 <__aeabi_fmul+0xe6>
 80007e2:	ea41 010c 	orr.w	r1, r1, ip
 80007e6:	e78f      	b.n	8000708 <__aeabi_fmul+0x18>
 80007e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007ec:	ea92 0f0c 	teq	r2, ip
 80007f0:	bf18      	it	ne
 80007f2:	ea93 0f0c 	teqne	r3, ip
 80007f6:	d00a      	beq.n	800080e <__aeabi_fmul+0x11e>
 80007f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80007fc:	bf18      	it	ne
 80007fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000802:	d1d8      	bne.n	80007b6 <__aeabi_fmul+0xc6>
 8000804:	ea80 0001 	eor.w	r0, r0, r1
 8000808:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800080c:	4770      	bx	lr
 800080e:	f090 0f00 	teq	r0, #0
 8000812:	bf17      	itett	ne
 8000814:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000818:	4608      	moveq	r0, r1
 800081a:	f091 0f00 	teqne	r1, #0
 800081e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000822:	d014      	beq.n	800084e <__aeabi_fmul+0x15e>
 8000824:	ea92 0f0c 	teq	r2, ip
 8000828:	d101      	bne.n	800082e <__aeabi_fmul+0x13e>
 800082a:	0242      	lsls	r2, r0, #9
 800082c:	d10f      	bne.n	800084e <__aeabi_fmul+0x15e>
 800082e:	ea93 0f0c 	teq	r3, ip
 8000832:	d103      	bne.n	800083c <__aeabi_fmul+0x14c>
 8000834:	024b      	lsls	r3, r1, #9
 8000836:	bf18      	it	ne
 8000838:	4608      	movne	r0, r1
 800083a:	d108      	bne.n	800084e <__aeabi_fmul+0x15e>
 800083c:	ea80 0001 	eor.w	r0, r0, r1
 8000840:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000844:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000848:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800084c:	4770      	bx	lr
 800084e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000852:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000856:	4770      	bx	lr

08000858 <__aeabi_fdiv>:
 8000858:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000860:	bf1e      	ittt	ne
 8000862:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000866:	ea92 0f0c 	teqne	r2, ip
 800086a:	ea93 0f0c 	teqne	r3, ip
 800086e:	d069      	beq.n	8000944 <__aeabi_fdiv+0xec>
 8000870:	eba2 0203 	sub.w	r2, r2, r3
 8000874:	ea80 0c01 	eor.w	ip, r0, r1
 8000878:	0249      	lsls	r1, r1, #9
 800087a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800087e:	d037      	beq.n	80008f0 <__aeabi_fdiv+0x98>
 8000880:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000884:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000888:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800088c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000890:	428b      	cmp	r3, r1
 8000892:	bf38      	it	cc
 8000894:	005b      	lslcc	r3, r3, #1
 8000896:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800089a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800089e:	428b      	cmp	r3, r1
 80008a0:	bf24      	itt	cs
 80008a2:	1a5b      	subcs	r3, r3, r1
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80008ac:	bf24      	itt	cs
 80008ae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008b2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008ba:	bf24      	itt	cs
 80008bc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008c8:	bf24      	itt	cs
 80008ca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008ce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d2:	011b      	lsls	r3, r3, #4
 80008d4:	bf18      	it	ne
 80008d6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008da:	d1e0      	bne.n	800089e <__aeabi_fdiv+0x46>
 80008dc:	2afd      	cmp	r2, #253	@ 0xfd
 80008de:	f63f af50 	bhi.w	8000782 <__aeabi_fmul+0x92>
 80008e2:	428b      	cmp	r3, r1
 80008e4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008e8:	bf08      	it	eq
 80008ea:	f020 0001 	biceq.w	r0, r0, #1
 80008ee:	4770      	bx	lr
 80008f0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008f4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f8:	327f      	adds	r2, #127	@ 0x7f
 80008fa:	bfc2      	ittt	gt
 80008fc:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000900:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000904:	4770      	bxgt	lr
 8000906:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800090a:	f04f 0300 	mov.w	r3, #0
 800090e:	3a01      	subs	r2, #1
 8000910:	e737      	b.n	8000782 <__aeabi_fmul+0x92>
 8000912:	f092 0f00 	teq	r2, #0
 8000916:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800091a:	bf02      	ittt	eq
 800091c:	0040      	lsleq	r0, r0, #1
 800091e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000922:	3a01      	subeq	r2, #1
 8000924:	d0f9      	beq.n	800091a <__aeabi_fdiv+0xc2>
 8000926:	ea40 000c 	orr.w	r0, r0, ip
 800092a:	f093 0f00 	teq	r3, #0
 800092e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000932:	bf02      	ittt	eq
 8000934:	0049      	lsleq	r1, r1, #1
 8000936:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800093a:	3b01      	subeq	r3, #1
 800093c:	d0f9      	beq.n	8000932 <__aeabi_fdiv+0xda>
 800093e:	ea41 010c 	orr.w	r1, r1, ip
 8000942:	e795      	b.n	8000870 <__aeabi_fdiv+0x18>
 8000944:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000948:	ea92 0f0c 	teq	r2, ip
 800094c:	d108      	bne.n	8000960 <__aeabi_fdiv+0x108>
 800094e:	0242      	lsls	r2, r0, #9
 8000950:	f47f af7d 	bne.w	800084e <__aeabi_fmul+0x15e>
 8000954:	ea93 0f0c 	teq	r3, ip
 8000958:	f47f af70 	bne.w	800083c <__aeabi_fmul+0x14c>
 800095c:	4608      	mov	r0, r1
 800095e:	e776      	b.n	800084e <__aeabi_fmul+0x15e>
 8000960:	ea93 0f0c 	teq	r3, ip
 8000964:	d104      	bne.n	8000970 <__aeabi_fdiv+0x118>
 8000966:	024b      	lsls	r3, r1, #9
 8000968:	f43f af4c 	beq.w	8000804 <__aeabi_fmul+0x114>
 800096c:	4608      	mov	r0, r1
 800096e:	e76e      	b.n	800084e <__aeabi_fmul+0x15e>
 8000970:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000974:	bf18      	it	ne
 8000976:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800097a:	d1ca      	bne.n	8000912 <__aeabi_fdiv+0xba>
 800097c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000980:	f47f af5c 	bne.w	800083c <__aeabi_fmul+0x14c>
 8000984:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000988:	f47f af3c 	bne.w	8000804 <__aeabi_fmul+0x114>
 800098c:	e75f      	b.n	800084e <__aeabi_fmul+0x15e>
 800098e:	bf00      	nop

08000990 <__gesf2>:
 8000990:	f04f 3cff 	mov.w	ip, #4294967295
 8000994:	e006      	b.n	80009a4 <__cmpsf2+0x4>
 8000996:	bf00      	nop

08000998 <__lesf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	e002      	b.n	80009a4 <__cmpsf2+0x4>
 800099e:	bf00      	nop

080009a0 <__cmpsf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009b4:	bf18      	it	ne
 80009b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ba:	d011      	beq.n	80009e0 <__cmpsf2+0x40>
 80009bc:	b001      	add	sp, #4
 80009be:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009c2:	bf18      	it	ne
 80009c4:	ea90 0f01 	teqne	r0, r1
 80009c8:	bf58      	it	pl
 80009ca:	ebb2 0003 	subspl.w	r0, r2, r3
 80009ce:	bf88      	it	hi
 80009d0:	17c8      	asrhi	r0, r1, #31
 80009d2:	bf38      	it	cc
 80009d4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009d8:	bf18      	it	ne
 80009da:	f040 0001 	orrne.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009e4:	d102      	bne.n	80009ec <__cmpsf2+0x4c>
 80009e6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80009ea:	d105      	bne.n	80009f8 <__cmpsf2+0x58>
 80009ec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80009f0:	d1e4      	bne.n	80009bc <__cmpsf2+0x1c>
 80009f2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80009f6:	d0e1      	beq.n	80009bc <__cmpsf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cfrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4608      	mov	r0, r1
 8000a04:	4661      	mov	r1, ip
 8000a06:	e7ff      	b.n	8000a08 <__aeabi_cfcmpeq>

08000a08 <__aeabi_cfcmpeq>:
 8000a08:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a0a:	f7ff ffc9 	bl	80009a0 <__cmpsf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a18 <__aeabi_fcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cfcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_fcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cfcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_fcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cfcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_fcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffd2 	bl	8000a00 <__aeabi_cfrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_fcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc8 	bl	8000a00 <__aeabi_cfrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_f2iz>:
 8000a7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a80:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000a84:	d30f      	bcc.n	8000aa6 <__aeabi_f2iz+0x2a>
 8000a86:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000a8a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_f2iz+0x30>
 8000a90:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a98:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa0:	bf18      	it	ne
 8000aa2:	4240      	negne	r0, r0
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr
 8000aac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ab0:	d101      	bne.n	8000ab6 <__aeabi_f2iz+0x3a>
 8000ab2:	0242      	lsls	r2, r0, #9
 8000ab4:	d105      	bne.n	8000ac2 <__aeabi_f2iz+0x46>
 8000ab6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000aba:	bf08      	it	eq
 8000abc:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_f2uiz>:
 8000ac8:	0042      	lsls	r2, r0, #1
 8000aca:	d20e      	bcs.n	8000aea <__aeabi_f2uiz+0x22>
 8000acc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ad0:	d30b      	bcc.n	8000aea <__aeabi_f2uiz+0x22>
 8000ad2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ad6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ada:	d409      	bmi.n	8000af0 <__aeabi_f2uiz+0x28>
 8000adc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ae0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr
 8000af0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000af4:	d101      	bne.n	8000afa <__aeabi_f2uiz+0x32>
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	d102      	bne.n	8000b00 <__aeabi_f2uiz+0x38>
 8000afa:	f04f 30ff 	mov.w	r0, #4294967295
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <TFT_Draw_Point>:
 * @retval 无
 * @note   优化：移除了不必要的 Flush。
 *         在连续绘制多个点时，调用者应在最后负责 Flush (如果需要)。
 */
void TFT_Draw_Point(TFT_HandleTypeDef *htft, uint16_t x, uint16_t y, uint16_t color)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	4608      	mov	r0, r1
 8000b12:	4611      	mov	r1, r2
 8000b14:	461a      	mov	r2, r3
 8000b16:	4603      	mov	r3, r0
 8000b18:	817b      	strh	r3, [r7, #10]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	813b      	strh	r3, [r7, #8]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	80fb      	strh	r3, [r7, #6]
	TFT_Set_Address(htft, x, y, x, y); // 设置光标位置到单个点
 8000b22:	8978      	ldrh	r0, [r7, #10]
 8000b24:	893a      	ldrh	r2, [r7, #8]
 8000b26:	8979      	ldrh	r1, [r7, #10]
 8000b28:	893b      	ldrh	r3, [r7, #8]
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	68f8      	ldr	r0, [r7, #12]
 8000b30:	f000 ff12 	bl	8001958 <TFT_Set_Address>
	TFT_Write_Data16(htft, color);	   // 对于单点，直接写入即可 (阻塞)
 8000b34:	88fb      	ldrh	r3, [r7, #6]
 8000b36:	4619      	mov	r1, r3
 8000b38:	68f8      	ldr	r0, [r7, #12]
 8000b3a:	f000 feb1 	bl	80018a0 <TFT_Write_Data16>
}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <TFT_Fill_Area>:
 * @param  y_end     结束行坐标 (不包含)
 * @param  color     要填充的颜色 (RGB565格式)
 * @retval 无
 */
void TFT_Fill_Area(TFT_HandleTypeDef *htft, uint16_t x_start, uint16_t y_start, uint16_t x_end, uint16_t y_end, uint16_t color)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b088      	sub	sp, #32
 8000b4a:	af02      	add	r7, sp, #8
 8000b4c:	60f8      	str	r0, [r7, #12]
 8000b4e:	4608      	mov	r0, r1
 8000b50:	4611      	mov	r1, r2
 8000b52:	461a      	mov	r2, r3
 8000b54:	4603      	mov	r3, r0
 8000b56:	817b      	strh	r3, [r7, #10]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	813b      	strh	r3, [r7, #8]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	80fb      	strh	r3, [r7, #6]
	// 检查坐标有效性，防止 x_end <= x_start 或 y_end <= y_start
	if (x_end <= x_start || y_end <= y_start)
 8000b60:	88fa      	ldrh	r2, [r7, #6]
 8000b62:	897b      	ldrh	r3, [r7, #10]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d934      	bls.n	8000bd2 <TFT_Fill_Area+0x8c>
 8000b68:	8c3a      	ldrh	r2, [r7, #32]
 8000b6a:	893b      	ldrh	r3, [r7, #8]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d930      	bls.n	8000bd2 <TFT_Fill_Area+0x8c>
		return;

	uint32_t total_pixels = (uint32_t)(x_end - x_start) * (y_end - y_start);
 8000b70:	88fa      	ldrh	r2, [r7, #6]
 8000b72:	897b      	ldrh	r3, [r7, #10]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	4619      	mov	r1, r3
 8000b78:	8c3a      	ldrh	r2, [r7, #32]
 8000b7a:	893b      	ldrh	r3, [r7, #8]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	fb01 f303 	mul.w	r3, r1, r3
 8000b82:	613b      	str	r3, [r7, #16]
	if (total_pixels == 0)
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d025      	beq.n	8000bd6 <TFT_Fill_Area+0x90>
		return;

	TFT_Set_Address(htft, x_start, y_start, x_end - 1, y_end - 1); // 设置显示范围 (Set_Address 使用包含的坐标)
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	b298      	uxth	r0, r3
 8000b90:	8c3b      	ldrh	r3, [r7, #32]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	893a      	ldrh	r2, [r7, #8]
 8000b98:	8979      	ldrh	r1, [r7, #10]
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f000 feda 	bl	8001958 <TFT_Set_Address>

	// 重置缓冲区以确保从一个干净的缓冲区开始
	TFT_Reset_Buffer(htft);
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f000 fdee 	bl	8001786 <TFT_Reset_Buffer>

	// 批量填充像素，利用缓冲区提高性能
	for (uint32_t i = 0; i < total_pixels; i++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	e007      	b.n	8000bc0 <TFT_Fill_Area+0x7a>
	{
		TFT_Buffer_Write16(htft, color); // 写入颜色数据到缓冲区，缓冲区满时会自动发送
 8000bb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	f000 fd8d 	bl	80016d4 <TFT_Buffer_Write16>
	for (uint32_t i = 0; i < total_pixels; i++)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d3f3      	bcc.n	8000bb0 <TFT_Fill_Area+0x6a>
	}

	// 确保所有剩余数据都被发送
	TFT_Flush_Buffer(htft, 1);
 8000bc8:	2101      	movs	r1, #1
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	f000 fdba 	bl	8001744 <TFT_Flush_Buffer>
 8000bd0:	e002      	b.n	8000bd8 <TFT_Fill_Area+0x92>
		return;
 8000bd2:	bf00      	nop
 8000bd4:	e000      	b.n	8000bd8 <TFT_Fill_Area+0x92>
		return;
 8000bd6:	bf00      	nop
}
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <TFT_Draw_Fast_HLine>:
 * @param  width   线宽度
 * @param  color   线的颜色 (RGB565格式)
 * @retval 无
 */
void TFT_Draw_Fast_HLine(TFT_HandleTypeDef *htft, uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b088      	sub	sp, #32
 8000be2:	af02      	add	r7, sp, #8
 8000be4:	60f8      	str	r0, [r7, #12]
 8000be6:	4608      	mov	r0, r1
 8000be8:	4611      	mov	r1, r2
 8000bea:	461a      	mov	r2, r3
 8000bec:	4603      	mov	r3, r0
 8000bee:	817b      	strh	r3, [r7, #10]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	813b      	strh	r3, [r7, #8]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	80fb      	strh	r3, [r7, #6]
	if (width == 0)
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d024      	beq.n	8000c48 <TFT_Draw_Fast_HLine+0x6a>
		return;

	TFT_Set_Address(htft, x, y, x + width - 1, y); // 设置地址窗口
 8000bfe:	897a      	ldrh	r2, [r7, #10]
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	4413      	add	r3, r2
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	3b01      	subs	r3, #1
 8000c08:	b298      	uxth	r0, r3
 8000c0a:	893a      	ldrh	r2, [r7, #8]
 8000c0c:	8979      	ldrh	r1, [r7, #10]
 8000c0e:	893b      	ldrh	r3, [r7, #8]
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	4603      	mov	r3, r0
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	f000 fe9f 	bl	8001958 <TFT_Set_Address>
	TFT_Reset_Buffer(htft);						   // 重置缓冲区
 8000c1a:	68f8      	ldr	r0, [r7, #12]
 8000c1c:	f000 fdb3 	bl	8001786 <TFT_Reset_Buffer>

	// 填充像素到缓冲区
	for (uint16_t i = 0; i < width; i++)
 8000c20:	2300      	movs	r3, #0
 8000c22:	82fb      	strh	r3, [r7, #22]
 8000c24:	e007      	b.n	8000c36 <TFT_Draw_Fast_HLine+0x58>
	{
		TFT_Buffer_Write16(htft, color);
 8000c26:	8c3b      	ldrh	r3, [r7, #32]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f000 fd52 	bl	80016d4 <TFT_Buffer_Write16>
	for (uint16_t i = 0; i < width; i++)
 8000c30:	8afb      	ldrh	r3, [r7, #22]
 8000c32:	3301      	adds	r3, #1
 8000c34:	82fb      	strh	r3, [r7, #22]
 8000c36:	8afa      	ldrh	r2, [r7, #22]
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d3f3      	bcc.n	8000c26 <TFT_Draw_Fast_HLine+0x48>
	}

	TFT_Flush_Buffer(htft, 1); // 发送并等待完成
 8000c3e:	2101      	movs	r1, #1
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f000 fd7f 	bl	8001744 <TFT_Flush_Buffer>
 8000c46:	e000      	b.n	8000c4a <TFT_Draw_Fast_HLine+0x6c>
		return;
 8000c48:	bf00      	nop
}
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <TFT_Draw_Fast_VLine>:
 * @param  height   线高度
 * @param  color    线的颜色 (RGB565格式)
 * @retval 无
 */
void TFT_Draw_Fast_VLine(TFT_HandleTypeDef *htft, uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	4608      	mov	r0, r1
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4603      	mov	r3, r0
 8000c60:	817b      	strh	r3, [r7, #10]
 8000c62:	460b      	mov	r3, r1
 8000c64:	813b      	strh	r3, [r7, #8]
 8000c66:	4613      	mov	r3, r2
 8000c68:	80fb      	strh	r3, [r7, #6]
	if (height == 0)
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d024      	beq.n	8000cba <TFT_Draw_Fast_VLine+0x6a>
		return;

	TFT_Set_Address(htft, x, y, x, y + height - 1); // 设置地址窗口
 8000c70:	893a      	ldrh	r2, [r7, #8]
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	4413      	add	r3, r2
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	8978      	ldrh	r0, [r7, #10]
 8000c7e:	893a      	ldrh	r2, [r7, #8]
 8000c80:	8979      	ldrh	r1, [r7, #10]
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	4603      	mov	r3, r0
 8000c86:	68f8      	ldr	r0, [r7, #12]
 8000c88:	f000 fe66 	bl	8001958 <TFT_Set_Address>
	TFT_Reset_Buffer(htft);							// 重置缓冲区
 8000c8c:	68f8      	ldr	r0, [r7, #12]
 8000c8e:	f000 fd7a 	bl	8001786 <TFT_Reset_Buffer>

	// 填充像素到缓冲区
	for (uint16_t i = 0; i < height; i++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	82fb      	strh	r3, [r7, #22]
 8000c96:	e007      	b.n	8000ca8 <TFT_Draw_Fast_VLine+0x58>
	{
		TFT_Buffer_Write16(htft, color);
 8000c98:	8c3b      	ldrh	r3, [r7, #32]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	68f8      	ldr	r0, [r7, #12]
 8000c9e:	f000 fd19 	bl	80016d4 <TFT_Buffer_Write16>
	for (uint16_t i = 0; i < height; i++)
 8000ca2:	8afb      	ldrh	r3, [r7, #22]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	82fb      	strh	r3, [r7, #22]
 8000ca8:	8afa      	ldrh	r2, [r7, #22]
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d3f3      	bcc.n	8000c98 <TFT_Draw_Fast_VLine+0x48>
	}

	TFT_Flush_Buffer(htft, 1); // 发送并等待完成
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	68f8      	ldr	r0, [r7, #12]
 8000cb4:	f000 fd46 	bl	8001744 <TFT_Flush_Buffer>
 8000cb8:	e000      	b.n	8000cbc <TFT_Draw_Fast_VLine+0x6c>
		return;
 8000cba:	bf00      	nop
}
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <TFT_Draw_Line>:
 * @param  y2      终点行坐标
 * @param  color   线的颜色 (RGB565格式)
 * @retval 无
 */
void TFT_Draw_Line(TFT_HandleTypeDef *htft, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b08c      	sub	sp, #48	@ 0x30
 8000cc6:	af02      	add	r7, sp, #8
 8000cc8:	60f8      	str	r0, [r7, #12]
 8000cca:	4608      	mov	r0, r1
 8000ccc:	4611      	mov	r1, r2
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	817b      	strh	r3, [r7, #10]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	813b      	strh	r3, [r7, #8]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	80fb      	strh	r3, [r7, #6]
	// 优化：处理水平线
	if (y1 == y2)
 8000cdc:	893a      	ldrh	r2, [r7, #8]
 8000cde:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d118      	bne.n	8000d16 <TFT_Draw_Line+0x54>
	{
		if (x1 > x2) // 确保 x1 <= x2
 8000ce4:	897a      	ldrh	r2, [r7, #10]
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d905      	bls.n	8000cf8 <TFT_Draw_Line+0x36>
		{
			SWAP_INT16(x1, x2); // 使用宏交换
 8000cec:	897b      	ldrh	r3, [r7, #10]
 8000cee:	82fb      	strh	r3, [r7, #22]
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	817b      	strh	r3, [r7, #10]
 8000cf4:	8afb      	ldrh	r3, [r7, #22]
 8000cf6:	80fb      	strh	r3, [r7, #6]
		}
		TFT_Draw_Fast_HLine(htft, x1, y1, x2 - x1 + 1, color); // 使用快速水平线函数
 8000cf8:	88fa      	ldrh	r2, [r7, #6]
 8000cfa:	897b      	ldrh	r3, [r7, #10]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	3301      	adds	r3, #1
 8000d02:	b298      	uxth	r0, r3
 8000d04:	893a      	ldrh	r2, [r7, #8]
 8000d06:	8979      	ldrh	r1, [r7, #10]
 8000d08:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	68f8      	ldr	r0, [r7, #12]
 8000d10:	f7ff ff65 	bl	8000bde <TFT_Draw_Fast_HLine>
		return;
 8000d14:	e0a5      	b.n	8000e62 <TFT_Draw_Line+0x1a0>
	}

	// 优化：处理垂直线
	if (x1 == x2)
 8000d16:	897a      	ldrh	r2, [r7, #10]
 8000d18:	88fb      	ldrh	r3, [r7, #6]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d118      	bne.n	8000d50 <TFT_Draw_Line+0x8e>
	{
		if (y1 > y2) // 确保 y1 <= y2
 8000d1e:	893a      	ldrh	r2, [r7, #8]
 8000d20:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d905      	bls.n	8000d32 <TFT_Draw_Line+0x70>
		{
			SWAP_INT16(y1, y2); // 使用宏交换
 8000d26:	893b      	ldrh	r3, [r7, #8]
 8000d28:	833b      	strh	r3, [r7, #24]
 8000d2a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000d2c:	813b      	strh	r3, [r7, #8]
 8000d2e:	8b3b      	ldrh	r3, [r7, #24]
 8000d30:	863b      	strh	r3, [r7, #48]	@ 0x30
		}
		TFT_Draw_Fast_VLine(htft, x1, y1, y2 - y1 + 1, color); // 使用快速垂直线函数
 8000d32:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000d34:	893b      	ldrh	r3, [r7, #8]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	b298      	uxth	r0, r3
 8000d3e:	893a      	ldrh	r2, [r7, #8]
 8000d40:	8979      	ldrh	r1, [r7, #10]
 8000d42:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	4603      	mov	r3, r0
 8000d48:	68f8      	ldr	r0, [r7, #12]
 8000d4a:	f7ff ff81 	bl	8000c50 <TFT_Draw_Fast_VLine>
		return;
 8000d4e:	e088      	b.n	8000e62 <TFT_Draw_Line+0x1a0>
	}

	// Bresenham 算法绘制斜线
	int16_t deltaX = abs(x2 - x1);		// X 轴距离绝对值
 8000d50:	88fa      	ldrh	r2, [r7, #6]
 8000d52:	897b      	ldrh	r3, [r7, #10]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	bfb8      	it	lt
 8000d5a:	425b      	neglt	r3, r3
 8000d5c:	843b      	strh	r3, [r7, #32]
	int16_t deltaY = abs(y2 - y1);		// Y 轴距离绝对值
 8000d5e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000d60:	893b      	ldrh	r3, [r7, #8]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	bfb8      	it	lt
 8000d68:	425b      	neglt	r3, r3
 8000d6a:	83fb      	strh	r3, [r7, #30]
	int16_t stepX = (x1 < x2) ? 1 : -1; // X 轴步进方向
 8000d6c:	897a      	ldrh	r2, [r7, #10]
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d201      	bcs.n	8000d78 <TFT_Draw_Line+0xb6>
 8000d74:	2301      	movs	r3, #1
 8000d76:	e001      	b.n	8000d7c <TFT_Draw_Line+0xba>
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7c:	83bb      	strh	r3, [r7, #28]
	int16_t stepY = (y1 < y2) ? 1 : -1; // Y 轴步进方向
 8000d7e:	893a      	ldrh	r2, [r7, #8]
 8000d80:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d201      	bcs.n	8000d8a <TFT_Draw_Line+0xc8>
 8000d86:	2301      	movs	r3, #1
 8000d88:	e001      	b.n	8000d8e <TFT_Draw_Line+0xcc>
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	837b      	strh	r3, [r7, #26]
	int16_t currentX = x1;
 8000d90:	897b      	ldrh	r3, [r7, #10]
 8000d92:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t currentY = y1;
 8000d94:	893b      	ldrh	r3, [r7, #8]
 8000d96:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t errorTerm; // 误差项

	// 注意：由于 TFT_Draw_Point 不再 Flush，这里的循环效率会提高
	if (deltaX > deltaY) // 以 X 轴为主轴 (斜率绝对值 < 1)
 8000d98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000d9c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dd2a      	ble.n	8000dfa <TFT_Draw_Line+0x138>
	{
		errorTerm = deltaX / 2; // 初始误差
 8000da4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000da8:	0fda      	lsrs	r2, r3, #31
 8000daa:	4413      	add	r3, r2
 8000dac:	105b      	asrs	r3, r3, #1
 8000dae:	847b      	strh	r3, [r7, #34]	@ 0x22
		while (currentX != x2)	// 循环直到到达终点 X 坐标
 8000db0:	e01d      	b.n	8000dee <TFT_Draw_Line+0x12c>
		{
			TFT_Draw_Point(htft, currentX, currentY, color); // 绘制当前点
 8000db2:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8000db4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000db6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000db8:	68f8      	ldr	r0, [r7, #12]
 8000dba:	f7ff fea5 	bl	8000b08 <TFT_Draw_Point>
			errorTerm -= deltaY;
 8000dbe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000dc0:	8bfb      	ldrh	r3, [r7, #30]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	847b      	strh	r3, [r7, #34]	@ 0x22
			if (errorTerm < 0)
 8000dc8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	da09      	bge.n	8000de4 <TFT_Draw_Line+0x122>
			{
				currentY += stepY; // Y 移动一步
 8000dd0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000dd2:	8b7b      	ldrh	r3, [r7, #26]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	84bb      	strh	r3, [r7, #36]	@ 0x24
				errorTerm += deltaX;
 8000dda:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000ddc:	8c3b      	ldrh	r3, [r7, #32]
 8000dde:	4413      	add	r3, r2
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	847b      	strh	r3, [r7, #34]	@ 0x22
			}
			currentX += stepX; // X 移动一步
 8000de4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000de6:	8bbb      	ldrh	r3, [r7, #28]
 8000de8:	4413      	add	r3, r2
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	84fb      	strh	r3, [r7, #38]	@ 0x26
		while (currentX != x2)	// 循环直到到达终点 X 坐标
 8000dee:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d1dc      	bne.n	8000db2 <TFT_Draw_Line+0xf0>
 8000df8:	e029      	b.n	8000e4e <TFT_Draw_Line+0x18c>
		}
	}
	else // 以 Y 轴为主轴 (斜率绝对值 >= 1)
	{
		errorTerm = deltaY / 2; // 初始误差
 8000dfa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000dfe:	0fda      	lsrs	r2, r3, #31
 8000e00:	4413      	add	r3, r2
 8000e02:	105b      	asrs	r3, r3, #1
 8000e04:	847b      	strh	r3, [r7, #34]	@ 0x22
		while (currentY != y2)	// 循环直到到达终点 Y 坐标
 8000e06:	e01d      	b.n	8000e44 <TFT_Draw_Line+0x182>
		{
			TFT_Draw_Point(htft, currentX, currentY, color); // 绘制当前点
 8000e08:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8000e0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000e0c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f7ff fe7a 	bl	8000b08 <TFT_Draw_Point>
			errorTerm -= deltaX;
 8000e14:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000e16:	8c3b      	ldrh	r3, [r7, #32]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	847b      	strh	r3, [r7, #34]	@ 0x22
			if (errorTerm < 0)
 8000e1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	da09      	bge.n	8000e3a <TFT_Draw_Line+0x178>
			{
				currentX += stepX; // X 移动一步
 8000e26:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000e28:	8bbb      	ldrh	r3, [r7, #28]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	84fb      	strh	r3, [r7, #38]	@ 0x26
				errorTerm += deltaY;
 8000e30:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000e32:	8bfb      	ldrh	r3, [r7, #30]
 8000e34:	4413      	add	r3, r2
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	847b      	strh	r3, [r7, #34]	@ 0x22
			}
			currentY += stepY; // Y 移动一步
 8000e3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000e3c:	8b7b      	ldrh	r3, [r7, #26]
 8000e3e:	4413      	add	r3, r2
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	84bb      	strh	r3, [r7, #36]	@ 0x24
		while (currentY != y2)	// 循环直到到达终点 Y 坐标
 8000e44:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8000e48:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d1dc      	bne.n	8000e08 <TFT_Draw_Line+0x146>
		}
	}
	TFT_Draw_Point(htft, currentX, currentY, color); // 绘制终点 (Bresenham 循环不包含终点)
 8000e4e:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8000e50:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000e52:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000e54:	68f8      	ldr	r0, [r7, #12]
 8000e56:	f7ff fe57 	bl	8000b08 <TFT_Draw_Point>

	// 如果 TFT_Write_Data16 未来改为非阻塞+缓冲，则可能需要在此处添加 Flush
	TFT_Flush_Buffer(htft, 1); // 绘制斜线后刷新缓冲区，因为 Draw_Point 不刷新
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f000 fc71 	bl	8001744 <TFT_Flush_Buffer>
}
 8000e62:	3728      	adds	r7, #40	@ 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <TFT_Draw_Triangle>:
 * @param  x3, y3  第三个顶点坐标
 * @param  color   三角形边框颜色 (RGB565格式)
 * @retval 无
 */
void TFT_Draw_Triangle(TFT_HandleTypeDef *htft, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	4608      	mov	r0, r1
 8000e72:	4611      	mov	r1, r2
 8000e74:	461a      	mov	r2, r3
 8000e76:	4603      	mov	r3, r0
 8000e78:	817b      	strh	r3, [r7, #10]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	813b      	strh	r3, [r7, #8]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	80fb      	strh	r3, [r7, #6]
	TFT_Draw_Line(htft, x1, y1, x2, y2, color); // 绘制第一条边
 8000e82:	88f8      	ldrh	r0, [r7, #6]
 8000e84:	893a      	ldrh	r2, [r7, #8]
 8000e86:	8979      	ldrh	r1, [r7, #10]
 8000e88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	8b3b      	ldrh	r3, [r7, #24]
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	4603      	mov	r3, r0
 8000e92:	68f8      	ldr	r0, [r7, #12]
 8000e94:	f7ff ff15 	bl	8000cc2 <TFT_Draw_Line>
	TFT_Draw_Line(htft, x2, y2, x3, y3, color); // 绘制第二条边
 8000e98:	8bb8      	ldrh	r0, [r7, #28]
 8000e9a:	8b3a      	ldrh	r2, [r7, #24]
 8000e9c:	88f9      	ldrh	r1, [r7, #6]
 8000e9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	8c3b      	ldrh	r3, [r7, #32]
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f7ff ff0a 	bl	8000cc2 <TFT_Draw_Line>
	TFT_Draw_Line(htft, x3, y3, x1, y1, color); // 绘制第三条边
 8000eae:	8978      	ldrh	r0, [r7, #10]
 8000eb0:	8c3a      	ldrh	r2, [r7, #32]
 8000eb2:	8bb9      	ldrh	r1, [r7, #28]
 8000eb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	893b      	ldrh	r3, [r7, #8]
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f7ff feff 	bl	8000cc2 <TFT_Draw_Line>
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <TFT_Init_ST7735S>:
 * @param  htft TFT句柄指针
 * @retval 无
 * @note   适用于多数红绿蓝背景的0.96/1.44/1.8寸TFT，此函数简化了初始化流程
 */
void TFT_Init_ST7735S(TFT_HandleTypeDef *htft)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	// 初始化IO层
	TFT_IO_Init(htft);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f000 fc66 	bl	80017a6 <TFT_IO_Init>

	// 硬复位TFT
	TFT_Pin_RES_Set(htft, 0);
 8000eda:	2100      	movs	r1, #0
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f000 fb3d 	bl	800155c <TFT_Pin_RES_Set>
	HAL_Delay(100);
 8000ee2:	2064      	movs	r0, #100	@ 0x64
 8000ee4:	f002 f8f8 	bl	80030d8 <HAL_Delay>
	TFT_Pin_RES_Set(htft, 1);
 8000ee8:	2101      	movs	r1, #1
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 fb36 	bl	800155c <TFT_Pin_RES_Set>
	HAL_Delay(100);
 8000ef0:	2064      	movs	r0, #100	@ 0x64
 8000ef2:	f002 f8f1 	bl	80030d8 <HAL_Delay>

	TFT_Pin_BLK_Set(htft, 1); // 打开背光 (高)
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 fb65 	bl	80015c8 <TFT_Pin_BLK_Set>
	HAL_Delay(100);
 8000efe:	2064      	movs	r0, #100	@ 0x64
 8000f00:	f002 f8ea 	bl	80030d8 <HAL_Delay>

	// 1. 软件复位 (Software Reset)
	TFT_Write_Command(htft, 0x01);
 8000f04:	2101      	movs	r1, #1
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 fcfc 	bl	8001904 <TFT_Write_Command>
	HAL_Delay(150);
 8000f0c:	2096      	movs	r0, #150	@ 0x96
 8000f0e:	f002 f8e3 	bl	80030d8 <HAL_Delay>

	// 2. 退出睡眠模式 (Sleep out)
	TFT_Write_Command(htft, 0x11); // 退出睡眠模式
 8000f12:	2111      	movs	r1, #17
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 fcf5 	bl	8001904 <TFT_Write_Command>
	HAL_Delay(255);
 8000f1a:	20ff      	movs	r0, #255	@ 0xff
 8000f1c:	f002 f8dc 	bl	80030d8 <HAL_Delay>

	// 3. 设置帧率控制 (Frame Rate Control)
	TFT_Write_Command(htft, 0xB1); // FRMCTR1 (In normal mode/ Full colors)
 8000f20:	21b1      	movs	r1, #177	@ 0xb1
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 fcee 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0x01);   // Frame rate = fosc/(1*2+40) * (LINE+2C+2D)
 8000f28:	2101      	movs	r1, #1
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 fc8f 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x2C);
 8000f30:	212c      	movs	r1, #44	@ 0x2c
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 fc8b 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x2D);
 8000f38:	212d      	movs	r1, #45	@ 0x2d
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 fc87 	bl	800184e <TFT_Write_Data8>

	// 4. 设置帧率控制 (空闲模式) (Frame Rate Control 2)
	TFT_Write_Command(htft, 0xB2); // FRMCTR2 (In Idle mode/ 8-colors)
 8000f40:	21b2      	movs	r1, #178	@ 0xb2
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 fcde 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0x01);
 8000f48:	2101      	movs	r1, #1
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 fc7f 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x2C);
 8000f50:	212c      	movs	r1, #44	@ 0x2c
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 fc7b 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x2D);
 8000f58:	212d      	movs	r1, #45	@ 0x2d
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 fc77 	bl	800184e <TFT_Write_Data8>

	// 5. 设置帧率控制 (部分模式) (Frame Rate control 3)
	TFT_Write_Command(htft, 0xB3); // FRMCTR3 (In Partial mode/ full colors)
 8000f60:	21b3      	movs	r1, #179	@ 0xb3
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 fcce 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0x01);
 8000f68:	2101      	movs	r1, #1
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 fc6f 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x2C);
 8000f70:	212c      	movs	r1, #44	@ 0x2c
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 fc6b 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x2D);
 8000f78:	212d      	movs	r1, #45	@ 0x2d
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 fc67 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x01);
 8000f80:	2101      	movs	r1, #1
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 fc63 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x2C);
 8000f88:	212c      	movs	r1, #44	@ 0x2c
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 fc5f 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x2D);
 8000f90:	212d      	movs	r1, #45	@ 0x2d
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 fc5b 	bl	800184e <TFT_Write_Data8>

	// 6. 设置显示反转控制 (Display Inversion Control)
	TFT_Write_Command(htft, 0xB4); // INVCTR
 8000f98:	21b4      	movs	r1, #180	@ 0xb4
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 fcb2 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0x07);   // 列倒装
 8000fa0:	2107      	movs	r1, #7
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 fc53 	bl	800184e <TFT_Write_Data8>

	// 7. 设置电源控制1 (Power Control 1)
	TFT_Write_Command(htft, 0xC0); // PWCTR1
 8000fa8:	21c0      	movs	r1, #192	@ 0xc0
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 fcaa 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0xA2);   // -4.6V
 8000fb0:	21a2      	movs	r1, #162	@ 0xa2
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 fc4b 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x02);   // AVCC=VCIx2, VGH=VCIx7, VGL=-VCIx4
 8000fb8:	2102      	movs	r1, #2
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 fc47 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x84);   // Opamp current small, Boost frequency
 8000fc0:	2184      	movs	r1, #132	@ 0x84
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 fc43 	bl	800184e <TFT_Write_Data8>

	// 8. 设置电源控制2 (Power Control 2)
	TFT_Write_Command(htft, 0xC1); // PWCTR2
 8000fc8:	21c1      	movs	r1, #193	@ 0xc1
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 fc9a 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0xC5);   // VGH = VCI * 2.5, VGL = -VCI * 2.5
 8000fd0:	21c5      	movs	r1, #197	@ 0xc5
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 fc3b 	bl	800184e <TFT_Write_Data8>

	// 9. 设置电源控制3 (Power Control 3)
	TFT_Write_Command(htft, 0xC2); // PWCTR3 (In Normal mode/ Full colors)
 8000fd8:	21c2      	movs	r1, #194	@ 0xc2
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 fc92 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0x0A);   // Opamp current small, Boost frequency
 8000fe0:	210a      	movs	r1, #10
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 fc33 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x00);   // Boost frequency
 8000fe8:	2100      	movs	r1, #0
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 fc2f 	bl	800184e <TFT_Write_Data8>

	// 10. 设置电源控制4 (Power Control 4)
	TFT_Write_Command(htft, 0xC3); // PWCTR4 (In Idle mode/ 8-colors)
 8000ff0:	21c3      	movs	r1, #195	@ 0xc3
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 fc86 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0x8A);   // Opamp current small, Boost frequency
 8000ff8:	218a      	movs	r1, #138	@ 0x8a
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 fc27 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x2A);   // Boost frequency
 8001000:	212a      	movs	r1, #42	@ 0x2a
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 fc23 	bl	800184e <TFT_Write_Data8>

	// 11. 设置电源控制5 (Power Control 5)
	TFT_Write_Command(htft, 0xC4); // PWCTR5 (In Partial mode/ full colors)
 8001008:	21c4      	movs	r1, #196	@ 0xc4
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 fc7a 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0x8A);   // Opamp current small, Boost frequency
 8001010:	218a      	movs	r1, #138	@ 0x8a
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 fc1b 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0xEE);   // Boost frequency
 8001018:	21ee      	movs	r1, #238	@ 0xee
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 fc17 	bl	800184e <TFT_Write_Data8>

	// 12. 设置VCOM控制 (VCOM Control 1)
	TFT_Write_Command(htft, 0xC5); // VMCTR1
 8001020:	21c5      	movs	r1, #197	@ 0xc5
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 fc6e 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0x0E);   // VCOMH = 4.025V, VCOML = -1.5V
 8001028:	210e      	movs	r1, #14
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 fc0f 	bl	800184e <TFT_Write_Data8>

	// 13. 设置屏幕旋转方向
	TFT_Set_Direction(htft, htft->display_direction);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001036:	4619      	mov	r1, r3
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f8a3 	bl	8001184 <TFT_Set_Direction>

	// 14. 设置像素格式 (Pixel Format Set)
	TFT_Write_Command(htft, 0x3A); // COLMOD
 800103e:	213a      	movs	r1, #58	@ 0x3a
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 fc5f 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0x05);   // 16位像素格式 (RGB565)
 8001046:	2105      	movs	r1, #5
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 fc00 	bl	800184e <TFT_Write_Data8>

	// 15. 伽马校准
	// Gamma (positive polarity)
	TFT_Write_Command(htft, 0xE0); // GMCTRP1
 800104e:	21e0      	movs	r1, #224	@ 0xe0
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 fc57 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0x0F);
 8001056:	210f      	movs	r1, #15
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 fbf8 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x1A);
 800105e:	211a      	movs	r1, #26
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 fbf4 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x0F);
 8001066:	210f      	movs	r1, #15
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f000 fbf0 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x18);
 800106e:	2118      	movs	r1, #24
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 fbec 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x2F);
 8001076:	212f      	movs	r1, #47	@ 0x2f
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 fbe8 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x28);
 800107e:	2128      	movs	r1, #40	@ 0x28
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 fbe4 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x20);
 8001086:	2120      	movs	r1, #32
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 fbe0 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x22);
 800108e:	2122      	movs	r1, #34	@ 0x22
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 fbdc 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x1F);
 8001096:	211f      	movs	r1, #31
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 fbd8 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x1B);
 800109e:	211b      	movs	r1, #27
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 fbd4 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x23);
 80010a6:	2123      	movs	r1, #35	@ 0x23
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 fbd0 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x37);
 80010ae:	2137      	movs	r1, #55	@ 0x37
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 fbcc 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x00);
 80010b6:	2100      	movs	r1, #0
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 fbc8 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x07);
 80010be:	2107      	movs	r1, #7
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 fbc4 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x02);
 80010c6:	2102      	movs	r1, #2
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 fbc0 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x10);
 80010ce:	2110      	movs	r1, #16
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 fbbc 	bl	800184e <TFT_Write_Data8>
	// Negative Gamma Correction
	TFT_Write_Command(htft, 0xE1); // GMCTRN1
 80010d6:	21e1      	movs	r1, #225	@ 0xe1
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 fc13 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0x0F);
 80010de:	210f      	movs	r1, #15
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 fbb4 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x1B);
 80010e6:	211b      	movs	r1, #27
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 fbb0 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x0F);
 80010ee:	210f      	movs	r1, #15
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 fbac 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x17);
 80010f6:	2117      	movs	r1, #23
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 fba8 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x33);
 80010fe:	2133      	movs	r1, #51	@ 0x33
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 fba4 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x2C);
 8001106:	212c      	movs	r1, #44	@ 0x2c
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 fba0 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x29);
 800110e:	2129      	movs	r1, #41	@ 0x29
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 fb9c 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x2E);
 8001116:	212e      	movs	r1, #46	@ 0x2e
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 fb98 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x30);
 800111e:	2130      	movs	r1, #48	@ 0x30
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 fb94 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x30);
 8001126:	2130      	movs	r1, #48	@ 0x30
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 fb90 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x39);
 800112e:	2139      	movs	r1, #57	@ 0x39
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 fb8c 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x3F);
 8001136:	213f      	movs	r1, #63	@ 0x3f
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 fb88 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x00);
 800113e:	2100      	movs	r1, #0
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 fb84 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x07);
 8001146:	2107      	movs	r1, #7
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 fb80 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x03);
 800114e:	2103      	movs	r1, #3
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 fb7c 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x10);
 8001156:	2110      	movs	r1, #16
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 fb78 	bl	800184e <TFT_Write_Data8>

	// 16. 开启正常显示模式 (Normal Display Mode ON)
	TFT_Write_Command(htft, 0x13); // NORON
 800115e:	2113      	movs	r1, #19
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 fbcf 	bl	8001904 <TFT_Write_Command>
	HAL_Delay(10);
 8001166:	200a      	movs	r0, #10
 8001168:	f001 ffb6 	bl	80030d8 <HAL_Delay>

	// 17. 打开显示
	TFT_Write_Command(htft, 0x29); // Display ON
 800116c:	2129      	movs	r1, #41	@ 0x29
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 fbc8 	bl	8001904 <TFT_Write_Command>
	HAL_Delay(20);
 8001174:	2014      	movs	r0, #20
 8001176:	f001 ffaf 	bl	80030d8 <HAL_Delay>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <TFT_Set_Direction>:
 * @retval 无
 * @note   各种TFT屏幕的MADCTL设置可能不同，请根据数据手册调整
 *         ST7735S红板和ST7735R黑板的MADCTL设置和颜色顺序不同
 */
static void TFT_Set_Direction(TFT_HandleTypeDef *htft, uint8_t direction)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	70fb      	strb	r3, [r7, #3]
	TFT_Write_Command(htft, 0x36); // MADCTL - Memory Data Access Control
 8001190:	2136      	movs	r1, #54	@ 0x36
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 fbb6 	bl	8001904 <TFT_Write_Command>
	// MX: 列地址顺序 (0=从左到右, 1=从右到左)
	// MV: 行/列交换 (0=正常, 1=交换)
	// ML: 垂直刷新顺序 (0=从上到下, 1=从下到上)
	// RGB: 颜色顺序 (0=RGB, 1=BGR)
	// MH: 水平刷新顺序 (0=从左到右, 1=从右到左)
	switch (direction)
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	2b03      	cmp	r3, #3
 800119c:	d81e      	bhi.n	80011dc <TFT_Set_Direction+0x58>
 800119e:	a201      	add	r2, pc, #4	@ (adr r2, 80011a4 <TFT_Set_Direction+0x20>)
 80011a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a4:	080011b5 	.word	0x080011b5
 80011a8:	080011bf 	.word	0x080011bf
 80011ac:	080011c9 	.word	0x080011c9
 80011b0:	080011d3 	.word	0x080011d3
	{
	case 0:							 // 0度旋转
		TFT_Write_Data8(htft, 0x00); // MY=0, MX=0, MV=0, RGB
 80011b4:	2100      	movs	r1, #0
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 fb49 	bl	800184e <TFT_Write_Data8>
		break;
 80011bc:	e013      	b.n	80011e6 <TFT_Set_Direction+0x62>
	case 1:							 // 90度旋转
		TFT_Write_Data8(htft, 0xA0); // MY=1, MX=0, MV=1, RGB
 80011be:	21a0      	movs	r1, #160	@ 0xa0
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 fb44 	bl	800184e <TFT_Write_Data8>
		break;
 80011c6:	e00e      	b.n	80011e6 <TFT_Set_Direction+0x62>
	case 2:							 // 180度旋转
		TFT_Write_Data8(htft, 0xC0); // MY=1, MX=1, MV=0, RGB
 80011c8:	21c0      	movs	r1, #192	@ 0xc0
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fb3f 	bl	800184e <TFT_Write_Data8>
		break;
 80011d0:	e009      	b.n	80011e6 <TFT_Set_Direction+0x62>
	case 3:							 // 270度旋转
		TFT_Write_Data8(htft, 0x60); // MY=0, MX=1, MV=1, RGB
 80011d2:	2160      	movs	r1, #96	@ 0x60
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 fb3a 	bl	800184e <TFT_Write_Data8>
		break;
 80011da:	e004      	b.n	80011e6 <TFT_Set_Direction+0x62>
	default:						 // 默认0度旋转
		TFT_Write_Data8(htft, 0xC0); // MY=1, MX=1, MV=0, RGB
 80011dc:	21c0      	movs	r1, #192	@ 0xc0
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 fb35 	bl	800184e <TFT_Write_Data8>
		break;
 80011e4:	bf00      	nop
	}
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop

080011f0 <TFT_Init_ST7789v3>:
 * @param  htft TFT句柄指针
 * @retval 无
 * @note   适用于ST7789v3驱动的TFT屏幕，240x240分辨率
 */
void TFT_Init_ST7789v3(TFT_HandleTypeDef *htft)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	// 1. 初始化底层IO（GPIO/SPI等）
	TFT_IO_Init(htft);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 fad4 	bl	80017a6 <TFT_IO_Init>

	// 2. 硬件复位流程
	TFT_Pin_RES_Set(htft, 0); // 拉低复位引脚
 80011fe:	2100      	movs	r1, #0
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f9ab 	bl	800155c <TFT_Pin_RES_Set>
	HAL_Delay(100);			  // 保持100ms低电平
 8001206:	2064      	movs	r0, #100	@ 0x64
 8001208:	f001 ff66 	bl	80030d8 <HAL_Delay>
	TFT_Pin_RES_Set(htft, 1); // 释放复位引脚
 800120c:	2101      	movs	r1, #1
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f9a4 	bl	800155c <TFT_Pin_RES_Set>
	HAL_Delay(100);			  // 等待复位完成
 8001214:	2064      	movs	r0, #100	@ 0x64
 8001216:	f001 ff5f 	bl	80030d8 <HAL_Delay>

	TFT_Pin_BLK_Set(htft, 1); // 开启背光
 800121a:	2101      	movs	r1, #1
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 f9d3 	bl	80015c8 <TFT_Pin_BLK_Set>
	HAL_Delay(100);			  // 背光稳定时间
 8001222:	2064      	movs	r0, #100	@ 0x64
 8001224:	f001 ff58 	bl	80030d8 <HAL_Delay>

	// 3. 发送软件复位命令
	TFT_Write_Command(htft, 0x01); // 软件复位
 8001228:	2101      	movs	r1, #1
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 fb6a 	bl	8001904 <TFT_Write_Command>
	HAL_Delay(120);				   // 等待复位完成
 8001230:	2078      	movs	r0, #120	@ 0x78
 8001232:	f001 ff51 	bl	80030d8 <HAL_Delay>

	// 4. 退出睡眠模式
	TFT_Write_Command(htft, 0x11); // 退出睡眠模式(Sleep OUT)
 8001236:	2111      	movs	r1, #17
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 fb63 	bl	8001904 <TFT_Write_Command>
	HAL_Delay(120);				   // 等待唤醒完成
 800123e:	2078      	movs	r0, #120	@ 0x78
 8001240:	f001 ff4a 	bl	80030d8 <HAL_Delay>

	// 5. 设置屏幕显示方向
	TFT_Set_Direction(htft, htft->display_direction);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800124a:	4619      	mov	r1, r3
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff99 	bl	8001184 <TFT_Set_Direction>

	// 6. 设置像素格式为16位RGB565
	TFT_Write_Command(htft, 0x3A); // 像素格式设置命令
 8001252:	213a      	movs	r1, #58	@ 0x3a
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 fb55 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0x05);   // 0x05表示16位/pixel
 800125a:	2105      	movs	r1, #5
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 faf6 	bl	800184e <TFT_Write_Data8>

	// 7. 设置Porch控制（帧同步信号）
	TFT_Write_Command(htft, 0xB2); // Porch设置命令
 8001262:	21b2      	movs	r1, #178	@ 0xb2
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 fb4d 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0x0C);   // 前廊
 800126a:	210c      	movs	r1, #12
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 faee 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x0C);   // 后廊
 8001272:	210c      	movs	r1, #12
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 faea 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x00);   // 空闲模式
 800127a:	2100      	movs	r1, #0
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 fae6 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x33);   // 行同步
 8001282:	2133      	movs	r1, #51	@ 0x33
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 fae2 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x33);   // 帧同步
 800128a:	2133      	movs	r1, #51	@ 0x33
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 fade 	bl	800184e <TFT_Write_Data8>

	// 8. 设置Gate控制
	TFT_Write_Command(htft, 0xB7); // Gate控制命令
 8001292:	21b7      	movs	r1, #183	@ 0xb7
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 fb35 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0x72);   // 具体参数见数据手册
 800129a:	2172      	movs	r1, #114	@ 0x72
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 fad6 	bl	800184e <TFT_Write_Data8>

	// 9. 设置VCOM电压
	TFT_Write_Command(htft, 0xBB); // VCOM设置
 80012a2:	21bb      	movs	r1, #187	@ 0xbb
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 fb2d 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0x3D);   // VCOM电压值
 80012aa:	213d      	movs	r1, #61	@ 0x3d
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 face 	bl	800184e <TFT_Write_Data8>

	// 10. 设置LCM控制
	TFT_Write_Command(htft, 0xC0); // LCM控制命令
 80012b2:	21c0      	movs	r1, #192	@ 0xc0
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 fb25 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0x2C);   // 具体参数
 80012ba:	212c      	movs	r1, #44	@ 0x2c
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fac6 	bl	800184e <TFT_Write_Data8>

	// 11. 设置VDV和VRH命令使能
	TFT_Write_Command(htft, 0xC2); // VDV/VRH控制
 80012c2:	21c2      	movs	r1, #194	@ 0xc2
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 fb1d 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0x01);   // 使能
 80012ca:	2101      	movs	r1, #1
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 fabe 	bl	800184e <TFT_Write_Data8>

	// 12. 设置VRH电压
	TFT_Write_Command(htft, 0xC3); // VRH设置
 80012d2:	21c3      	movs	r1, #195	@ 0xc3
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 fb15 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0x19);   // VRH电压值
 80012da:	2119      	movs	r1, #25
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fab6 	bl	800184e <TFT_Write_Data8>

	// 13. 设置VDV电压
	TFT_Write_Command(htft, 0xC4); // VDV设置
 80012e2:	21c4      	movs	r1, #196	@ 0xc4
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 fb0d 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0x20);   // VDV电压值
 80012ea:	2120      	movs	r1, #32
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 faae 	bl	800184e <TFT_Write_Data8>

	// 14. 设置正常模式下的帧率控制
	TFT_Write_Command(htft, 0xC6); // 帧率控制
 80012f2:	21c6      	movs	r1, #198	@ 0xc6
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 fb05 	bl	8001904 <TFT_Write_Command>

	// TFT_Write_Data8(htft, 0x00); // 119Hz刷新率
	TFT_Write_Data8(htft, 0x05); // 90Hz刷新率
 80012fa:	2105      	movs	r1, #5
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 faa6 	bl	800184e <TFT_Write_Data8>
	// TFT_Write_Data8(htft, 0x0F);   // 60Hz刷新率

	// 15. 设置电源控制1
	TFT_Write_Command(htft, 0xD0); // 电源控制1
 8001302:	21d0      	movs	r1, #208	@ 0xd0
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 fafd 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0xA4);   // 参数1
 800130a:	21a4      	movs	r1, #164	@ 0xa4
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 fa9e 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0xA1);   // 参数2
 8001312:	21a1      	movs	r1, #161	@ 0xa1
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 fa9a 	bl	800184e <TFT_Write_Data8>

	// 16. 设置Gate控制2
	TFT_Write_Command(htft, 0xD6); // Gate控制2
 800131a:	21d6      	movs	r1, #214	@ 0xd6
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 faf1 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0xA1);   // 睡眠模式下Gate输出GND
 8001322:	21a1      	movs	r1, #161	@ 0xa1
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 fa92 	bl	800184e <TFT_Write_Data8>

	// 17. 正极性伽马校正
	TFT_Write_Command(htft, 0xE0); // 正伽马校正
 800132a:	21e0      	movs	r1, #224	@ 0xe0
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 fae9 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0xD0);   // 伽马值1
 8001332:	21d0      	movs	r1, #208	@ 0xd0
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 fa8a 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x04);   // 伽马值2
 800133a:	2104      	movs	r1, #4
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 fa86 	bl	800184e <TFT_Write_Data8>
	/* 后续14个伽马校正参数 */
	TFT_Write_Data8(htft, 0x0D);
 8001342:	210d      	movs	r1, #13
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 fa82 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x11);
 800134a:	2111      	movs	r1, #17
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 fa7e 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x13);
 8001352:	2113      	movs	r1, #19
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 fa7a 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x2B);
 800135a:	212b      	movs	r1, #43	@ 0x2b
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 fa76 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x3F);
 8001362:	213f      	movs	r1, #63	@ 0x3f
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 fa72 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x54);
 800136a:	2154      	movs	r1, #84	@ 0x54
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 fa6e 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x4C);
 8001372:	214c      	movs	r1, #76	@ 0x4c
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 fa6a 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x18);
 800137a:	2118      	movs	r1, #24
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 fa66 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x0D);
 8001382:	210d      	movs	r1, #13
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 fa62 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x0B);
 800138a:	210b      	movs	r1, #11
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 fa5e 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x1F);
 8001392:	211f      	movs	r1, #31
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 fa5a 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x23);
 800139a:	2123      	movs	r1, #35	@ 0x23
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 fa56 	bl	800184e <TFT_Write_Data8>

	// 18. 负极性伽马校正
	TFT_Write_Command(htft, 0xE1); // 负伽马校正
 80013a2:	21e1      	movs	r1, #225	@ 0xe1
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 faad 	bl	8001904 <TFT_Write_Command>
	TFT_Write_Data8(htft, 0xD0);   // 伽马值1
 80013aa:	21d0      	movs	r1, #208	@ 0xd0
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fa4e 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x04);   // 伽马值2
 80013b2:	2104      	movs	r1, #4
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 fa4a 	bl	800184e <TFT_Write_Data8>
	/* 后续14个伽马校正参数 */
	TFT_Write_Data8(htft, 0x0C);
 80013ba:	210c      	movs	r1, #12
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 fa46 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x11);
 80013c2:	2111      	movs	r1, #17
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 fa42 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x13);
 80013ca:	2113      	movs	r1, #19
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 fa3e 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x2C);
 80013d2:	212c      	movs	r1, #44	@ 0x2c
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 fa3a 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x3F);
 80013da:	213f      	movs	r1, #63	@ 0x3f
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 fa36 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x44);
 80013e2:	2144      	movs	r1, #68	@ 0x44
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 fa32 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x51);
 80013ea:	2151      	movs	r1, #81	@ 0x51
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 fa2e 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x2F);
 80013f2:	212f      	movs	r1, #47	@ 0x2f
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 fa2a 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x1F);
 80013fa:	211f      	movs	r1, #31
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 fa26 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x1F);
 8001402:	211f      	movs	r1, #31
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 fa22 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x20);
 800140a:	2120      	movs	r1, #32
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 fa1e 	bl	800184e <TFT_Write_Data8>
	TFT_Write_Data8(htft, 0x23);
 8001412:	2123      	movs	r1, #35	@ 0x23
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 fa1a 	bl	800184e <TFT_Write_Data8>

	// 19. 开启显示反转（可选）
	TFT_Write_Command(htft, 0x21); // 显示反转ON
 800141a:	2121      	movs	r1, #33	@ 0x21
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 fa71 	bl	8001904 <TFT_Write_Command>

	// 20. 开启显示
	TFT_Write_Command(htft, 0x29); // 显示ON
 8001422:	2129      	movs	r1, #41	@ 0x29
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 fa6d 	bl	8001904 <TFT_Write_Command>
	HAL_Delay(20);				   // 等待显示稳定
 800142a:	2014      	movs	r0, #20
 800142c:	f001 fe54 	bl	80030d8 <HAL_Delay>
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <TFT_Init_Instance>:
 * @param  cs_pin: CS引脚号
 * @retval 无
 */
void TFT_Init_Instance(TFT_HandleTypeDef *htft, SPI_HandleTypeDef *hspi,
					   GPIO_TypeDef *cs_port, uint16_t cs_pin)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	807b      	strh	r3, [r7, #2]
	// 初始化基本参数
	htft->spi_handle = hspi;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	601a      	str	r2, [r3, #0]
	htft->cs_port = cs_port;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	605a      	str	r2, [r3, #4]
	htft->cs_pin = cs_pin;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	887a      	ldrh	r2, [r7, #2]
 8001456:	811a      	strh	r2, [r3, #8]

	// 设置默认缓冲区大小
	htft->buffer_size = TFT_BUFFER_SIZE;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800145e:	851a      	strh	r2, [r3, #40]	@ 0x28
	htft->buffer_write_index = 0;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	855a      	strh	r2, [r3, #42]	@ 0x2a
	htft->tx_buffer = NULL; // 后续会分配内存
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	625a      	str	r2, [r3, #36]	@ 0x24

	// 设置默认显示参数
	htft->display_direction = DISPLAY_DIRECTION;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2202      	movs	r2, #2
 8001470:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	htft->x_offset = TFT_X_OFFSET;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2202      	movs	r2, #2
 8001478:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	htft->y_offset = TFT_Y_OFFSET;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <TFT_Config_Pins>:
 */
void TFT_Config_Pins(TFT_HandleTypeDef *htft,
					 GPIO_TypeDef *dc_port, uint16_t dc_pin,
					 GPIO_TypeDef *res_port, uint16_t res_pin,
					 GPIO_TypeDef *bl_port, uint16_t bl_pin)
{
 800148e:	b480      	push	{r7}
 8001490:	b085      	sub	sp, #20
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	4613      	mov	r3, r2
 800149c:	80fb      	strh	r3, [r7, #6]
	htft->dc_port = dc_port;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	60da      	str	r2, [r3, #12]
	htft->dc_pin = dc_pin;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	88fa      	ldrh	r2, [r7, #6]
 80014a8:	821a      	strh	r2, [r3, #16]
	htft->res_port = res_port;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	615a      	str	r2, [r3, #20]
	htft->res_pin = res_pin;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8b3a      	ldrh	r2, [r7, #24]
 80014b4:	831a      	strh	r2, [r3, #24]
	htft->bl_port = bl_port;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	69fa      	ldr	r2, [r7, #28]
 80014ba:	61da      	str	r2, [r3, #28]
	htft->bl_pin = bl_pin;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	8c3a      	ldrh	r2, [r7, #32]
 80014c0:	841a      	strh	r2, [r3, #32]
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <TFT_Config_Display>:
 * @retval 无
 */
void TFT_Config_Display(TFT_HandleTypeDef *htft,
						uint8_t display_direction,
						uint8_t x_offset, uint8_t y_offset)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	4608      	mov	r0, r1
 80014d6:	4611      	mov	r1, r2
 80014d8:	461a      	mov	r2, r3
 80014da:	4603      	mov	r3, r0
 80014dc:	70fb      	strb	r3, [r7, #3]
 80014de:	460b      	mov	r3, r1
 80014e0:	70bb      	strb	r3, [r7, #2]
 80014e2:	4613      	mov	r3, r2
 80014e4:	707b      	strb	r3, [r7, #1]
	htft->display_direction = display_direction;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	78fa      	ldrb	r2, [r7, #3]
 80014ea:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	htft->x_offset = x_offset;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	78ba      	ldrb	r2, [r7, #2]
 80014f2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	htft->y_offset = y_offset;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	787a      	ldrb	r2, [r7, #1]
 80014fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <TFT_Register_Device>:
 * @param  htft TFT句柄指针
 * @retval 无
 * @note   内部函数，用于DMA回调
 */
static void TFT_Register_Device(TFT_HandleTypeDef *htft)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < MAX_TFT_DEVICES; i++)
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	e017      	b.n	8001546 <TFT_Register_Device+0x3e>
	{
		if (g_tft_handles[i] == NULL || g_tft_handles[i]->spi_handle == htft->spi_handle)
 8001516:	4a10      	ldr	r2, [pc, #64]	@ (8001558 <TFT_Register_Device+0x50>)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d008      	beq.n	8001534 <TFT_Register_Device+0x2c>
 8001522:	4a0d      	ldr	r2, [pc, #52]	@ (8001558 <TFT_Register_Device+0x50>)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d105      	bne.n	8001540 <TFT_Register_Device+0x38>
		{
			g_tft_handles[i] = htft;
 8001534:	4908      	ldr	r1, [pc, #32]	@ (8001558 <TFT_Register_Device+0x50>)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 800153e:	e006      	b.n	800154e <TFT_Register_Device+0x46>
	for (int i = 0; i < MAX_TFT_DEVICES; i++)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3301      	adds	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b03      	cmp	r3, #3
 800154a:	dde4      	ble.n	8001516 <TFT_Register_Device+0xe>
		}
	}
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	200000a8 	.word	0x200000a8

0800155c <TFT_Pin_RES_Set>:
 * @brief  控制复位引脚 (RES/RST)
 * @param  htft: TFT屏幕句柄指针
 * @param  level: 0=拉低 (复位激活), 1=拉高 (复位释放)
 */
void TFT_Pin_RES_Set(TFT_HandleTypeDef *htft, uint8_t level)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	70fb      	strb	r3, [r7, #3]
#ifdef STM32HAL
	HAL_GPIO_WritePin(htft->res_port, htft->res_pin, (GPIO_PinState)level);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6958      	ldr	r0, [r3, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	8b1b      	ldrh	r3, [r3, #24]
 8001570:	78fa      	ldrb	r2, [r7, #3]
 8001572:	4619      	mov	r1, r3
 8001574:	f002 fb08 	bl	8003b88 <HAL_GPIO_WritePin>
	// 在此添加其他平台的 GPIO 控制代码
	// 例如: OtherPlatform_GPIOWrite(htft->res_pin, level);
#else
#error "No platform defined for GPIO control in TFT_config.h"
#endif
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <TFT_Pin_DC_Set>:
 * @brief  控制数据/命令选择引脚 (DC/RS)
 * @param  htft: TFT屏幕句柄指针
 * @param  level: 0=命令模式 (低), 1=数据模式 (高)
 */
void TFT_Pin_DC_Set(TFT_HandleTypeDef *htft, uint8_t level)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	70fb      	strb	r3, [r7, #3]
#ifdef STM32HAL
	HAL_GPIO_WritePin(htft->dc_port, htft->dc_pin, (GPIO_PinState)level);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68d8      	ldr	r0, [r3, #12]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	8a1b      	ldrh	r3, [r3, #16]
 8001594:	78fa      	ldrb	r2, [r7, #3]
 8001596:	4619      	mov	r1, r3
 8001598:	f002 faf6 	bl	8003b88 <HAL_GPIO_WritePin>
	// 在此添加其他平台的 GPIO 控制代码
	// 例如: OtherPlatform_GPIOWrite(htft->dc_pin, level);
#else
#error "No platform defined for GPIO control in TFT_config.h"
#endif
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <TFT_Pin_CS_Set>:
 * @brief  控制片选引脚 (CS)
 * @param  htft: TFT屏幕句柄指针
 * @param  level: 0=选中 (低), 1=取消选中 (高)
 */
void TFT_Pin_CS_Set(TFT_HandleTypeDef *htft, uint8_t level)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	70fb      	strb	r3, [r7, #3]
#ifdef STM32HAL
	HAL_GPIO_WritePin(htft->cs_port, htft->cs_pin, (GPIO_PinState)level);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6858      	ldr	r0, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	891b      	ldrh	r3, [r3, #8]
 80015b8:	78fa      	ldrb	r2, [r7, #3]
 80015ba:	4619      	mov	r1, r3
 80015bc:	f002 fae4 	bl	8003b88 <HAL_GPIO_WritePin>
	// 在此添加其他平台的 GPIO 控制代码
	// 例如: OtherPlatform_GPIOWrite(htft->cs_pin, level);
#else
#error "No platform defined for GPIO control in TFT_config.h"
#endif
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <TFT_Pin_BLK_Set>:
 * @brief  控制背光引脚 (BLK/BL)
 * @param  htft: TFT屏幕句柄指针
 * @param  level: 0=关闭 (低), 1=打开 (高)
 */
void TFT_Pin_BLK_Set(TFT_HandleTypeDef *htft, uint8_t level)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	70fb      	strb	r3, [r7, #3]
	// 注意：某些屏幕背光可能是低电平点亮，需根据实际硬件调整
#ifdef STM32HAL
	HAL_GPIO_WritePin(htft->bl_port, htft->bl_pin, (GPIO_PinState)level);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69d8      	ldr	r0, [r3, #28]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	8c1b      	ldrh	r3, [r3, #32]
 80015dc:	78fa      	ldrb	r2, [r7, #3]
 80015de:	4619      	mov	r1, r3
 80015e0:	f002 fad2 	bl	8003b88 <HAL_GPIO_WritePin>
	// 在此添加其他平台的 GPIO 控制代码
	// 例如: OtherPlatform_GPIOWrite(htft->bl_pin, level);
#else
#error "No platform defined for GPIO control in TFT_config.h"
#endif
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <TFT_Platform_SPI_Transmit_Blocking>:
 * @param  Size       要发送的数据大小 (字节)
 * @param  Timeout    超时时间 (平台相关定义)
 * @retval 平台相关的状态码 (例如 HAL_StatusTypeDef)
 */
int TFT_Platform_SPI_Transmit_Blocking(SPI_HandleTypeDef *spi_handle, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	4613      	mov	r3, r2
 80015fa:	80fb      	strh	r3, [r7, #6]
#ifdef STM32HAL
	return HAL_SPI_Transmit(spi_handle, pData, Size, Timeout);
 80015fc:	88fa      	ldrh	r2, [r7, #6]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f002 ff6c 	bl	80044e0 <HAL_SPI_Transmit>
 8001608:	4603      	mov	r3, r0
	return -1; // Placeholder error
#else
#error "No platform defined for SPI blocking transmit in TFT_config.h"
	return -1; // Return error code
#endif
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <TFT_Platform_SPI_Transmit_DMA_Start>:
 * @param  Size       要发送的数据大小 (字节)
 * @retval 平台相关的状态码 (例如 HAL_StatusTypeDef)
 * @note   此函数应启动传输但不等待完成。完成由回调处理。
 */
int TFT_Platform_SPI_Transmit_DMA_Start(SPI_HandleTypeDef *spi_handle, uint8_t *pData, uint16_t Size)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b084      	sub	sp, #16
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	4613      	mov	r3, r2
 800161e:	80fb      	strh	r3, [r7, #6]
#ifdef STM32HAL
	return HAL_SPI_Transmit_DMA(spi_handle, pData, Size);
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	461a      	mov	r2, r3
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f003 f89e 	bl	8004768 <HAL_SPI_Transmit_DMA>
 800162c:	4603      	mov	r3, r0
	return -1; // Placeholder error
#else
#error "No platform defined for SPI DMA transmit in TFT_config.h"
	return -1; // Return error code
#endif
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <TFT_SPI_Send>:
 * @param  length      要发送的数据长度（字节数）
 * @param  wait_completion 是否等待传输完成 (1=等待, 0=不等待，仅 DMA 模式有效)
 * @retval 无
 */
void TFT_SPI_Send(TFT_HandleTypeDef *htft, uint8_t *data_buffer, uint16_t length, uint8_t wait_completion)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	4611      	mov	r1, r2
 8001642:	461a      	mov	r2, r3
 8001644:	460b      	mov	r3, r1
 8001646:	80fb      	strh	r3, [r7, #6]
 8001648:	4613      	mov	r3, r2
 800164a:	717b      	strb	r3, [r7, #5]
	if (htft == NULL || htft->spi_handle == NULL || length == 0 || data_buffer == NULL)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d03c      	beq.n	80016cc <TFT_SPI_Send+0x96>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d038      	beq.n	80016cc <TFT_SPI_Send+0x96>
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d035      	beq.n	80016cc <TFT_SPI_Send+0x96>
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d032      	beq.n	80016cc <TFT_SPI_Send+0x96>
		return; // 参数检查

	TFT_Wait_DMA_Transfer_Complete(htft); // 确保上一次 DMA 传输 (如果有) 已完成
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f000 f8d8 	bl	800181c <TFT_Wait_DMA_Transfer_Complete>

	TFT_Pin_DC_Set(htft, 1); // 设置为数据模式
 800166c:	2101      	movs	r1, #1
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f7ff ff86 	bl	8001580 <TFT_Pin_DC_Set>
	TFT_Pin_CS_Set(htft, 0); // 拉低片选，开始传输
 8001674:	2100      	movs	r1, #0
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f7ff ff94 	bl	80015a4 <TFT_Pin_CS_Set>

	if (htft->is_dma_enabled) // 如果启用了 DMA
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001682:	2b00      	cmp	r3, #0
 8001684:	d015      	beq.n	80016b2 <TFT_SPI_Send+0x7c>
	{
		htft->is_dma_transfer_active = 1; // 设置 DMA 忙标志
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		// 启动 SPI DMA 传输 (使用平台抽象函数)
		TFT_Platform_SPI_Transmit_DMA_Start(htft->spi_handle, data_buffer, length);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	88fa      	ldrh	r2, [r7, #6]
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ffbb 	bl	8001612 <TFT_Platform_SPI_Transmit_DMA_Start>
		// 如果需要等待完成，则在此处等待
		if (wait_completion)
 800169c:	797b      	ldrb	r3, [r7, #5]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d015      	beq.n	80016ce <TFT_SPI_Send+0x98>
		{
			TFT_Wait_DMA_Transfer_Complete(htft); // 等待 DMA 完成
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 f8ba 	bl	800181c <TFT_Wait_DMA_Transfer_Complete>
			TFT_Pin_CS_Set(htft, 1);			  // DMA 完成后手动拉高片选
 80016a8:	2101      	movs	r1, #1
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f7ff ff7a 	bl	80015a4 <TFT_Pin_CS_Set>
 80016b0:	e00d      	b.n	80016ce <TFT_SPI_Send+0x98>
		// 如果不需要等待 (wait_completion = 0)，CS 将在 DMA 完成回调函数 HAL_SPI_TxCpltCallback 中拉高
	}
	else // 如果未使用 DMA，使用阻塞式 SPI 传输
	{
		// 使用平台抽象的阻塞式发送函数
		TFT_Platform_SPI_Transmit_Blocking(htft->spi_handle, data_buffer, length, HAL_MAX_DELAY); // 使用最大超时时间
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	88fa      	ldrh	r2, [r7, #6]
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	f7ff ff95 	bl	80015ec <TFT_Platform_SPI_Transmit_Blocking>
		TFT_Pin_CS_Set(htft, 1);																  // 阻塞传输完成后立即拉高片选
 80016c2:	2101      	movs	r1, #1
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f7ff ff6d 	bl	80015a4 <TFT_Pin_CS_Set>
 80016ca:	e000      	b.n	80016ce <TFT_SPI_Send+0x98>
		return; // 参数检查
 80016cc:	bf00      	nop
	}
}
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <TFT_Buffer_Write16>:
 * @retval 无
 * @note   数据以大端模式 (高字节在前) 写入缓冲区。
 *         如果缓冲区空间不足以写入 2 字节，会自动刷新缓冲区 (非阻塞)。
 */
void TFT_Buffer_Write16(TFT_HandleTypeDef *htft, uint16_t data)
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
	// 检查参数
	if (htft == NULL || htft->tx_buffer == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d02a      	beq.n	800173c <TFT_Buffer_Write16+0x68>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d026      	beq.n	800173c <TFT_Buffer_Write16+0x68>
		return;

	// 检查缓冲区剩余空间是否足够存放 16 位数据 (2字节)
	if (htft->buffer_write_index >= htft->buffer_size - 1)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f2:	461a      	mov	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016f8:	3b01      	subs	r3, #1
 80016fa:	429a      	cmp	r2, r3
 80016fc:	db03      	blt.n	8001706 <TFT_Buffer_Write16+0x32>
	{
		TFT_Flush_Buffer(htft, 0); // 缓冲区满，刷新缓冲区，不等待完成
 80016fe:	2100      	movs	r1, #0
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f81f 	bl	8001744 <TFT_Flush_Buffer>
	}

	// 将 16 位数据按大端序写入缓冲区
	htft->tx_buffer[htft->buffer_write_index++] = (data >> 8) & 0xFF; // 高字节
 8001706:	887b      	ldrh	r3, [r7, #2]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	b298      	uxth	r0, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001714:	1c59      	adds	r1, r3, #1
 8001716:	b28c      	uxth	r4, r1
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	854c      	strh	r4, [r1, #42]	@ 0x2a
 800171c:	4413      	add	r3, r2
 800171e:	b2c2      	uxtb	r2, r0
 8001720:	701a      	strb	r2, [r3, #0]
	htft->tx_buffer[htft->buffer_write_index++] = data & 0xFF;		  // 低字节
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800172a:	1c59      	adds	r1, r3, #1
 800172c:	b288      	uxth	r0, r1
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	8548      	strh	r0, [r1, #42]	@ 0x2a
 8001732:	4413      	add	r3, r2
 8001734:	887a      	ldrh	r2, [r7, #2]
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e000      	b.n	800173e <TFT_Buffer_Write16+0x6a>
		return;
 800173c:	bf00      	nop
}
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bd90      	pop	{r4, r7, pc}

08001744 <TFT_Flush_Buffer>:
 * @param  htft TFT句柄指针
 * @param  wait_completion 是否等待传输完成 (1=等待, 0=不等待，仅 DMA 模式有效)
 * @retval 无
 */
void TFT_Flush_Buffer(TFT_HandleTypeDef *htft, uint8_t wait_completion)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	70fb      	strb	r3, [r7, #3]
	if (htft == NULL || htft->tx_buffer == NULL || htft->buffer_write_index == 0)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d013      	beq.n	800177e <TFT_Flush_Buffer+0x3a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00f      	beq.n	800177e <TFT_Flush_Buffer+0x3a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <TFT_Flush_Buffer+0x3a>
		return; // 缓冲区为空，无需刷新

	// 调用 TFT_SPI_Send 发送缓冲区中的数据
	TFT_SPI_Send(htft, htft->tx_buffer, htft->buffer_write_index, wait_completion);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff60 	bl	8001636 <TFT_SPI_Send>

	htft->buffer_write_index = 0; // 发送后重置缓冲区索引
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800177c:	e000      	b.n	8001780 <TFT_Flush_Buffer+0x3c>
		return; // 缓冲区为空，无需刷新
 800177e:	bf00      	nop
}
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <TFT_Reset_Buffer>:
 * @brief  重置发送缓冲区（清空索引，不发送数据）
 * @param  htft TFT句柄指针
 * @retval 无
 */
void TFT_Reset_Buffer(TFT_HandleTypeDef *htft)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
	if (htft == NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <TFT_Reset_Buffer+0x16>
		return;

	htft->buffer_write_index = 0;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800179a:	e000      	b.n	800179e <TFT_Reset_Buffer+0x18>
		return;
 800179c:	bf00      	nop
}
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <TFT_IO_Init>:
 * @brief  初始化 TFT IO 层，配置 SPI 句柄和 DMA 使用状态
 * @param  htft TFT句柄指针
 * @retval 无
 */
void TFT_IO_Init(TFT_HandleTypeDef *htft)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
	if (htft == NULL || htft->spi_handle == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d02d      	beq.n	8001810 <TFT_IO_Init+0x6a>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d029      	beq.n	8001810 <TFT_IO_Init+0x6a>
		// 可以在这里添加错误处理，例如断言或日志记录
		return;
	}

	// 分配发送缓冲区内存
	if (htft->tx_buffer == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10c      	bne.n	80017de <TFT_IO_Init+0x38>
	{
		htft->tx_buffer = (uint8_t *)malloc(htft->buffer_size);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 ff53 	bl	8005674 <malloc>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	625a      	str	r2, [r3, #36]	@ 0x24
		if (htft->tx_buffer == NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d01a      	beq.n	8001814 <TFT_IO_Init+0x6e>
			// 内存分配失败处理
			return;
		}
	}

	htft->buffer_write_index = 0; // 初始化缓冲区索引
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

#ifdef STM32HAL
	// 检查关联的 SPI 句柄是否配置了 DMA 发送通道
	if (htft->spi_handle->hdmatx != NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d004      	beq.n	80017f8 <TFT_IO_Init+0x52>
	{
		htft->is_dma_enabled = 1; // SPI 已配置 DMA 发送
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80017f6:	e003      	b.n	8001800 <TFT_IO_Init+0x5a>
	}
	else
	{
		htft->is_dma_enabled = 0; // SPI 未配置 DMA 发送
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	htft->is_dma_enabled = 0; // 假设默认禁用 DMA，需要具体实现
#else
#error "No platform defined for SPI/DMA initialization in TFT_config.h"
#endif

	htft->is_dma_transfer_active = 0; // 初始化 DMA 传输状态标志
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

	// 注册设备到全局设备列表，用于DMA回调
	TFT_Register_Device(htft);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff fe7d 	bl	8001508 <TFT_Register_Device>
 800180e:	e002      	b.n	8001816 <TFT_IO_Init+0x70>
		return;
 8001810:	bf00      	nop
 8001812:	e000      	b.n	8001816 <TFT_IO_Init+0x70>
			return;
 8001814:	bf00      	nop
}
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <TFT_Wait_DMA_Transfer_Complete>:
 * @param  htft TFT句柄指针
 * @retval 无
 * @note   仅在 DMA 模式下且 DMA 传输正在进行时阻塞。
 */
static void TFT_Wait_DMA_Transfer_Complete(TFT_HandleTypeDef *htft)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	if (htft == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00c      	beq.n	8001844 <TFT_Wait_DMA_Transfer_Complete+0x28>
		return;

	// 仅当 DMA 被启用且当前有活动的 DMA 传输时才需要等待
	if (htft->is_dma_enabled)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001830:	2b00      	cmp	r3, #0
 8001832:	d008      	beq.n	8001846 <TFT_Wait_DMA_Transfer_Complete+0x2a>
	{
		while (htft->is_dma_transfer_active)
 8001834:	bf00      	nop
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f9      	bne.n	8001836 <TFT_Wait_DMA_Transfer_Complete+0x1a>
 8001842:	e000      	b.n	8001846 <TFT_Wait_DMA_Transfer_Complete+0x2a>
		return;
 8001844:	bf00      	nop
			// 例如: osSemaphoreWait(spiDmaSemaphore, osWaitForever);
			// 或者使用 __WFI() 指令让 CPU 进入低功耗模式等待中断。
		}
	}
	// 如果 DMA 未启用或没有活动的传输，此函数立即返回。
}
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr

0800184e <TFT_Write_Data8>:
 * @retval 无
 * @note   此函数总是使用阻塞式 SPI 传输，并假定在发送前 DC 引脚已设为数据模式。
 *         通常在发送命令后调用，用于发送命令参数。
 */
void TFT_Write_Data8(TFT_HandleTypeDef *htft, uint8_t data)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	70fb      	strb	r3, [r7, #3]
	if (htft == NULL || htft->spi_handle == NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d01b      	beq.n	8001898 <TFT_Write_Data8+0x4a>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d017      	beq.n	8001898 <TFT_Write_Data8+0x4a>
		return;

	TFT_Wait_DMA_Transfer_Complete(htft); // 确保之前的 DMA 操作完成
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ffd7 	bl	800181c <TFT_Wait_DMA_Transfer_Complete>
	TFT_Pin_DC_Set(htft, 1);			  // 确保是数据模式
 800186e:	2101      	movs	r1, #1
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff fe85 	bl	8001580 <TFT_Pin_DC_Set>
	TFT_Pin_CS_Set(htft, 0);			  // 片选选中
 8001876:	2100      	movs	r1, #0
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff fe93 	bl	80015a4 <TFT_Pin_CS_Set>

	// 使用平台抽象的阻塞式发送单个字节
	TFT_Platform_SPI_Transmit_Blocking(htft->spi_handle, &data, 1, HAL_MAX_DELAY);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	1cf9      	adds	r1, r7, #3
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
 8001888:	2201      	movs	r2, #1
 800188a:	f7ff feaf 	bl	80015ec <TFT_Platform_SPI_Transmit_Blocking>

	TFT_Pin_CS_Set(htft, 1); // 传输完成后拉高 CS
 800188e:	2101      	movs	r1, #1
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fe87 	bl	80015a4 <TFT_Pin_CS_Set>
 8001896:	e000      	b.n	800189a <TFT_Write_Data8+0x4c>
		return;
 8001898:	bf00      	nop
}
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <TFT_Write_Data16>:
 * @retval 无
 * @note   此函数总是使用阻塞式 SPI 传输。
 *         主要用于绘制单个点或少量数据，不经过发送缓冲区。
 */
void TFT_Write_Data16(TFT_HandleTypeDef *htft, uint16_t data)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
	if (htft == NULL || htft->spi_handle == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d024      	beq.n	80018fc <TFT_Write_Data16+0x5c>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d020      	beq.n	80018fc <TFT_Write_Data16+0x5c>
		return;

	uint8_t spi_data[2];
	spi_data[0] = (data >> 8) & 0xFF; // 高字节 (大端)
 80018ba:	887b      	ldrh	r3, [r7, #2]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	b29b      	uxth	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	733b      	strb	r3, [r7, #12]
	spi_data[1] = data & 0xFF;		  // 低字节
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	737b      	strb	r3, [r7, #13]

	TFT_Wait_DMA_Transfer_Complete(htft); // 确保之前的 DMA 操作完成
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ffa6 	bl	800181c <TFT_Wait_DMA_Transfer_Complete>
	TFT_Pin_DC_Set(htft, 1);			  // 数据模式
 80018d0:	2101      	movs	r1, #1
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff fe54 	bl	8001580 <TFT_Pin_DC_Set>
	TFT_Pin_CS_Set(htft, 0);			  // 片选选中
 80018d8:	2100      	movs	r1, #0
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fe62 	bl	80015a4 <TFT_Pin_CS_Set>

	// 使用平台抽象的阻塞式发送 2 个字节
	TFT_Platform_SPI_Transmit_Blocking(htft->spi_handle, spi_data, 2, HAL_MAX_DELAY);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	f107 010c 	add.w	r1, r7, #12
 80018e8:	f04f 33ff 	mov.w	r3, #4294967295
 80018ec:	2202      	movs	r2, #2
 80018ee:	f7ff fe7d 	bl	80015ec <TFT_Platform_SPI_Transmit_Blocking>

	TFT_Pin_CS_Set(htft, 1); // 传输完成后拉高 CS
 80018f2:	2101      	movs	r1, #1
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff fe55 	bl	80015a4 <TFT_Pin_CS_Set>
 80018fa:	e000      	b.n	80018fe <TFT_Write_Data16+0x5e>
		return;
 80018fc:	bf00      	nop
}
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <TFT_Write_Command>:
 * @retval 无
 * @note   发送命令前会先刷新缓冲区 (阻塞等待)。
 *         命令本身使用阻塞式 SPI 传输。
 */
void TFT_Write_Command(TFT_HandleTypeDef *htft, uint8_t command)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	70fb      	strb	r3, [r7, #3]
	if (htft == NULL || htft->spi_handle == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d01c      	beq.n	8001950 <TFT_Write_Command+0x4c>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d018      	beq.n	8001950 <TFT_Write_Command+0x4c>
		return;

	// 发送命令前，确保缓冲区中的所有数据已发送完成
	TFT_Flush_Buffer(htft, 1); // 等待缓冲区刷新完成
 800191e:	2101      	movs	r1, #1
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff0f 	bl	8001744 <TFT_Flush_Buffer>

	// 不需要再次调用 TFT_Wait_DMA_Transfer_Complete()，因为 Flush_Buffer(1) 已经等待了

	TFT_Pin_DC_Set(htft, 0); // 设置为命令模式
 8001926:	2100      	movs	r1, #0
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff fe29 	bl	8001580 <TFT_Pin_DC_Set>
	TFT_Pin_CS_Set(htft, 0); // 片选选中
 800192e:	2100      	movs	r1, #0
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff fe37 	bl	80015a4 <TFT_Pin_CS_Set>

	// 使用平台抽象的阻塞式发送命令字节
	TFT_Platform_SPI_Transmit_Blocking(htft->spi_handle, &command, 1, HAL_MAX_DELAY);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	1cf9      	adds	r1, r7, #3
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
 8001940:	2201      	movs	r2, #1
 8001942:	f7ff fe53 	bl	80015ec <TFT_Platform_SPI_Transmit_Blocking>

	TFT_Pin_CS_Set(htft, 1); // 命令发送完成后立即拉高 CS
 8001946:	2101      	movs	r1, #1
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff fe2b 	bl	80015a4 <TFT_Pin_CS_Set>
 800194e:	e000      	b.n	8001952 <TFT_Write_Command+0x4e>
		return;
 8001950:	bf00      	nop
}
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <TFT_Set_Address>:
 * @param  y_end   结束行坐标
 * @retval 无
 * @note   设置后，后续所有的数据传输都会写入此区域，窗口在不同屏幕方向下会自动适配
 */
void TFT_Set_Address(TFT_HandleTypeDef *htft, uint16_t x_start, uint16_t y_start, uint16_t x_end, uint16_t y_end)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	4608      	mov	r0, r1
 8001962:	4611      	mov	r1, r2
 8001964:	461a      	mov	r2, r3
 8001966:	4603      	mov	r3, r0
 8001968:	817b      	strh	r3, [r7, #10]
 800196a:	460b      	mov	r3, r1
 800196c:	813b      	strh	r3, [r7, #8]
 800196e:	4613      	mov	r3, r2
 8001970:	80fb      	strh	r3, [r7, #6]
	if (htft == NULL)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d07e      	beq.n	8001a76 <TFT_Set_Address+0x11e>
		return;

	// 设置地址前，确保缓冲区中的所有数据已发送完成
	TFT_Flush_Buffer(htft, 1); // 等待缓冲区刷新完成
 8001978:	2101      	movs	r1, #1
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff fee2 	bl	8001744 <TFT_Flush_Buffer>

	// --- 设置列地址 (Column Address Set, CASET, 0x2A) ---
	TFT_Write_Command(htft, 0x2A);
 8001980:	212a      	movs	r1, #42	@ 0x2a
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f7ff ffbe 	bl	8001904 <TFT_Write_Command>

	// 根据屏幕方向和型号设置列地址
	if (htft->display_direction == 0 || htft->display_direction == 2) // 0°或180°
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800198e:	2b00      	cmp	r3, #0
 8001990:	d004      	beq.n	800199c <TFT_Set_Address+0x44>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001998:	2b02      	cmp	r3, #2
 800199a:	d116      	bne.n	80019ca <TFT_Set_Address+0x72>
	{
		TFT_Write_Data16(htft, x_start + htft->x_offset);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80019a2:	461a      	mov	r2, r3
 80019a4:	897b      	ldrh	r3, [r7, #10]
 80019a6:	4413      	add	r3, r2
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	4619      	mov	r1, r3
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7ff ff77 	bl	80018a0 <TFT_Write_Data16>
		TFT_Write_Data16(htft, x_end + htft->x_offset);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80019b8:	461a      	mov	r2, r3
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	4413      	add	r3, r2
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4619      	mov	r1, r3
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f7ff ff6c 	bl	80018a0 <TFT_Write_Data16>
 80019c8:	e015      	b.n	80019f6 <TFT_Set_Address+0x9e>
	}
	else // 90°或270°
	{
		TFT_Write_Data16(htft, x_start + htft->y_offset);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019d0:	461a      	mov	r2, r3
 80019d2:	897b      	ldrh	r3, [r7, #10]
 80019d4:	4413      	add	r3, r2
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	4619      	mov	r1, r3
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f7ff ff60 	bl	80018a0 <TFT_Write_Data16>
		TFT_Write_Data16(htft, x_end + htft->y_offset);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019e6:	461a      	mov	r2, r3
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	4413      	add	r3, r2
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4619      	mov	r1, r3
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f7ff ff55 	bl	80018a0 <TFT_Write_Data16>
	}

	// --- 设置行地址范围 (Set Row Address, 0x2B) ---
	TFT_Write_Command(htft, 0x2B);
 80019f6:	212b      	movs	r1, #43	@ 0x2b
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f7ff ff83 	bl	8001904 <TFT_Write_Command>

	// 根据屏幕方向和型号设置行地址
	if (htft->display_direction == 0 || htft->display_direction == 2) // 0°或180°
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d004      	beq.n	8001a12 <TFT_Set_Address+0xba>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d116      	bne.n	8001a40 <TFT_Set_Address+0xe8>
	{
		TFT_Write_Data16(htft, y_start + htft->y_offset);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a18:	461a      	mov	r2, r3
 8001a1a:	893b      	ldrh	r3, [r7, #8]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4619      	mov	r1, r3
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f7ff ff3c 	bl	80018a0 <TFT_Write_Data16>
		TFT_Write_Data16(htft, y_end + htft->y_offset);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a2e:	461a      	mov	r2, r3
 8001a30:	8b3b      	ldrh	r3, [r7, #24]
 8001a32:	4413      	add	r3, r2
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	4619      	mov	r1, r3
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f7ff ff31 	bl	80018a0 <TFT_Write_Data16>
 8001a3e:	e015      	b.n	8001a6c <TFT_Set_Address+0x114>
	}
	else // 90°或270°
	{
		TFT_Write_Data16(htft, y_start + htft->x_offset);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001a46:	461a      	mov	r2, r3
 8001a48:	893b      	ldrh	r3, [r7, #8]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	4619      	mov	r1, r3
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f7ff ff25 	bl	80018a0 <TFT_Write_Data16>
		TFT_Write_Data16(htft, y_end + htft->x_offset);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	8b3b      	ldrh	r3, [r7, #24]
 8001a60:	4413      	add	r3, r2
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4619      	mov	r1, r3
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f7ff ff1a 	bl	80018a0 <TFT_Write_Data16>
	}

	// --- 发送写 GRAM 命令 (Memory Write, 0x2C) ---
	// 后续发送的数据将被写入由此窗口定义的 GRAM 区域
	TFT_Write_Command(htft, 0x2C);
 8001a6c:	212c      	movs	r1, #44	@ 0x2c
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f7ff ff48 	bl	8001904 <TFT_Write_Command>
 8001a74:	e000      	b.n	8001a78 <TFT_Set_Address+0x120>
		return;
 8001a76:	bf00      	nop
}
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_SPI_TxCpltCallback>:
 *         确保此函数定义唯一，没有在 stm32f1xx_it.c 等其他地方重复定义。
 * @param  hspi: 触发回调的 SPI 句柄指针
 * @retval None
 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	// 检查是哪个TFT设备触发了回调
	for (int i = 0; i < MAX_TFT_DEVICES; i++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	e023      	b.n	8001ad6 <HAL_SPI_TxCpltCallback+0x56>
	{
		if (g_tft_handles[i] != NULL && g_tft_handles[i]->spi_handle == hspi)
 8001a8e:	4a16      	ldr	r2, [pc, #88]	@ (8001ae8 <HAL_SPI_TxCpltCallback+0x68>)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d01a      	beq.n	8001ad0 <HAL_SPI_TxCpltCallback+0x50>
 8001a9a:	4a13      	ldr	r2, [pc, #76]	@ (8001ae8 <HAL_SPI_TxCpltCallback+0x68>)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d112      	bne.n	8001ad0 <HAL_SPI_TxCpltCallback+0x50>
		{
			// 找到对应设备
			TFT_HandleTypeDef *htft = g_tft_handles[i];
 8001aaa:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae8 <HAL_SPI_TxCpltCallback+0x68>)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	60bb      	str	r3, [r7, #8]

			// 仅在 DMA 模式下，传输完成后需要处理
			if (htft->is_dma_enabled)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00f      	beq.n	8001ade <HAL_SPI_TxCpltCallback+0x5e>
			{
				// 1. 拉高片选引脚 (CS)，结束本次 SPI 通信
				TFT_Pin_CS_Set(htft, 1);
 8001abe:	2101      	movs	r1, #1
 8001ac0:	68b8      	ldr	r0, [r7, #8]
 8001ac2:	f7ff fd6f 	bl	80015a4 <TFT_Pin_CS_Set>
				// 2. 清除 DMA 传输忙标志
				htft->is_dma_transfer_active = 0;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
				// 3. (可选) 在 RTOS 环境下，可以在这里释放信号量或设置事件标志，
				//    以唤醒等待 DMA 完成的任务。
				//    例如: osSemaphoreRelease(htft->spiDmaSemaphore);
			}
			break;
 8001ace:	e006      	b.n	8001ade <HAL_SPI_TxCpltCallback+0x5e>
	for (int i = 0; i < MAX_TFT_DEVICES; i++)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	ddd8      	ble.n	8001a8e <HAL_SPI_TxCpltCallback+0xe>
		}
	}
}
 8001adc:	e000      	b.n	8001ae0 <HAL_SPI_TxCpltCallback+0x60>
			break;
 8001ade:	bf00      	nop
}
 8001ae0:	bf00      	nop
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	200000a8 	.word	0x200000a8

08001aec <_TFT_Draw_Glyph>:
 * @param mode       模式 (0: 背景不透明, 1: 背景透明)
 */
static void _TFT_Draw_Glyph(TFT_HandleTypeDef *htft, uint16_t x, uint16_t y, const uint8_t *glyph_data,
                            uint8_t width, uint8_t height,
                            uint16_t color, uint16_t back_color, uint8_t mode)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	@ 0x28
 8001af0:	af02      	add	r7, sp, #8
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	817b      	strh	r3, [r7, #10]
 8001afa:	4613      	mov	r3, r2
 8001afc:	813b      	strh	r3, [r7, #8]
    uint16_t col, row;
    uint8_t byte, bit;
    uint8_t bytes_per_column = (height + 7) / 8; // 每列字节数（8行=1, 12行=2）
 8001afe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b02:	3307      	adds	r3, #7
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	da00      	bge.n	8001b0a <_TFT_Draw_Glyph+0x1e>
 8001b08:	3307      	adds	r3, #7
 8001b0a:	10db      	asrs	r3, r3, #3
 8001b0c:	76bb      	strb	r3, [r7, #26]

    TFT_Set_Address(htft, x, y, x + width - 1, y + height - 1);
 8001b0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	897b      	ldrh	r3, [r7, #10]
 8001b16:	4413      	add	r3, r2
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b298      	uxth	r0, r3
 8001b1e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	893b      	ldrh	r3, [r7, #8]
 8001b26:	4413      	add	r3, r2
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	893a      	ldrh	r2, [r7, #8]
 8001b30:	8979      	ldrh	r1, [r7, #10]
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	4603      	mov	r3, r0
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f7ff ff0e 	bl	8001958 <TFT_Set_Address>
    TFT_Reset_Buffer(htft);
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f7ff fe22 	bl	8001786 <TFT_Reset_Buffer>

    // 按列优先处理（匹配逐行式字库）
    for (col = 0; col < width; col++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	83fb      	strh	r3, [r7, #30]
 8001b46:	e049      	b.n	8001bdc <_TFT_Draw_Glyph+0xf0>
    { // 先遍历列
        for (uint8_t byte_idx = 0; byte_idx < bytes_per_column; byte_idx++)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	76fb      	strb	r3, [r7, #27]
 8001b4c:	e03f      	b.n	8001bce <_TFT_Draw_Glyph+0xe2>
        { // 每列的字节
            byte = glyph_data[col * bytes_per_column + byte_idx];
 8001b4e:	8bfb      	ldrh	r3, [r7, #30]
 8001b50:	7eba      	ldrb	r2, [r7, #26]
 8001b52:	fb03 f202 	mul.w	r2, r3, r2
 8001b56:	7efb      	ldrb	r3, [r7, #27]
 8001b58:	4413      	add	r3, r2
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	767b      	strb	r3, [r7, #25]
            for (row = 0; row < 8; row++)
 8001b64:	2300      	movs	r3, #0
 8001b66:	83bb      	strh	r3, [r7, #28]
 8001b68:	e029      	b.n	8001bbe <_TFT_Draw_Glyph+0xd2>
            {                                            // 遍历当前字节的8位
                uint16_t pixel_row = byte_idx * 8 + row; // 计算实际行号
 8001b6a:	7efb      	ldrb	r3, [r7, #27]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	8bbb      	ldrh	r3, [r7, #28]
 8001b74:	4413      	add	r3, r2
 8001b76:	82fb      	strh	r3, [r7, #22]
                if (pixel_row >= height)
 8001b78:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	8afa      	ldrh	r2, [r7, #22]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d220      	bcs.n	8001bc6 <_TFT_Draw_Glyph+0xda>
                    break; // 防止越界

                // 关键修改：选择正确的位顺序（尝试两种方式）左右翻转请修改它
                // bit = (byte >> (7 - row)) & 0x01; // 方式1：MSB在上（常见）
                bit = (byte >> row) & 0x01; // 方式2：LSB在上
 8001b84:	7e7a      	ldrb	r2, [r7, #25]
 8001b86:	8bbb      	ldrh	r3, [r7, #28]
 8001b88:	fa42 f303 	asr.w	r3, r2, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	757b      	strb	r3, [r7, #21]

                if (bit)
 8001b94:	7d7b      	ldrb	r3, [r7, #21]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d005      	beq.n	8001ba6 <_TFT_Draw_Glyph+0xba>
                {
                    TFT_Buffer_Write16(htft, color); // 前景色
 8001b9a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f7ff fd98 	bl	80016d4 <TFT_Buffer_Write16>
 8001ba4:	e008      	b.n	8001bb8 <_TFT_Draw_Glyph+0xcc>
                }
                else if (mode == 0)
 8001ba6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d104      	bne.n	8001bb8 <_TFT_Draw_Glyph+0xcc>
                {
                    TFT_Buffer_Write16(htft, back_color); // 背景色
 8001bae:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f7ff fd8e 	bl	80016d4 <TFT_Buffer_Write16>
            for (row = 0; row < 8; row++)
 8001bb8:	8bbb      	ldrh	r3, [r7, #28]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	83bb      	strh	r3, [r7, #28]
 8001bbe:	8bbb      	ldrh	r3, [r7, #28]
 8001bc0:	2b07      	cmp	r3, #7
 8001bc2:	d9d2      	bls.n	8001b6a <_TFT_Draw_Glyph+0x7e>
 8001bc4:	e000      	b.n	8001bc8 <_TFT_Draw_Glyph+0xdc>
                    break; // 防止越界
 8001bc6:	bf00      	nop
        for (uint8_t byte_idx = 0; byte_idx < bytes_per_column; byte_idx++)
 8001bc8:	7efb      	ldrb	r3, [r7, #27]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	76fb      	strb	r3, [r7, #27]
 8001bce:	7efa      	ldrb	r2, [r7, #27]
 8001bd0:	7ebb      	ldrb	r3, [r7, #26]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d3bb      	bcc.n	8001b4e <_TFT_Draw_Glyph+0x62>
    for (col = 0; col < width; col++)
 8001bd6:	8bfb      	ldrh	r3, [r7, #30]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	83fb      	strh	r3, [r7, #30]
 8001bdc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	8bfa      	ldrh	r2, [r7, #30]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d3af      	bcc.n	8001b48 <_TFT_Draw_Glyph+0x5c>
                    // 透明模式（需硬件支持）
                }
            }
        }
    }
    TFT_Flush_Buffer(htft, 1);
 8001be8:	2101      	movs	r1, #1
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f7ff fdaa 	bl	8001744 <TFT_Flush_Buffer>
}
 8001bf0:	bf00      	nop
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <TFT_Show_String>:
 * @param  back_color 背景颜色
 * @param  size       字体大小 (支持 8, 12, 16)
 * @param  mode       模式 (0: 背景不透明, 1: 背景透明)
 */
void TFT_Show_String(TFT_HandleTypeDef *htft, uint16_t x, uint16_t y, const uint8_t *str, uint16_t color, uint16_t back_color, uint8_t size, uint8_t mode)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	@ 0x28
 8001bfc:	af04      	add	r7, sp, #16
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	817b      	strh	r3, [r7, #10]
 8001c06:	4613      	mov	r3, r2
 8001c08:	813b      	strh	r3, [r7, #8]
    uint16_t current_x = x;
 8001c0a:	897b      	ldrh	r3, [r7, #10]
 8001c0c:	82fb      	strh	r3, [r7, #22]
    uint8_t char_width = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	757b      	strb	r3, [r7, #21]

    while (*str) // 遍历字符串直到遇到 null 终止符
 8001c12:	e02c      	b.n	8001c6e <TFT_Show_String+0x76>
    {
        // 调用 TFT_Show_Char 显示当前 ASCII 字符
        TFT_Show_Char(htft, current_x, y, *str, color, back_color, size, mode);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	7818      	ldrb	r0, [r3, #0]
 8001c18:	893a      	ldrh	r2, [r7, #8]
 8001c1a:	8af9      	ldrh	r1, [r7, #22]
 8001c1c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c20:	9303      	str	r3, [sp, #12]
 8001c22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c26:	9302      	str	r3, [sp, #8]
 8001c28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	8c3b      	ldrh	r3, [r7, #32]
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	4603      	mov	r3, r0
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 f82a 	bl	8001c8c <TFT_Show_Char>

        // 根据字体大小更新 X 坐标
        if (size == 16)
 8001c38:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c3c:	2b10      	cmp	r3, #16
 8001c3e:	d103      	bne.n	8001c48 <TFT_Show_String+0x50>
            char_width = afont16x8.w;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <TFT_Show_String+0x88>)
 8001c42:	785b      	ldrb	r3, [r3, #1]
 8001c44:	757b      	strb	r3, [r7, #21]
 8001c46:	e00a      	b.n	8001c5e <TFT_Show_String+0x66>
        else if (size == 12)
 8001c48:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c4c:	2b0c      	cmp	r3, #12
 8001c4e:	d103      	bne.n	8001c58 <TFT_Show_String+0x60>
            char_width = afont12x6.w;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <TFT_Show_String+0x8c>)
 8001c52:	785b      	ldrb	r3, [r3, #1]
 8001c54:	757b      	strb	r3, [r7, #21]
 8001c56:	e002      	b.n	8001c5e <TFT_Show_String+0x66>
        else // 默认或 size=8
            char_width = afont8x6.w;
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <TFT_Show_String+0x90>)
 8001c5a:	785b      	ldrb	r3, [r3, #1]
 8001c5c:	757b      	strb	r3, [r7, #21]

        current_x += char_width; // 移动到下一个字符的位置
 8001c5e:	7d7b      	ldrb	r3, [r7, #21]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	8afb      	ldrh	r3, [r7, #22]
 8001c64:	4413      	add	r3, r2
 8001c66:	82fb      	strh	r3, [r7, #22]
        str++;                   // 指向下一个字符
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	607b      	str	r3, [r7, #4]
    while (*str) // 遍历字符串直到遇到 null 终止符
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1ce      	bne.n	8001c14 <TFT_Show_String+0x1c>
    }
}
 8001c76:	bf00      	nop
 8001c78:	bf00      	nop
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	0800832c 	.word	0x0800832c
 8001c84:	08007d34 	.word	0x08007d34
 8001c88:	080078b8 	.word	0x080078b8

08001c8c <TFT_Show_Char>:
 * @param  back_color 背景颜色
 * @param  size       字体大小 (支持 8, 12, 16)
 * @param  mode       模式 (0: 背景不透明, 1: 背景透明)
 */
void TFT_Show_Char(TFT_HandleTypeDef *htft, uint16_t x, uint16_t y, uint8_t chr, uint16_t color, uint16_t back_color, uint8_t size, uint8_t mode)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08e      	sub	sp, #56	@ 0x38
 8001c90:	af06      	add	r7, sp, #24
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	4608      	mov	r0, r1
 8001c96:	4611      	mov	r1, r2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	817b      	strh	r3, [r7, #10]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	813b      	strh	r3, [r7, #8]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	71fb      	strb	r3, [r7, #7]
    uint8_t char_width, char_height;
    uint16_t char_index;
    uint16_t bytes_per_char;

    // 根据字体大小选择对应字库
    if (size == 16)
 8001ca6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001caa:	2b10      	cmp	r3, #16
 8001cac:	d104      	bne.n	8001cb8 <TFT_Show_Char+0x2c>
    {
        ascii_font = &afont16x8;
 8001cae:	4b22      	ldr	r3, [pc, #136]	@ (8001d38 <TFT_Show_Char+0xac>)
 8001cb0:	61fb      	str	r3, [r7, #28]
        bytes_per_char = 16; // 8列×16行，每列2字节，共16字节
 8001cb2:	2310      	movs	r3, #16
 8001cb4:	837b      	strh	r3, [r7, #26]
 8001cb6:	e00f      	b.n	8001cd8 <TFT_Show_Char+0x4c>
    }
    else if (size == 12)
 8001cb8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001cbc:	2b0c      	cmp	r3, #12
 8001cbe:	d104      	bne.n	8001cca <TFT_Show_Char+0x3e>
    {
        ascii_font = &afont12x6;
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d3c <TFT_Show_Char+0xb0>)
 8001cc2:	61fb      	str	r3, [r7, #28]
        bytes_per_char = 12; // 6列×12行，每列2字节，共12字节
 8001cc4:	230c      	movs	r3, #12
 8001cc6:	837b      	strh	r3, [r7, #26]
 8001cc8:	e006      	b.n	8001cd8 <TFT_Show_Char+0x4c>
    }
    else
    {
        ascii_font = &afont8x6;
 8001cca:	4b1d      	ldr	r3, [pc, #116]	@ (8001d40 <TFT_Show_Char+0xb4>)
 8001ccc:	61fb      	str	r3, [r7, #28]
        size = 8;
 8001cce:	2308      	movs	r3, #8
 8001cd0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        bytes_per_char = 6; // 6列×8行，每列1字节，共6字节
 8001cd4:	2306      	movs	r3, #6
 8001cd6:	837b      	strh	r3, [r7, #26]
    }

    char_width = ascii_font->w;
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	785b      	ldrb	r3, [r3, #1]
 8001cdc:	767b      	strb	r3, [r7, #25]
    char_height = ascii_font->h;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	763b      	strb	r3, [r7, #24]

    // 检查字符是否在可显示范围内
    if (chr < ' ' || chr > '~')
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	2b1f      	cmp	r3, #31
 8001ce8:	d902      	bls.n	8001cf0 <TFT_Show_Char+0x64>
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	2b7e      	cmp	r3, #126	@ 0x7e
 8001cee:	d901      	bls.n	8001cf4 <TFT_Show_Char+0x68>
    {
        chr = ' '; // 不可显示字符显示为空格
 8001cf0:	2320      	movs	r3, #32
 8001cf2:	71fb      	strb	r3, [r7, #7]
    }

    char_index = chr - ' ';                                       // 计算字符在字库中的索引位置
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	3b20      	subs	r3, #32
 8001cfa:	82fb      	strh	r3, [r7, #22]
    glyph_data = ascii_font->chars + char_index * bytes_per_char; // 指向对应字模数据
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	8afa      	ldrh	r2, [r7, #22]
 8001d02:	8b79      	ldrh	r1, [r7, #26]
 8001d04:	fb01 f202 	mul.w	r2, r1, r2
 8001d08:	4413      	add	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]

    // 调用绘制函数
    _TFT_Draw_Glyph(htft, x, y, glyph_data, char_width, char_height, color, back_color, mode);
 8001d0c:	893a      	ldrh	r2, [r7, #8]
 8001d0e:	8979      	ldrh	r1, [r7, #10]
 8001d10:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001d14:	9304      	str	r3, [sp, #16]
 8001d16:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001d18:	9303      	str	r3, [sp, #12]
 8001d1a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d1c:	9302      	str	r3, [sp, #8]
 8001d1e:	7e3b      	ldrb	r3, [r7, #24]
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	7e7b      	ldrb	r3, [r7, #25]
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f7ff fedf 	bl	8001aec <_TFT_Draw_Glyph>
}
 8001d2e:	bf00      	nop
 8001d30:	3720      	adds	r7, #32
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	0800832c 	.word	0x0800832c
 8001d3c:	08007d34 	.word	0x08007d34
 8001d40:	080078b8 	.word	0x080078b8

08001d44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d4a:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <MX_DMA_Init+0x48>)
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d8c <MX_DMA_Init+0x48>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6153      	str	r3, [r2, #20]
 8001d56:	4b0d      	ldr	r3, [pc, #52]	@ (8001d8c <MX_DMA_Init+0x48>)
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	200d      	movs	r0, #13
 8001d68:	f001 fab1 	bl	80032ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001d6c:	200d      	movs	r0, #13
 8001d6e:	f001 faca 	bl	8003306 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	200f      	movs	r0, #15
 8001d78:	f001 faa9 	bl	80032ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d7c:	200f      	movs	r0, #15
 8001d7e:	f001 fac2 	bl	8003306 <HAL_NVIC_EnableIRQ>

}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000

08001d90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da4:	4b35      	ldr	r3, [pc, #212]	@ (8001e7c <MX_GPIO_Init+0xec>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	4a34      	ldr	r2, [pc, #208]	@ (8001e7c <MX_GPIO_Init+0xec>)
 8001daa:	f043 0310 	orr.w	r3, r3, #16
 8001dae:	6193      	str	r3, [r2, #24]
 8001db0:	4b32      	ldr	r3, [pc, #200]	@ (8001e7c <MX_GPIO_Init+0xec>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8001e7c <MX_GPIO_Init+0xec>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	4a2e      	ldr	r2, [pc, #184]	@ (8001e7c <MX_GPIO_Init+0xec>)
 8001dc2:	f043 0320 	orr.w	r3, r3, #32
 8001dc6:	6193      	str	r3, [r2, #24]
 8001dc8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e7c <MX_GPIO_Init+0xec>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f003 0320 	and.w	r3, r3, #32
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd4:	4b29      	ldr	r3, [pc, #164]	@ (8001e7c <MX_GPIO_Init+0xec>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a28      	ldr	r2, [pc, #160]	@ (8001e7c <MX_GPIO_Init+0xec>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6193      	str	r3, [r2, #24]
 8001de0:	4b26      	ldr	r3, [pc, #152]	@ (8001e7c <MX_GPIO_Init+0xec>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dec:	4b23      	ldr	r3, [pc, #140]	@ (8001e7c <MX_GPIO_Init+0xec>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a22      	ldr	r2, [pc, #136]	@ (8001e7c <MX_GPIO_Init+0xec>)
 8001df2:	f043 0308 	orr.w	r3, r3, #8
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b20      	ldr	r3, [pc, #128]	@ (8001e7c <MX_GPIO_Init+0xec>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001e04:	2200      	movs	r2, #0
 8001e06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e0a:	481d      	ldr	r0, [pc, #116]	@ (8001e80 <MX_GPIO_Init+0xf0>)
 8001e0c:	f001 febc 	bl	8003b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS2_Pin|DC2_Pin|BL2_Pin|RES2_Pin
 8001e10:	2200      	movs	r2, #0
 8001e12:	f240 51e7 	movw	r1, #1511	@ 0x5e7
 8001e16:	481b      	ldr	r0, [pc, #108]	@ (8001e84 <MX_GPIO_Init+0xf4>)
 8001e18:	f001 feb6 	bl	8003b88 <HAL_GPIO_WritePin>
                          |TFT_RES_Pin|TFT_DC_Pin|TFT_CS_Pin|TFT_BL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001e1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e22:	2301      	movs	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001e2e:	f107 0310 	add.w	r3, r7, #16
 8001e32:	4619      	mov	r1, r3
 8001e34:	4812      	ldr	r0, [pc, #72]	@ (8001e80 <MX_GPIO_Init+0xf0>)
 8001e36:	f001 fd23 	bl	8003880 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS2_Pin DC2_Pin BL2_Pin RES2_Pin
                           TFT_BL_Pin */
  GPIO_InitStruct.Pin = CS2_Pin|DC2_Pin|BL2_Pin|RES2_Pin
 8001e3a:	f240 5307 	movw	r3, #1287	@ 0x507
 8001e3e:	613b      	str	r3, [r7, #16]
                          |TFT_BL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e40:	2301      	movs	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	4619      	mov	r1, r3
 8001e52:	480c      	ldr	r0, [pc, #48]	@ (8001e84 <MX_GPIO_Init+0xf4>)
 8001e54:	f001 fd14 	bl	8003880 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_RES_Pin TFT_DC_Pin TFT_CS_Pin */
  GPIO_InitStruct.Pin = TFT_RES_Pin|TFT_DC_Pin|TFT_CS_Pin;
 8001e58:	23e0      	movs	r3, #224	@ 0xe0
 8001e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4805      	ldr	r0, [pc, #20]	@ (8001e84 <MX_GPIO_Init+0xf4>)
 8001e70:	f001 fd06 	bl	8003880 <HAL_GPIO_Init>

}
 8001e74:	bf00      	nop
 8001e76:	3720      	adds	r7, #32
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40011000 	.word	0x40011000
 8001e84:	40010c00 	.word	0x40010c00

08001e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e88:	b590      	push	{r4, r7, lr}
 8001e8a:	b08d      	sub	sp, #52	@ 0x34
 8001e8c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e8e:	f001 f8c1 	bl	8003014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e92:	f000 fa8f 	bl	80023b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e96:	f7ff ff7b 	bl	8001d90 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e9a:	f7ff ff53 	bl	8001d44 <MX_DMA_Init>
  MX_SPI1_Init();
 8001e9e:	f000 fe2d 	bl	8002afc <MX_SPI1_Init>
  MX_SPI2_Init();
 8001ea2:	f000 fe61 	bl	8002b68 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001ea6:	f001 f811 	bl	8002ecc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // 初始化第一个TFT屏幕 (ST7789)
  TFT_Init_Instance(&htft1, &hspi1, TFT_CS_GPIO_Port, TFT_CS_Pin);
 8001eaa:	2380      	movs	r3, #128	@ 0x80
 8001eac:	4aa2      	ldr	r2, [pc, #648]	@ (8002138 <main+0x2b0>)
 8001eae:	49a3      	ldr	r1, [pc, #652]	@ (800213c <main+0x2b4>)
 8001eb0:	48a3      	ldr	r0, [pc, #652]	@ (8002140 <main+0x2b8>)
 8001eb2:	f7ff fac1 	bl	8001438 <TFT_Init_Instance>
  TFT_Config_Pins(&htft1, TFT_DC_GPIO_Port, TFT_DC_Pin,
 8001eb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eba:	9302      	str	r3, [sp, #8]
 8001ebc:	4b9e      	ldr	r3, [pc, #632]	@ (8002138 <main+0x2b0>)
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	4b9c      	ldr	r3, [pc, #624]	@ (8002138 <main+0x2b0>)
 8001ec6:	2240      	movs	r2, #64	@ 0x40
 8001ec8:	499b      	ldr	r1, [pc, #620]	@ (8002138 <main+0x2b0>)
 8001eca:	489d      	ldr	r0, [pc, #628]	@ (8002140 <main+0x2b8>)
 8001ecc:	f7ff fadf 	bl	800148e <TFT_Config_Pins>
                  TFT_RES_GPIO_Port, TFT_RES_Pin,
                  TFT_BL_GPIO_Port, TFT_BL_Pin);
  TFT_Config_Display(&htft1, 0, 0, 0);                                       // 设置方向、X/Y偏移 (方向0: 竖屏)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	489a      	ldr	r0, [pc, #616]	@ (8002140 <main+0x2b8>)
 8001ed8:	f7ff faf8 	bl	80014cc <TFT_Config_Display>
  TFT_IO_Init(&htft1);                                                       // 初始化IO层
 8001edc:	4898      	ldr	r0, [pc, #608]	@ (8002140 <main+0x2b8>)
 8001ede:	f7ff fc62 	bl	80017a6 <TFT_IO_Init>
  TFT_Init_ST7789v3(&htft1);                                                 // ST7789 屏幕初始化
 8001ee2:	4897      	ldr	r0, [pc, #604]	@ (8002140 <main+0x2b8>)
 8001ee4:	f7ff f984 	bl	80011f0 <TFT_Init_ST7789v3>
  TFT_Fill_Area(&htft1, 0, 0, TFT1_SCREEN_WIDTH, TFT1_SCREEN_HEIGHT, BLACK); // 清屏为黑色
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	23f0      	movs	r3, #240	@ 0xf0
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4891      	ldr	r0, [pc, #580]	@ (8002140 <main+0x2b8>)
 8001efa:	f7fe fe24 	bl	8000b46 <TFT_Fill_Area>

  // 初始化第二个TFT屏幕 (ST7735S)
  TFT_Init_Instance(&htft2, &hspi2, CS2_GPIO_Port, CS2_Pin);
 8001efe:	2301      	movs	r3, #1
 8001f00:	4a8d      	ldr	r2, [pc, #564]	@ (8002138 <main+0x2b0>)
 8001f02:	4990      	ldr	r1, [pc, #576]	@ (8002144 <main+0x2bc>)
 8001f04:	4890      	ldr	r0, [pc, #576]	@ (8002148 <main+0x2c0>)
 8001f06:	f7ff fa97 	bl	8001438 <TFT_Init_Instance>
  TFT_Config_Pins(&htft2, DC2_GPIO_Port, DC2_Pin,
 8001f0a:	2304      	movs	r3, #4
 8001f0c:	9302      	str	r3, [sp, #8]
 8001f0e:	4b8a      	ldr	r3, [pc, #552]	@ (8002138 <main+0x2b0>)
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	4b87      	ldr	r3, [pc, #540]	@ (8002138 <main+0x2b0>)
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	4986      	ldr	r1, [pc, #536]	@ (8002138 <main+0x2b0>)
 8001f1e:	488a      	ldr	r0, [pc, #552]	@ (8002148 <main+0x2c0>)
 8001f20:	f7ff fab5 	bl	800148e <TFT_Config_Pins>
                  RES2_GPIO_Port, RES2_Pin,
                  BL2_GPIO_Port, BL2_Pin);
  TFT_Config_Display(&htft2, 2, 2, 1);                                          // 设置方向、X/Y偏移 (方向0: 竖屏)
 8001f24:	2301      	movs	r3, #1
 8001f26:	2202      	movs	r2, #2
 8001f28:	2102      	movs	r1, #2
 8001f2a:	4887      	ldr	r0, [pc, #540]	@ (8002148 <main+0x2c0>)
 8001f2c:	f7ff face 	bl	80014cc <TFT_Config_Display>
  TFT_IO_Init(&htft2);                                                          // 初始化IO层
 8001f30:	4885      	ldr	r0, [pc, #532]	@ (8002148 <main+0x2c0>)
 8001f32:	f7ff fc38 	bl	80017a6 <TFT_IO_Init>
  TFT_Init_ST7735S(&htft2);                                                     // ST7735S 屏幕初始化
 8001f36:	4884      	ldr	r0, [pc, #528]	@ (8002148 <main+0x2c0>)
 8001f38:	f7fe ffc8 	bl	8000ecc <TFT_Init_ST7735S>
  TFT_Fill_Area(&htft2, 0, 0, TFT2_SCREEN_WIDTH, TFT2_SCREEN_HEIGHT, BLACK); // 清屏为深灰色
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	23a0      	movs	r3, #160	@ 0xa0
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	2200      	movs	r2, #0
 8001f48:	2100      	movs	r1, #0
 8001f4a:	487f      	ldr	r0, [pc, #508]	@ (8002148 <main+0x2c0>)
 8001f4c:	f7fe fdfb 	bl	8000b46 <TFT_Fill_Area>

  // 启动UART1接收中断，每次接收一个字节
  HAL_UART_Receive_IT(&huart1, &uart_rx_data, 1);
 8001f50:	2201      	movs	r2, #1
 8001f52:	497e      	ldr	r1, [pc, #504]	@ (800214c <main+0x2c4>)
 8001f54:	487e      	ldr	r0, [pc, #504]	@ (8002150 <main+0x2c8>)
 8001f56:	f002 fe56 	bl	8004c06 <HAL_UART_Receive_IT>

  float phase = 0.0f; // 用于生成模拟正弦波的相位
 8001f5a:	f04f 0300 	mov.w	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // --- 1. 模拟数据生成 (替换为实际ADC采样和处理) ---
    phase += 0.1f; // 调整这个值改变频率
 8001f60:	497c      	ldr	r1, [pc, #496]	@ (8002154 <main+0x2cc>)
 8001f62:	69f8      	ldr	r0, [r7, #28]
 8001f64:	f7fe fabc 	bl	80004e0 <__addsf3>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	61fb      	str	r3, [r7, #28]
    if (phase > 2 * 3.14159f)
 8001f6c:	497a      	ldr	r1, [pc, #488]	@ (8002158 <main+0x2d0>)
 8001f6e:	69f8      	ldr	r0, [r7, #28]
 8001f70:	f7fe fd7a 	bl	8000a68 <__aeabi_fcmpgt>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d005      	beq.n	8001f86 <main+0xfe>
    {
      phase -= 2 * 3.14159f;
 8001f7a:	4977      	ldr	r1, [pc, #476]	@ (8002158 <main+0x2d0>)
 8001f7c:	69f8      	ldr	r0, [r7, #28]
 8001f7e:	f7fe faad 	bl	80004dc <__aeabi_fsub>
 8001f82:	4603      	mov	r3, r0
 8001f84:	61fb      	str	r3, [r7, #28]
    }
    for (int i = 0; i < WAVEFORM_POINTS; i++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
 8001f8a:	e044      	b.n	8002016 <main+0x18e>
    {
      // 生成模拟正弦波数据 (-1.0 to 1.0)
      float value = sinf(phase + (float)i * 2 * 3.14159f / WAVEFORM_POINTS * 2); // 乘以2增加周期数
 8001f8c:	69b8      	ldr	r0, [r7, #24]
 8001f8e:	f7fe fb5b 	bl	8000648 <__aeabi_i2f>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4619      	mov	r1, r3
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe faa2 	bl	80004e0 <__addsf3>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	496f      	ldr	r1, [pc, #444]	@ (800215c <main+0x2d4>)
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fba5 	bl	80006f0 <__aeabi_fmul>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	496d      	ldr	r1, [pc, #436]	@ (8002160 <main+0x2d8>)
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fc54 	bl	8000858 <__aeabi_fdiv>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fa93 	bl	80004e0 <__addsf3>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	69f9      	ldr	r1, [r7, #28]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fa8e 	bl	80004e0 <__addsf3>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f004 fcc8 	bl	800695c <sinf>
 8001fcc:	6038      	str	r0, [r7, #0]
      // 映射到屏幕Y坐标 (0 到 TFT1_SCREEN_HEIGHT - 1)
      // 假设屏幕中心为0V, 幅度占屏幕高度的80%
      waveform_data[i] = (uint16_t)(TFT1_SCREEN_HEIGHT / 2 - value * (TFT1_SCREEN_HEIGHT * 0.4f));
 8001fce:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 8001fd2:	6838      	ldr	r0, [r7, #0]
 8001fd4:	f7fe fb8c 	bl	80006f0 <__aeabi_fmul>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4861      	ldr	r0, [pc, #388]	@ (8002164 <main+0x2dc>)
 8001fde:	f7fe fa7d 	bl	80004dc <__aeabi_fsub>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fd6f 	bl	8000ac8 <__aeabi_f2uiz>
 8001fea:	4603      	mov	r3, r0
 8001fec:	b299      	uxth	r1, r3
 8001fee:	4a5e      	ldr	r2, [pc, #376]	@ (8002168 <main+0x2e0>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      // 确保坐标在屏幕范围内
      if (waveform_data[i] >= TFT1_SCREEN_HEIGHT)
 8001ff6:	4a5c      	ldr	r2, [pc, #368]	@ (8002168 <main+0x2e0>)
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ffe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002002:	d305      	bcc.n	8002010 <main+0x188>
      {
        waveform_data[i] = TFT1_SCREEN_HEIGHT - 1;
 8002004:	4a58      	ldr	r2, [pc, #352]	@ (8002168 <main+0x2e0>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	f240 113f 	movw	r1, #319	@ 0x13f
 800200c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < WAVEFORM_POINTS; i++)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	3301      	adds	r3, #1
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	2bef      	cmp	r3, #239	@ 0xef
 800201a:	ddb7      	ble.n	8001f8c <main+0x104>
      }
    }

    // 分析波形数据并更新测量值
    analyze_waveform(waveform_data, WAVEFORM_POINTS);
 800201c:	21f0      	movs	r1, #240	@ 0xf0
 800201e:	4852      	ldr	r0, [pc, #328]	@ (8002168 <main+0x2e0>)
 8002020:	f000 fa0e 	bl	8002440 <analyze_waveform>

    // --- 2. 绘制TFT1 (示波器波形) ---
    // a. 清除旧波形区域 (可以优化为只清除波形线条本身)
    TFT_Fill_Area(&htft1, 0, 0, TFT1_SCREEN_WIDTH, TFT1_SCREEN_HEIGHT, BLACK);
 8002024:	2300      	movs	r3, #0
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	23f0      	movs	r3, #240	@ 0xf0
 8002030:	2200      	movs	r2, #0
 8002032:	2100      	movs	r1, #0
 8002034:	4842      	ldr	r0, [pc, #264]	@ (8002140 <main+0x2b8>)
 8002036:	f7fe fd86 	bl	8000b46 <TFT_Fill_Area>

    // b. 绘制网格 (可选)
    // 绘制水平线
    for (int y = 0; y < TFT1_SCREEN_HEIGHT; y += 30) // 每30像素画一条线
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e00c      	b.n	800205a <main+0x1d2>
    {
      TFT_Draw_Fast_HLine(&htft1, 0, y, TFT1_SCREEN_WIDTH, GRAY); // 用灰色绘制水平线
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	b29a      	uxth	r2, r3
 8002044:	f248 4330 	movw	r3, #33840	@ 0x8430
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	23f0      	movs	r3, #240	@ 0xf0
 800204c:	2100      	movs	r1, #0
 800204e:	483c      	ldr	r0, [pc, #240]	@ (8002140 <main+0x2b8>)
 8002050:	f7fe fdc5 	bl	8000bde <TFT_Draw_Fast_HLine>
    for (int y = 0; y < TFT1_SCREEN_HEIGHT; y += 30) // 每30像素画一条线
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	331e      	adds	r3, #30
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002060:	dbee      	blt.n	8002040 <main+0x1b8>
    }
    // 绘制垂直线
    for (int x = 0; x < TFT1_SCREEN_WIDTH; x += 30) // 每30像素画一条线
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	e00d      	b.n	8002084 <main+0x1fc>
    {
      TFT_Draw_Fast_VLine(&htft1, x, 0, TFT1_SCREEN_HEIGHT, GRAY); // 用灰色绘制垂直线
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	b299      	uxth	r1, r3
 800206c:	f248 4330 	movw	r3, #33840	@ 0x8430
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002076:	2200      	movs	r2, #0
 8002078:	4831      	ldr	r0, [pc, #196]	@ (8002140 <main+0x2b8>)
 800207a:	f7fe fde9 	bl	8000c50 <TFT_Draw_Fast_VLine>
    for (int x = 0; x < TFT1_SCREEN_WIDTH; x += 30) // 每30像素画一条线
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	331e      	adds	r3, #30
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	2bef      	cmp	r3, #239	@ 0xef
 8002088:	ddee      	ble.n	8002068 <main+0x1e0>
    }
    // 绘制中心线
    TFT_Draw_Fast_HLine(&htft1, 0, TFT1_SCREEN_HEIGHT / 2, TFT1_SCREEN_WIDTH, BROWN);
 800208a:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	23f0      	movs	r3, #240	@ 0xf0
 8002092:	22a0      	movs	r2, #160	@ 0xa0
 8002094:	2100      	movs	r1, #0
 8002096:	482a      	ldr	r0, [pc, #168]	@ (8002140 <main+0x2b8>)
 8002098:	f7fe fda1 	bl	8000bde <TFT_Draw_Fast_HLine>
    TFT_Draw_Fast_VLine(&htft1, TFT1_SCREEN_WIDTH / 2, 0, TFT1_SCREEN_HEIGHT, BROWN);
 800209c:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80020a6:	2200      	movs	r2, #0
 80020a8:	2178      	movs	r1, #120	@ 0x78
 80020aa:	4825      	ldr	r0, [pc, #148]	@ (8002140 <main+0x2b8>)
 80020ac:	f7fe fdd0 	bl	8000c50 <TFT_Draw_Fast_VLine>

    // c. 绘制波形
    for (int i = 0; i < WAVEFORM_POINTS - 1; i++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	e019      	b.n	80020ea <main+0x262>
    {
      TFT_Draw_Line(&htft1, i, waveform_data[i], i + 1, waveform_data[i + 1], YELLOW); // 用黄色绘制波形
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	b299      	uxth	r1, r3
 80020ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002168 <main+0x2e0>)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	3301      	adds	r3, #1
 80020c8:	b298      	uxth	r0, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	3301      	adds	r3, #1
 80020ce:	4c26      	ldr	r4, [pc, #152]	@ (8002168 <main+0x2e0>)
 80020d0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80020d4:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 80020d8:	9401      	str	r4, [sp, #4]
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	4603      	mov	r3, r0
 80020de:	4818      	ldr	r0, [pc, #96]	@ (8002140 <main+0x2b8>)
 80020e0:	f7fe fdef 	bl	8000cc2 <TFT_Draw_Line>
    for (int i = 0; i < WAVEFORM_POINTS - 1; i++)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	3301      	adds	r3, #1
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2bee      	cmp	r3, #238	@ 0xee
 80020ee:	dde2      	ble.n	80020b6 <main+0x22e>
    }

    // 在示波器屏幕上绘制触发电平线
    if (channel1_enabled)
 80020f0:	4b1e      	ldr	r3, [pc, #120]	@ (800216c <main+0x2e4>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d065      	beq.n	80021c4 <main+0x33c>
    {
      // 将触发电平映射到屏幕Y坐标
      uint16_t trigger_y = (uint16_t)(TFT1_SCREEN_HEIGHT / 2 - (trigger_level / voltage_scale) * (TFT1_SCREEN_HEIGHT / 8));
 80020f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002170 <main+0x2e8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002174 <main+0x2ec>)
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fba8 	bl	8000858 <__aeabi_fdiv>
 8002108:	4603      	mov	r3, r0
 800210a:	491b      	ldr	r1, [pc, #108]	@ (8002178 <main+0x2f0>)
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe faef 	bl	80006f0 <__aeabi_fmul>
 8002112:	4603      	mov	r3, r0
 8002114:	4619      	mov	r1, r3
 8002116:	4813      	ldr	r0, [pc, #76]	@ (8002164 <main+0x2dc>)
 8002118:	f7fe f9e0 	bl	80004dc <__aeabi_fsub>
 800211c:	4603      	mov	r3, r0
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fcd2 	bl	8000ac8 <__aeabi_f2uiz>
 8002124:	4603      	mov	r3, r0
 8002126:	80fb      	strh	r3, [r7, #6]
      if (trigger_y >= 0 && trigger_y < TFT1_SCREEN_HEIGHT)
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800212e:	d249      	bcs.n	80021c4 <main+0x33c>
      {
        // 用虚线绘制触发电平
        for (int x = 0; x < TFT1_SCREEN_WIDTH; x += 6)
 8002130:	2300      	movs	r3, #0
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	e02f      	b.n	8002196 <main+0x30e>
 8002136:	bf00      	nop
 8002138:	40010c00 	.word	0x40010c00
 800213c:	20000380 	.word	0x20000380
 8002140:	200000b8 	.word	0x200000b8
 8002144:	200003d8 	.word	0x200003d8
 8002148:	200000ec 	.word	0x200000ec
 800214c:	20000378 	.word	0x20000378
 8002150:	200004bc 	.word	0x200004bc
 8002154:	3dcccccd 	.word	0x3dcccccd
 8002158:	40c90fd0 	.word	0x40c90fd0
 800215c:	40490fd0 	.word	0x40490fd0
 8002160:	43700000 	.word	0x43700000
 8002164:	43200000 	.word	0x43200000
 8002168:	20000120 	.word	0x20000120
 800216c:	2000000d 	.word	0x2000000d
 8002170:	20000008 	.word	0x20000008
 8002174:	20000004 	.word	0x20000004
 8002178:	42200000 	.word	0x42200000
        {
          TFT_Draw_Fast_HLine(&htft1, x, trigger_y, 3, MAGENTA);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	b299      	uxth	r1, r3
 8002180:	88fa      	ldrh	r2, [r7, #6]
 8002182:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	2303      	movs	r3, #3
 800218a:	4877      	ldr	r0, [pc, #476]	@ (8002368 <main+0x4e0>)
 800218c:	f7fe fd27 	bl	8000bde <TFT_Draw_Fast_HLine>
        for (int x = 0; x < TFT1_SCREEN_WIDTH; x += 6)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	3306      	adds	r3, #6
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2bef      	cmp	r3, #239	@ 0xef
 800219a:	ddef      	ble.n	800217c <main+0x2f4>
        }
        
        // 在屏幕右侧绘制触发指示标志
        TFT_Draw_Triangle(&htft1, 
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	3b04      	subs	r3, #4
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	88fa      	ldrh	r2, [r7, #6]
 80021a4:	3204      	adds	r2, #4
 80021a6:	b292      	uxth	r2, r2
 80021a8:	88f9      	ldrh	r1, [r7, #6]
 80021aa:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80021ae:	9003      	str	r0, [sp, #12]
 80021b0:	9202      	str	r2, [sp, #8]
 80021b2:	22ee      	movs	r2, #238	@ 0xee
 80021b4:	9201      	str	r2, [sp, #4]
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	23ee      	movs	r3, #238	@ 0xee
 80021ba:	460a      	mov	r2, r1
 80021bc:	21e6      	movs	r1, #230	@ 0xe6
 80021be:	486a      	ldr	r0, [pc, #424]	@ (8002368 <main+0x4e0>)
 80021c0:	f7fe fe52 	bl	8000e68 <TFT_Draw_Triangle>
                          MAGENTA);
      }
    }

    // --- 3. 绘制TFT2 (参数显示) ---
    if (show_measurement)
 80021c4:	4b69      	ldr	r3, [pc, #420]	@ (800236c <main+0x4e4>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80be 	beq.w	800234a <main+0x4c2>
    {
      // a. 清屏 (如果参数不经常变动，可以优化为只在变化时重绘)
      TFT_Fill_Area(&htft2, 0, 0, TFT2_SCREEN_WIDTH, TFT2_SCREEN_HEIGHT, BLACK);
 80021ce:	2300      	movs	r3, #0
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	23a0      	movs	r3, #160	@ 0xa0
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2380      	movs	r3, #128	@ 0x80
 80021d8:	2200      	movs	r2, #0
 80021da:	2100      	movs	r1, #0
 80021dc:	4864      	ldr	r0, [pc, #400]	@ (8002370 <main+0x4e8>)
 80021de:	f7fe fcb2 	bl	8000b46 <TFT_Fill_Area>
      // 假设有 TFT_Show_String(htft, x, y, string, fg_color, bg_color, font_size, background_mode)
      // background_mode: 0=不透明背景, 1=透明背景
      // 注意: TFT_Show_String 的参数可能需要根据你的库调整

      // 显示标题
      TFT_Show_String(&htft2, 5, 5, "Oscilloscope", WHITE, BLACK, 16, 0);
 80021e2:	2300      	movs	r3, #0
 80021e4:	9303      	str	r3, [sp, #12]
 80021e6:	2310      	movs	r3, #16
 80021e8:	9302      	str	r3, [sp, #8]
 80021ea:	2300      	movs	r3, #0
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	4b5f      	ldr	r3, [pc, #380]	@ (8002374 <main+0x4ec>)
 80021f6:	2205      	movs	r2, #5
 80021f8:	2105      	movs	r1, #5
 80021fa:	485d      	ldr	r0, [pc, #372]	@ (8002370 <main+0x4e8>)
 80021fc:	f7ff fcfc 	bl	8001bf8 <TFT_Show_String>
      TFT_Draw_Fast_HLine(&htft2, 0, 25, TFT2_SCREEN_WIDTH, BROWN); // 分隔线
 8002200:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	2380      	movs	r3, #128	@ 0x80
 8002208:	2219      	movs	r2, #25
 800220a:	2100      	movs	r1, #0
 800220c:	4858      	ldr	r0, [pc, #352]	@ (8002370 <main+0x4e8>)
 800220e:	f7fe fce6 	bl	8000bde <TFT_Draw_Fast_HLine>

      // 显示时间基准
      sprintf(text_buffer, "Time: %.1f ms/div", time_base);
 8002212:	4b59      	ldr	r3, [pc, #356]	@ (8002378 <main+0x4f0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f904 	bl	8000424 <__aeabi_f2d>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4956      	ldr	r1, [pc, #344]	@ (800237c <main+0x4f4>)
 8002222:	4857      	ldr	r0, [pc, #348]	@ (8002380 <main+0x4f8>)
 8002224:	f003 fadc 	bl	80057e0 <siprintf>
      TFT_Show_String(&htft2, 5, 35, text_buffer, CYAN, BLACK, 16, 0);
 8002228:	2300      	movs	r3, #0
 800222a:	9303      	str	r3, [sp, #12]
 800222c:	2310      	movs	r3, #16
 800222e:	9302      	str	r3, [sp, #8]
 8002230:	2300      	movs	r3, #0
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	4b51      	ldr	r3, [pc, #324]	@ (8002380 <main+0x4f8>)
 800223c:	2223      	movs	r2, #35	@ 0x23
 800223e:	2105      	movs	r1, #5
 8002240:	484b      	ldr	r0, [pc, #300]	@ (8002370 <main+0x4e8>)
 8002242:	f7ff fcd9 	bl	8001bf8 <TFT_Show_String>

      // 显示电压刻度
      sprintf(text_buffer, "Volt: %.1f V/div", voltage_scale);
 8002246:	4b4f      	ldr	r3, [pc, #316]	@ (8002384 <main+0x4fc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe f8ea 	bl	8000424 <__aeabi_f2d>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	494c      	ldr	r1, [pc, #304]	@ (8002388 <main+0x500>)
 8002256:	484a      	ldr	r0, [pc, #296]	@ (8002380 <main+0x4f8>)
 8002258:	f003 fac2 	bl	80057e0 <siprintf>
      TFT_Show_String(&htft2, 5, 55, text_buffer, GREEN, BLACK, 16, 0);
 800225c:	2300      	movs	r3, #0
 800225e:	9303      	str	r3, [sp, #12]
 8002260:	2310      	movs	r3, #16
 8002262:	9302      	str	r3, [sp, #8]
 8002264:	2300      	movs	r3, #0
 8002266:	9301      	str	r3, [sp, #4]
 8002268:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	4b44      	ldr	r3, [pc, #272]	@ (8002380 <main+0x4f8>)
 8002270:	2237      	movs	r2, #55	@ 0x37
 8002272:	2105      	movs	r1, #5
 8002274:	483e      	ldr	r0, [pc, #248]	@ (8002370 <main+0x4e8>)
 8002276:	f7ff fcbf 	bl	8001bf8 <TFT_Show_String>

      // 显示触发电平
      sprintf(text_buffer, "Trig: %.1f V", trigger_level);
 800227a:	4b44      	ldr	r3, [pc, #272]	@ (800238c <main+0x504>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe f8d0 	bl	8000424 <__aeabi_f2d>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4941      	ldr	r1, [pc, #260]	@ (8002390 <main+0x508>)
 800228a:	483d      	ldr	r0, [pc, #244]	@ (8002380 <main+0x4f8>)
 800228c:	f003 faa8 	bl	80057e0 <siprintf>
      TFT_Show_String(&htft2, 5, 75, text_buffer, MAGENTA, BLACK, 16, 0);
 8002290:	2300      	movs	r3, #0
 8002292:	9303      	str	r3, [sp, #12]
 8002294:	2310      	movs	r3, #16
 8002296:	9302      	str	r3, [sp, #8]
 8002298:	2300      	movs	r3, #0
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	4b37      	ldr	r3, [pc, #220]	@ (8002380 <main+0x4f8>)
 80022a4:	224b      	movs	r2, #75	@ 0x4b
 80022a6:	2105      	movs	r1, #5
 80022a8:	4831      	ldr	r0, [pc, #196]	@ (8002370 <main+0x4e8>)
 80022aa:	f7ff fca5 	bl	8001bf8 <TFT_Show_String>

      // 显示信号频率
      sprintf(text_buffer, "Freq: %.1f Hz", signal_frequency);
 80022ae:	4b39      	ldr	r3, [pc, #228]	@ (8002394 <main+0x50c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe f8b6 	bl	8000424 <__aeabi_f2d>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4936      	ldr	r1, [pc, #216]	@ (8002398 <main+0x510>)
 80022be:	4830      	ldr	r0, [pc, #192]	@ (8002380 <main+0x4f8>)
 80022c0:	f003 fa8e 	bl	80057e0 <siprintf>
      TFT_Show_String(&htft2, 5, 95, text_buffer, LIGHTBLUE, BLACK, 16, 0);
 80022c4:	2300      	movs	r3, #0
 80022c6:	9303      	str	r3, [sp, #12]
 80022c8:	2310      	movs	r3, #16
 80022ca:	9302      	str	r3, [sp, #8]
 80022cc:	2300      	movs	r3, #0
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	f647 537c 	movw	r3, #32124	@ 0x7d7c
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002380 <main+0x4f8>)
 80022d8:	225f      	movs	r2, #95	@ 0x5f
 80022da:	2105      	movs	r1, #5
 80022dc:	4824      	ldr	r0, [pc, #144]	@ (8002370 <main+0x4e8>)
 80022de:	f7ff fc8b 	bl	8001bf8 <TFT_Show_String>

      // 显示信号幅值
      sprintf(text_buffer, "Amp: %.1f Vpp", signal_amplitude);
 80022e2:	4b2e      	ldr	r3, [pc, #184]	@ (800239c <main+0x514>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f89c 	bl	8000424 <__aeabi_f2d>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	492b      	ldr	r1, [pc, #172]	@ (80023a0 <main+0x518>)
 80022f2:	4823      	ldr	r0, [pc, #140]	@ (8002380 <main+0x4f8>)
 80022f4:	f003 fa74 	bl	80057e0 <siprintf>
      TFT_Show_String(&htft2, 5, 115, text_buffer, ORANGE, BLACK, 16, 0);
 80022f8:	2300      	movs	r3, #0
 80022fa:	9303      	str	r3, [sp, #12]
 80022fc:	2310      	movs	r3, #16
 80022fe:	9302      	str	r3, [sp, #8]
 8002300:	2300      	movs	r3, #0
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	4b1d      	ldr	r3, [pc, #116]	@ (8002380 <main+0x4f8>)
 800230c:	2273      	movs	r2, #115	@ 0x73
 800230e:	2105      	movs	r1, #5
 8002310:	4817      	ldr	r0, [pc, #92]	@ (8002370 <main+0x4e8>)
 8002312:	f7ff fc71 	bl	8001bf8 <TFT_Show_String>

      // 显示信号偏移
      sprintf(text_buffer, "Offset: %.1f V", signal_offset);
 8002316:	4b23      	ldr	r3, [pc, #140]	@ (80023a4 <main+0x51c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe f882 	bl	8000424 <__aeabi_f2d>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4920      	ldr	r1, [pc, #128]	@ (80023a8 <main+0x520>)
 8002326:	4816      	ldr	r0, [pc, #88]	@ (8002380 <main+0x4f8>)
 8002328:	f003 fa5a 	bl	80057e0 <siprintf>
      TFT_Show_String(&htft2, 5, 135, text_buffer, WHITE, BLACK, 16, 0);
 800232c:	2300      	movs	r3, #0
 800232e:	9303      	str	r3, [sp, #12]
 8002330:	2310      	movs	r3, #16
 8002332:	9302      	str	r3, [sp, #8]
 8002334:	2300      	movs	r3, #0
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <main+0x4f8>)
 8002340:	2287      	movs	r2, #135	@ 0x87
 8002342:	2105      	movs	r1, #5
 8002344:	480a      	ldr	r0, [pc, #40]	@ (8002370 <main+0x4e8>)
 8002346:	f7ff fc57 	bl	8001bf8 <TFT_Show_String>
    }

    // --- 4. 串口指令处理 (占位符) ---
    if (uart_rx_complete)
 800234a:	4b18      	ldr	r3, [pc, #96]	@ (80023ac <main+0x524>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <main+0x4d8>
    {
      parse_uart_command((char *)uart_rx_buffer);
 8002354:	4816      	ldr	r0, [pc, #88]	@ (80023b0 <main+0x528>)
 8002356:	f000 f9c3 	bl	80026e0 <parse_uart_command>
      uart_rx_complete = 0;
 800235a:	4b14      	ldr	r3, [pc, #80]	@ (80023ac <main+0x524>)
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
    }

    // --- 5. 延时 ---
    HAL_Delay(20); // 控制刷新率，避免闪烁太快
 8002360:	2014      	movs	r0, #20
 8002362:	f000 feb9 	bl	80030d8 <HAL_Delay>
    phase += 0.1f; // 调整这个值改变频率
 8002366:	e5fb      	b.n	8001f60 <main+0xd8>
 8002368:	200000b8 	.word	0x200000b8
 800236c:	2000002c 	.word	0x2000002c
 8002370:	200000ec 	.word	0x200000ec
 8002374:	08007500 	.word	0x08007500
 8002378:	20000000 	.word	0x20000000
 800237c:	08007510 	.word	0x08007510
 8002380:	20000300 	.word	0x20000300
 8002384:	20000004 	.word	0x20000004
 8002388:	08007524 	.word	0x08007524
 800238c:	20000008 	.word	0x20000008
 8002390:	08007538 	.word	0x08007538
 8002394:	20000024 	.word	0x20000024
 8002398:	08007548 	.word	0x08007548
 800239c:	20000028 	.word	0x20000028
 80023a0:	08007558 	.word	0x08007558
 80023a4:	20000334 	.word	0x20000334
 80023a8:	08007568 	.word	0x08007568
 80023ac:	2000037c 	.word	0x2000037c
 80023b0:	20000338 	.word	0x20000338

080023b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b090      	sub	sp, #64	@ 0x40
 80023b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ba:	f107 0318 	add.w	r3, r7, #24
 80023be:	2228      	movs	r2, #40	@ 0x28
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f003 fa5c 	bl	8005880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	609a      	str	r2, [r3, #8]
 80023d2:	60da      	str	r2, [r3, #12]
 80023d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023d6:	2301      	movs	r3, #1
 80023d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023e0:	2300      	movs	r3, #0
 80023e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023e4:	2301      	movs	r3, #1
 80023e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023e8:	2302      	movs	r3, #2
 80023ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80023f2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80023f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f8:	f107 0318 	add.w	r3, r7, #24
 80023fc:	4618      	mov	r0, r3
 80023fe:	f001 fbdb 	bl	8003bb8 <HAL_RCC_OscConfig>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002408:	f000 fb72 	bl	8002af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800240c:	230f      	movs	r3, #15
 800240e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002410:	2302      	movs	r3, #2
 8002412:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002418:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800241c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	2102      	movs	r1, #2
 8002426:	4618      	mov	r0, r3
 8002428:	f001 fe48 	bl	80040bc <HAL_RCC_ClockConfig>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002432:	f000 fb5d 	bl	8002af0 <Error_Handler>
  }
}
 8002436:	bf00      	nop
 8002438:	3740      	adds	r7, #64	@ 0x40
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <analyze_waveform>:
 * @param  wave_data 波形数据数组
 * @param  points 波形点数
 * @retval None
 */
void analyze_waveform(uint16_t *wave_data, uint16_t points)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	@ 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
  if (points < 10 || !channel1_enabled || !run_state)
 800244c:	887b      	ldrh	r3, [r7, #2]
 800244e:	2b09      	cmp	r3, #9
 8002450:	f240 80e1 	bls.w	8002616 <analyze_waveform+0x1d6>
 8002454:	4b72      	ldr	r3, [pc, #456]	@ (8002620 <analyze_waveform+0x1e0>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80dc 	beq.w	8002616 <analyze_waveform+0x1d6>
 800245e:	4b71      	ldr	r3, [pc, #452]	@ (8002624 <analyze_waveform+0x1e4>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80d7 	beq.w	8002616 <analyze_waveform+0x1d6>
    return;

  // 查找最大值和最小值
  uint16_t max_value = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t min_value = TFT1_SCREEN_HEIGHT;
 800246c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002470:	84bb      	strh	r3, [r7, #36]	@ 0x24
  
  for (uint16_t i = 0; i < points; i++)
 8002472:	2300      	movs	r3, #0
 8002474:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002476:	e01e      	b.n	80024b6 <analyze_waveform+0x76>
  {
    if (wave_data[i] > max_value) max_value = wave_data[i];
 8002478:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002484:	429a      	cmp	r2, r3
 8002486:	d205      	bcs.n	8002494 <analyze_waveform+0x54>
 8002488:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	4413      	add	r3, r2
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (wave_data[i] < min_value) min_value = wave_data[i];
 8002494:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d905      	bls.n	80024b0 <analyze_waveform+0x70>
 80024a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	4413      	add	r3, r2
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (uint16_t i = 0; i < points; i++)
 80024b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80024b2:	3301      	adds	r3, #1
 80024b4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80024b6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80024b8:	887b      	ldrh	r3, [r7, #2]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d3dc      	bcc.n	8002478 <analyze_waveform+0x38>
  }
  
  // 计算幅值 (转换为电压值)
  uint16_t peak_to_peak = (min_value > max_value) ? 0 : (max_value - min_value);
 80024be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d804      	bhi.n	80024d0 <analyze_waveform+0x90>
 80024c6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80024c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	e000      	b.n	80024d2 <analyze_waveform+0x92>
 80024d0:	2300      	movs	r3, #0
 80024d2:	833b      	strh	r3, [r7, #24]
  float pixels_per_volt = (TFT1_SCREEN_HEIGHT / 8) / voltage_scale; // 每伏特对应的像素数
 80024d4:	4b54      	ldr	r3, [pc, #336]	@ (8002628 <analyze_waveform+0x1e8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4619      	mov	r1, r3
 80024da:	4854      	ldr	r0, [pc, #336]	@ (800262c <analyze_waveform+0x1ec>)
 80024dc:	f7fe f9bc 	bl	8000858 <__aeabi_fdiv>
 80024e0:	4603      	mov	r3, r0
 80024e2:	617b      	str	r3, [r7, #20]
  signal_amplitude = (float)peak_to_peak / pixels_per_volt;
 80024e4:	8b3b      	ldrh	r3, [r7, #24]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe f8aa 	bl	8000640 <__aeabi_ui2f>
 80024ec:	4603      	mov	r3, r0
 80024ee:	6979      	ldr	r1, [r7, #20]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe f9b1 	bl	8000858 <__aeabi_fdiv>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b4d      	ldr	r3, [pc, #308]	@ (8002630 <analyze_waveform+0x1f0>)
 80024fc:	601a      	str	r2, [r3, #0]
  
  // 计算直流偏移
  uint16_t mid_point = (max_value + min_value) / 2;
 80024fe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002500:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002502:	4413      	add	r3, r2
 8002504:	0fda      	lsrs	r2, r3, #31
 8002506:	4413      	add	r3, r2
 8002508:	105b      	asrs	r3, r3, #1
 800250a:	827b      	strh	r3, [r7, #18]
  signal_offset = ((float)TFT1_SCREEN_HEIGHT / 2 - mid_point) / pixels_per_volt;
 800250c:	8a7b      	ldrh	r3, [r7, #18]
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f89a 	bl	8000648 <__aeabi_i2f>
 8002514:	4603      	mov	r3, r0
 8002516:	4619      	mov	r1, r3
 8002518:	4846      	ldr	r0, [pc, #280]	@ (8002634 <analyze_waveform+0x1f4>)
 800251a:	f7fd ffdf 	bl	80004dc <__aeabi_fsub>
 800251e:	4603      	mov	r3, r0
 8002520:	6979      	ldr	r1, [r7, #20]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe f998 	bl	8000858 <__aeabi_fdiv>
 8002528:	4603      	mov	r3, r0
 800252a:	461a      	mov	r2, r3
 800252c:	4b42      	ldr	r3, [pc, #264]	@ (8002638 <analyze_waveform+0x1f8>)
 800252e:	601a      	str	r2, [r3, #0]
  
  // 计算频率 (零点交叉法)
  // 假设一个完整周期内有两个零点交叉
  // 为简化计算，我们搜索上升沿
  uint16_t crossings = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	843b      	strh	r3, [r7, #32]
  uint16_t first_crossing = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	83fb      	strh	r3, [r7, #30]
  uint16_t last_crossing = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	83bb      	strh	r3, [r7, #28]
  uint16_t mid_level = TFT1_SCREEN_HEIGHT / 2;
 800253c:	23a0      	movs	r3, #160	@ 0xa0
 800253e:	823b      	strh	r3, [r7, #16]
  
  for (uint16_t i = 1; i < points; i++)
 8002540:	2301      	movs	r3, #1
 8002542:	837b      	strh	r3, [r7, #26]
 8002544:	e020      	b.n	8002588 <analyze_waveform+0x148>
  {
    // 检测上升沿穿越中点
    if (wave_data[i-1] > mid_level && wave_data[i] <= mid_level)
 8002546:	8b7b      	ldrh	r3, [r7, #26]
 8002548:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800254c:	3b01      	subs	r3, #1
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	4413      	add	r3, r2
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	8a3a      	ldrh	r2, [r7, #16]
 8002558:	429a      	cmp	r2, r3
 800255a:	d212      	bcs.n	8002582 <analyze_waveform+0x142>
 800255c:	8b7b      	ldrh	r3, [r7, #26]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	4413      	add	r3, r2
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	8a3a      	ldrh	r2, [r7, #16]
 8002568:	429a      	cmp	r2, r3
 800256a:	d30a      	bcc.n	8002582 <analyze_waveform+0x142>
    {
      if (crossings == 0)
 800256c:	8c3b      	ldrh	r3, [r7, #32]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <analyze_waveform+0x138>
        first_crossing = i;
 8002572:	8b7b      	ldrh	r3, [r7, #26]
 8002574:	83fb      	strh	r3, [r7, #30]
 8002576:	e001      	b.n	800257c <analyze_waveform+0x13c>
      else
        last_crossing = i;
 8002578:	8b7b      	ldrh	r3, [r7, #26]
 800257a:	83bb      	strh	r3, [r7, #28]
      
      crossings++;
 800257c:	8c3b      	ldrh	r3, [r7, #32]
 800257e:	3301      	adds	r3, #1
 8002580:	843b      	strh	r3, [r7, #32]
  for (uint16_t i = 1; i < points; i++)
 8002582:	8b7b      	ldrh	r3, [r7, #26]
 8002584:	3301      	adds	r3, #1
 8002586:	837b      	strh	r3, [r7, #26]
 8002588:	8b7a      	ldrh	r2, [r7, #26]
 800258a:	887b      	ldrh	r3, [r7, #2]
 800258c:	429a      	cmp	r2, r3
 800258e:	d3da      	bcc.n	8002546 <analyze_waveform+0x106>
    }
  }
  
  // 如果找到至少两个交叉点，计算频率
  if (crossings >= 2 && last_crossing > first_crossing)
 8002590:	8c3b      	ldrh	r3, [r7, #32]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d940      	bls.n	8002618 <analyze_waveform+0x1d8>
 8002596:	8bba      	ldrh	r2, [r7, #28]
 8002598:	8bfb      	ldrh	r3, [r7, #30]
 800259a:	429a      	cmp	r2, r3
 800259c:	d93c      	bls.n	8002618 <analyze_waveform+0x1d8>
  {
    // 计算周期数
    float num_cycles = (float)(crossings - 1) / 2.0f;
 800259e:	8c3b      	ldrh	r3, [r7, #32]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe f850 	bl	8000648 <__aeabi_i2f>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe f952 	bl	8000858 <__aeabi_fdiv>
 80025b4:	4603      	mov	r3, r0
 80025b6:	60fb      	str	r3, [r7, #12]
    
    // 计算周期时间 (ms)
    float period_time = (float)(last_crossing - first_crossing) * time_base / 30.0f;
 80025b8:	8bba      	ldrh	r2, [r7, #28]
 80025ba:	8bfb      	ldrh	r3, [r7, #30]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe f842 	bl	8000648 <__aeabi_i2f>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b1d      	ldr	r3, [pc, #116]	@ (800263c <analyze_waveform+0x1fc>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4619      	mov	r1, r3
 80025cc:	4610      	mov	r0, r2
 80025ce:	f7fe f88f 	bl	80006f0 <__aeabi_fmul>
 80025d2:	4603      	mov	r3, r0
 80025d4:	491a      	ldr	r1, [pc, #104]	@ (8002640 <analyze_waveform+0x200>)
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe f93e 	bl	8000858 <__aeabi_fdiv>
 80025dc:	4603      	mov	r3, r0
 80025de:	60bb      	str	r3, [r7, #8]
    
    // 计算频率 (Hz)
    if (period_time > 0)
 80025e0:	f04f 0100 	mov.w	r1, #0
 80025e4:	68b8      	ldr	r0, [r7, #8]
 80025e6:	f7fe fa3f 	bl	8000a68 <__aeabi_fcmpgt>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00d      	beq.n	800260c <analyze_waveform+0x1cc>
      signal_frequency = (1000.0f * num_cycles) / period_time;
 80025f0:	4914      	ldr	r1, [pc, #80]	@ (8002644 <analyze_waveform+0x204>)
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f7fe f87c 	bl	80006f0 <__aeabi_fmul>
 80025f8:	4603      	mov	r3, r0
 80025fa:	68b9      	ldr	r1, [r7, #8]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe f92b 	bl	8000858 <__aeabi_fdiv>
 8002602:	4603      	mov	r3, r0
 8002604:	461a      	mov	r2, r3
 8002606:	4b10      	ldr	r3, [pc, #64]	@ (8002648 <analyze_waveform+0x208>)
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e005      	b.n	8002618 <analyze_waveform+0x1d8>
    else
      signal_frequency = 0;
 800260c:	4b0e      	ldr	r3, [pc, #56]	@ (8002648 <analyze_waveform+0x208>)
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	e000      	b.n	8002618 <analyze_waveform+0x1d8>
    return;
 8002616:	bf00      	nop
  }
}
 8002618:	3728      	adds	r7, #40	@ 0x28
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	2000000d 	.word	0x2000000d
 8002624:	2000000c 	.word	0x2000000c
 8002628:	20000004 	.word	0x20000004
 800262c:	42200000 	.word	0x42200000
 8002630:	20000028 	.word	0x20000028
 8002634:	43200000 	.word	0x43200000
 8002638:	20000334 	.word	0x20000334
 800263c:	20000000 	.word	0x20000000
 8002640:	41f00000 	.word	0x41f00000
 8002644:	447a0000 	.word	0x447a0000
 8002648:	20000024 	.word	0x20000024

0800264c <HAL_UART_RxCpltCallback>:
 * @brief  串口接收中断回调
 * @param  huart UART句柄
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1b      	ldr	r2, [pc, #108]	@ (80026c8 <HAL_UART_RxCpltCallback+0x7c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d130      	bne.n	80026c0 <HAL_UART_RxCpltCallback+0x74>
  {
    // 将接收到的字符存入缓冲区
    if (uart_rx_data == '\n' || uart_rx_data == '\r')
 800265e:	4b1b      	ldr	r3, [pc, #108]	@ (80026cc <HAL_UART_RxCpltCallback+0x80>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b0a      	cmp	r3, #10
 8002664:	d003      	beq.n	800266e <HAL_UART_RxCpltCallback+0x22>
 8002666:	4b19      	ldr	r3, [pc, #100]	@ (80026cc <HAL_UART_RxCpltCallback+0x80>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b0d      	cmp	r3, #13
 800266c:	d112      	bne.n	8002694 <HAL_UART_RxCpltCallback+0x48>
    {
      // 收到回车换行符，表示指令结束
      if (uart_rx_index > 0)
 800266e:	4b18      	ldr	r3, [pc, #96]	@ (80026d0 <HAL_UART_RxCpltCallback+0x84>)
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01e      	beq.n	80026b6 <HAL_UART_RxCpltCallback+0x6a>
      {
        uart_rx_buffer[uart_rx_index] = '\0'; // 添加字符串结束符
 8002678:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <HAL_UART_RxCpltCallback+0x84>)
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	b29b      	uxth	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	4b14      	ldr	r3, [pc, #80]	@ (80026d4 <HAL_UART_RxCpltCallback+0x88>)
 8002682:	2100      	movs	r1, #0
 8002684:	5499      	strb	r1, [r3, r2]
        uart_rx_complete = 1;                  // 设置完成标志
 8002686:	4b14      	ldr	r3, [pc, #80]	@ (80026d8 <HAL_UART_RxCpltCallback+0x8c>)
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
        uart_rx_index = 0;                     // 重置索引
 800268c:	4b10      	ldr	r3, [pc, #64]	@ (80026d0 <HAL_UART_RxCpltCallback+0x84>)
 800268e:	2200      	movs	r2, #0
 8002690:	801a      	strh	r2, [r3, #0]
      if (uart_rx_index > 0)
 8002692:	e010      	b.n	80026b6 <HAL_UART_RxCpltCallback+0x6a>
      }
    }
    else
    {
      // 存储字符到缓冲区
      if (uart_rx_index < UART_RX_BUFFER_SIZE - 1)
 8002694:	4b0e      	ldr	r3, [pc, #56]	@ (80026d0 <HAL_UART_RxCpltCallback+0x84>)
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b3e      	cmp	r3, #62	@ 0x3e
 800269c:	d80b      	bhi.n	80026b6 <HAL_UART_RxCpltCallback+0x6a>
      {
        uart_rx_buffer[uart_rx_index++] = uart_rx_data;
 800269e:	4b0c      	ldr	r3, [pc, #48]	@ (80026d0 <HAL_UART_RxCpltCallback+0x84>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	b291      	uxth	r1, r2
 80026a8:	4a09      	ldr	r2, [pc, #36]	@ (80026d0 <HAL_UART_RxCpltCallback+0x84>)
 80026aa:	8011      	strh	r1, [r2, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b07      	ldr	r3, [pc, #28]	@ (80026cc <HAL_UART_RxCpltCallback+0x80>)
 80026b0:	7819      	ldrb	r1, [r3, #0]
 80026b2:	4b08      	ldr	r3, [pc, #32]	@ (80026d4 <HAL_UART_RxCpltCallback+0x88>)
 80026b4:	5499      	strb	r1, [r3, r2]
      }
    }
    
    // 重新启动接收中断
    HAL_UART_Receive_IT(&huart1, &uart_rx_data, 1);
 80026b6:	2201      	movs	r2, #1
 80026b8:	4904      	ldr	r1, [pc, #16]	@ (80026cc <HAL_UART_RxCpltCallback+0x80>)
 80026ba:	4808      	ldr	r0, [pc, #32]	@ (80026dc <HAL_UART_RxCpltCallback+0x90>)
 80026bc:	f002 faa3 	bl	8004c06 <HAL_UART_Receive_IT>
  }
}
 80026c0:	bf00      	nop
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40013800 	.word	0x40013800
 80026cc:	20000378 	.word	0x20000378
 80026d0:	2000037a 	.word	0x2000037a
 80026d4:	20000338 	.word	0x20000338
 80026d8:	2000037c 	.word	0x2000037c
 80026dc:	200004bc 	.word	0x200004bc

080026e0 <parse_uart_command>:
 * @brief  解析串口接收到的指令
 * @param  command 指令字符串
 * @retval None
 */
void parse_uart_command(char *command)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  // 回显收到的指令（调试用）
  // HAL_UART_Transmit(&huart1, (uint8_t *)command, strlen(command), 100);
  // HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n", 2, 10);
  
  // 将指令转换为大写以统一处理
  for (int i = 0; command[i]; i++)
 80026e8:	2300      	movs	r3, #0
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	e018      	b.n	8002720 <parse_uart_command+0x40>
  {
    if (command[i] >= 'a' && command[i] <= 'z')
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b60      	cmp	r3, #96	@ 0x60
 80026f8:	d90f      	bls.n	800271a <parse_uart_command+0x3a>
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	4413      	add	r3, r2
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b7a      	cmp	r3, #122	@ 0x7a
 8002704:	d809      	bhi.n	800271a <parse_uart_command+0x3a>
    {
      command[i] = command[i] - 'a' + 'A';
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	4413      	add	r3, r2
 800270c:	781a      	ldrb	r2, [r3, #0]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	440b      	add	r3, r1
 8002714:	3a20      	subs	r2, #32
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]
  for (int i = 0; command[i]; i++)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3301      	adds	r3, #1
 800271e:	61fb      	str	r3, [r7, #28]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	4413      	add	r3, r2
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1e0      	bne.n	80026ee <parse_uart_command+0xe>
    }
  }
  
  // 自动设置
  if (strstr(command, ":AUTOSCALE"))
 800272c:	49a5      	ldr	r1, [pc, #660]	@ (80029c4 <parse_uart_command+0x2e4>)
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f003 f8ae 	bl	8005890 <strstr>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d023      	beq.n	8002782 <parse_uart_command+0xa2>
  {
    time_base = 1.0f;      // 默认时基设置
 800273a:	4ba3      	ldr	r3, [pc, #652]	@ (80029c8 <parse_uart_command+0x2e8>)
 800273c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002740:	601a      	str	r2, [r3, #0]
    voltage_scale = 1.0f;  // 默认电压刻度
 8002742:	4ba2      	ldr	r3, [pc, #648]	@ (80029cc <parse_uart_command+0x2ec>)
 8002744:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002748:	601a      	str	r2, [r3, #0]
    trigger_level = 0.0f;  // 默认触发电平
 800274a:	4ba1      	ldr	r3, [pc, #644]	@ (80029d0 <parse_uart_command+0x2f0>)
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
    run_state = 1;         // 运行状态
 8002752:	4ba0      	ldr	r3, [pc, #640]	@ (80029d4 <parse_uart_command+0x2f4>)
 8002754:	2201      	movs	r2, #1
 8002756:	701a      	strb	r2, [r3, #0]
    strcpy(coupling_mode, "DC");    // 默认耦合方式
 8002758:	4b9f      	ldr	r3, [pc, #636]	@ (80029d8 <parse_uart_command+0x2f8>)
 800275a:	4aa0      	ldr	r2, [pc, #640]	@ (80029dc <parse_uart_command+0x2fc>)
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	4611      	mov	r1, r2
 8002760:	8019      	strh	r1, [r3, #0]
 8002762:	3302      	adds	r3, #2
 8002764:	0c12      	lsrs	r2, r2, #16
 8002766:	701a      	strb	r2, [r3, #0]
    strcpy(trigger_mode, "EDGE");   // 默认触发模式
 8002768:	4b9d      	ldr	r3, [pc, #628]	@ (80029e0 <parse_uart_command+0x300>)
 800276a:	4a9e      	ldr	r2, [pc, #632]	@ (80029e4 <parse_uart_command+0x304>)
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	2200      	movs	r2, #0
 8002770:	711a      	strb	r2, [r3, #4]
    strcpy(trigger_sweep, "AUTO");  // 默认触发扫描
 8002772:	4b9d      	ldr	r3, [pc, #628]	@ (80029e8 <parse_uart_command+0x308>)
 8002774:	4a9d      	ldr	r2, [pc, #628]	@ (80029ec <parse_uart_command+0x30c>)
 8002776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800277a:	6018      	str	r0, [r3, #0]
 800277c:	3304      	adds	r3, #4
 800277e:	7019      	strb	r1, [r3, #0]
  // 运行/停止控制
  else if (strstr(command, ":RUN"))
  {
    run_state = !run_state; // 切换运行/停止状态
  }
}
 8002780:	e1a5      	b.n	8002ace <parse_uart_command+0x3ee>
  else if (strstr(command, ":CHAN1 ON"))
 8002782:	499b      	ldr	r1, [pc, #620]	@ (80029f0 <parse_uart_command+0x310>)
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f003 f883 	bl	8005890 <strstr>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <parse_uart_command+0xb8>
    channel1_enabled = 1;
 8002790:	4b98      	ldr	r3, [pc, #608]	@ (80029f4 <parse_uart_command+0x314>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
}
 8002796:	e19a      	b.n	8002ace <parse_uart_command+0x3ee>
  else if (strstr(command, ":CHAN1 OFF"))
 8002798:	4997      	ldr	r1, [pc, #604]	@ (80029f8 <parse_uart_command+0x318>)
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f003 f878 	bl	8005890 <strstr>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <parse_uart_command+0xce>
    channel1_enabled = 0;
 80027a6:	4b93      	ldr	r3, [pc, #588]	@ (80029f4 <parse_uart_command+0x314>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
}
 80027ac:	e18f      	b.n	8002ace <parse_uart_command+0x3ee>
  else if (strstr(command, ":CHAN2 ON"))
 80027ae:	4993      	ldr	r1, [pc, #588]	@ (80029fc <parse_uart_command+0x31c>)
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f003 f86d 	bl	8005890 <strstr>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <parse_uart_command+0xe4>
    channel2_enabled = 1;
 80027bc:	4b90      	ldr	r3, [pc, #576]	@ (8002a00 <parse_uart_command+0x320>)
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
}
 80027c2:	e184      	b.n	8002ace <parse_uart_command+0x3ee>
  else if (strstr(command, ":CHAN2 OFF"))
 80027c4:	498f      	ldr	r1, [pc, #572]	@ (8002a04 <parse_uart_command+0x324>)
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f003 f862 	bl	8005890 <strstr>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <parse_uart_command+0xfa>
    channel2_enabled = 0;
 80027d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002a00 <parse_uart_command+0x320>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
}
 80027d8:	e179      	b.n	8002ace <parse_uart_command+0x3ee>
  else if (strstr(command, ":CHAN1:VOLTS"))
 80027da:	498b      	ldr	r1, [pc, #556]	@ (8002a08 <parse_uart_command+0x328>)
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f003 f857 	bl	8005890 <strstr>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d020      	beq.n	800282a <parse_uart_command+0x14a>
    float new_volts = 0;
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
    char *volt_pos = strstr(command, "VOLTS") + 5; // 跳过"VOLTS"
 80027ee:	4987      	ldr	r1, [pc, #540]	@ (8002a0c <parse_uart_command+0x32c>)
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f003 f84d 	bl	8005890 <strstr>
 80027f6:	4603      	mov	r3, r0
 80027f8:	3305      	adds	r3, #5
 80027fa:	61bb      	str	r3, [r7, #24]
    while (*volt_pos == ' ') volt_pos++;
 80027fc:	e002      	b.n	8002804 <parse_uart_command+0x124>
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	3301      	adds	r3, #1
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b20      	cmp	r3, #32
 800280a:	d0f8      	beq.n	80027fe <parse_uart_command+0x11e>
    if (sscanf(volt_pos, "%fV", &new_volts) == 1)
 800280c:	f107 0310 	add.w	r3, r7, #16
 8002810:	461a      	mov	r2, r3
 8002812:	497f      	ldr	r1, [pc, #508]	@ (8002a10 <parse_uart_command+0x330>)
 8002814:	69b8      	ldr	r0, [r7, #24]
 8002816:	f003 f805 	bl	8005824 <siscanf>
 800281a:	4603      	mov	r3, r0
 800281c:	2b01      	cmp	r3, #1
 800281e:	f040 8156 	bne.w	8002ace <parse_uart_command+0x3ee>
      voltage_scale = new_volts;
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4a69      	ldr	r2, [pc, #420]	@ (80029cc <parse_uart_command+0x2ec>)
 8002826:	6013      	str	r3, [r2, #0]
}
 8002828:	e151      	b.n	8002ace <parse_uart_command+0x3ee>
  else if (strstr(command, ":CHAN1:COUPL"))
 800282a:	497a      	ldr	r1, [pc, #488]	@ (8002a14 <parse_uart_command+0x334>)
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f003 f82f 	bl	8005890 <strstr>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d020      	beq.n	800287a <parse_uart_command+0x19a>
    if (strstr(command, "DC"))
 8002838:	4968      	ldr	r1, [pc, #416]	@ (80029dc <parse_uart_command+0x2fc>)
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f003 f828 	bl	8005890 <strstr>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d008      	beq.n	8002858 <parse_uart_command+0x178>
      strcpy(coupling_mode, "DC");
 8002846:	4b64      	ldr	r3, [pc, #400]	@ (80029d8 <parse_uart_command+0x2f8>)
 8002848:	4a64      	ldr	r2, [pc, #400]	@ (80029dc <parse_uart_command+0x2fc>)
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	4611      	mov	r1, r2
 800284e:	8019      	strh	r1, [r3, #0]
 8002850:	3302      	adds	r3, #2
 8002852:	0c12      	lsrs	r2, r2, #16
 8002854:	701a      	strb	r2, [r3, #0]
}
 8002856:	e13a      	b.n	8002ace <parse_uart_command+0x3ee>
    else if (strstr(command, "AC"))
 8002858:	496f      	ldr	r1, [pc, #444]	@ (8002a18 <parse_uart_command+0x338>)
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f003 f818 	bl	8005890 <strstr>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 8133 	beq.w	8002ace <parse_uart_command+0x3ee>
      strcpy(coupling_mode, "AC");
 8002868:	4b5b      	ldr	r3, [pc, #364]	@ (80029d8 <parse_uart_command+0x2f8>)
 800286a:	4a6b      	ldr	r2, [pc, #428]	@ (8002a18 <parse_uart_command+0x338>)
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	4611      	mov	r1, r2
 8002870:	8019      	strh	r1, [r3, #0]
 8002872:	3302      	adds	r3, #2
 8002874:	0c12      	lsrs	r2, r2, #16
 8002876:	701a      	strb	r2, [r3, #0]
}
 8002878:	e129      	b.n	8002ace <parse_uart_command+0x3ee>
  else if (strstr(command, ":TIMEBASE"))
 800287a:	4968      	ldr	r1, [pc, #416]	@ (8002a1c <parse_uart_command+0x33c>)
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f003 f807 	bl	8005890 <strstr>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d066      	beq.n	8002956 <parse_uart_command+0x276>
    float new_time = 0;
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
    char *time_pos = strstr(command, "TIMEBASE") + 8; // 跳过"TIMEBASE"
 800288e:	4964      	ldr	r1, [pc, #400]	@ (8002a20 <parse_uart_command+0x340>)
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f002 fffd 	bl	8005890 <strstr>
 8002896:	4603      	mov	r3, r0
 8002898:	3308      	adds	r3, #8
 800289a:	617b      	str	r3, [r7, #20]
    while (*time_pos == ' ') time_pos++;
 800289c:	e002      	b.n	80028a4 <parse_uart_command+0x1c4>
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	3301      	adds	r3, #1
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d0f8      	beq.n	800289e <parse_uart_command+0x1be>
    if (strstr(time_pos, "MS") || strstr(time_pos, "ms"))
 80028ac:	495d      	ldr	r1, [pc, #372]	@ (8002a24 <parse_uart_command+0x344>)
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	f002 ffee 	bl	8005890 <strstr>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <parse_uart_command+0x1e8>
 80028ba:	495b      	ldr	r1, [pc, #364]	@ (8002a28 <parse_uart_command+0x348>)
 80028bc:	6978      	ldr	r0, [r7, #20]
 80028be:	f002 ffe7 	bl	8005890 <strstr>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d018      	beq.n	80028fa <parse_uart_command+0x21a>
      if (sscanf(time_pos, "%fMS", &new_time) == 1 || sscanf(time_pos, "%fms", &new_time) == 1)
 80028c8:	f107 030c 	add.w	r3, r7, #12
 80028cc:	461a      	mov	r2, r3
 80028ce:	4957      	ldr	r1, [pc, #348]	@ (8002a2c <parse_uart_command+0x34c>)
 80028d0:	6978      	ldr	r0, [r7, #20]
 80028d2:	f002 ffa7 	bl	8005824 <siscanf>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d00a      	beq.n	80028f2 <parse_uart_command+0x212>
 80028dc:	f107 030c 	add.w	r3, r7, #12
 80028e0:	461a      	mov	r2, r3
 80028e2:	4953      	ldr	r1, [pc, #332]	@ (8002a30 <parse_uart_command+0x350>)
 80028e4:	6978      	ldr	r0, [r7, #20]
 80028e6:	f002 ff9d 	bl	8005824 <siscanf>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	f040 80ed 	bne.w	8002acc <parse_uart_command+0x3ec>
        time_base = new_time;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4a34      	ldr	r2, [pc, #208]	@ (80029c8 <parse_uart_command+0x2e8>)
 80028f6:	6013      	str	r3, [r2, #0]
      if (sscanf(time_pos, "%fMS", &new_time) == 1 || sscanf(time_pos, "%fms", &new_time) == 1)
 80028f8:	e0e8      	b.n	8002acc <parse_uart_command+0x3ec>
    else if (strstr(time_pos, "US") || strstr(time_pos, "us"))
 80028fa:	494e      	ldr	r1, [pc, #312]	@ (8002a34 <parse_uart_command+0x354>)
 80028fc:	6978      	ldr	r0, [r7, #20]
 80028fe:	f002 ffc7 	bl	8005890 <strstr>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d107      	bne.n	8002918 <parse_uart_command+0x238>
 8002908:	494b      	ldr	r1, [pc, #300]	@ (8002a38 <parse_uart_command+0x358>)
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f002 ffc0 	bl	8005890 <strstr>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 80db 	beq.w	8002ace <parse_uart_command+0x3ee>
      if (sscanf(time_pos, "%fUS", &new_time) == 1 || sscanf(time_pos, "%fus", &new_time) == 1)
 8002918:	f107 030c 	add.w	r3, r7, #12
 800291c:	461a      	mov	r2, r3
 800291e:	4947      	ldr	r1, [pc, #284]	@ (8002a3c <parse_uart_command+0x35c>)
 8002920:	6978      	ldr	r0, [r7, #20]
 8002922:	f002 ff7f 	bl	8005824 <siscanf>
 8002926:	4603      	mov	r3, r0
 8002928:	2b01      	cmp	r3, #1
 800292a:	d00a      	beq.n	8002942 <parse_uart_command+0x262>
 800292c:	f107 030c 	add.w	r3, r7, #12
 8002930:	461a      	mov	r2, r3
 8002932:	4943      	ldr	r1, [pc, #268]	@ (8002a40 <parse_uart_command+0x360>)
 8002934:	6978      	ldr	r0, [r7, #20]
 8002936:	f002 ff75 	bl	8005824 <siscanf>
 800293a:	4603      	mov	r3, r0
 800293c:	2b01      	cmp	r3, #1
 800293e:	f040 80c6 	bne.w	8002ace <parse_uart_command+0x3ee>
        time_base = new_time / 1000.0f; // 转换为ms
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	493f      	ldr	r1, [pc, #252]	@ (8002a44 <parse_uart_command+0x364>)
 8002946:	4618      	mov	r0, r3
 8002948:	f7fd ff86 	bl	8000858 <__aeabi_fdiv>
 800294c:	4603      	mov	r3, r0
 800294e:	461a      	mov	r2, r3
 8002950:	4b1d      	ldr	r3, [pc, #116]	@ (80029c8 <parse_uart_command+0x2e8>)
 8002952:	601a      	str	r2, [r3, #0]
}
 8002954:	e0bb      	b.n	8002ace <parse_uart_command+0x3ee>
  else if (strstr(command, ":TRIG:MODE"))
 8002956:	493c      	ldr	r1, [pc, #240]	@ (8002a48 <parse_uart_command+0x368>)
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f002 ff99 	bl	8005890 <strstr>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00d      	beq.n	8002980 <parse_uart_command+0x2a0>
    if (strstr(command, "EDGE"))
 8002964:	4939      	ldr	r1, [pc, #228]	@ (8002a4c <parse_uart_command+0x36c>)
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f002 ff92 	bl	8005890 <strstr>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80ad 	beq.w	8002ace <parse_uart_command+0x3ee>
      strcpy(trigger_mode, "EDGE");
 8002974:	4b1a      	ldr	r3, [pc, #104]	@ (80029e0 <parse_uart_command+0x300>)
 8002976:	4a1b      	ldr	r2, [pc, #108]	@ (80029e4 <parse_uart_command+0x304>)
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	2200      	movs	r2, #0
 800297c:	711a      	strb	r2, [r3, #4]
}
 800297e:	e0a6      	b.n	8002ace <parse_uart_command+0x3ee>
  else if (strstr(command, ":TRIG:LEV"))
 8002980:	4933      	ldr	r1, [pc, #204]	@ (8002a50 <parse_uart_command+0x370>)
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f002 ff84 	bl	8005890 <strstr>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d064      	beq.n	8002a58 <parse_uart_command+0x378>
    float level_change = 0;
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	60bb      	str	r3, [r7, #8]
    if (sscanf(command, ":TRIG:LEV %fV", &level_change) == 1)
 8002994:	f107 0308 	add.w	r3, r7, #8
 8002998:	461a      	mov	r2, r3
 800299a:	492e      	ldr	r1, [pc, #184]	@ (8002a54 <parse_uart_command+0x374>)
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f002 ff41 	bl	8005824 <siscanf>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	f040 8092 	bne.w	8002ace <parse_uart_command+0x3ee>
      trigger_level += level_change; // 相对变化
 80029aa:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <parse_uart_command+0x2f0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fd fd94 	bl	80004e0 <__addsf3>
 80029b8:	4603      	mov	r3, r0
 80029ba:	461a      	mov	r2, r3
 80029bc:	4b04      	ldr	r3, [pc, #16]	@ (80029d0 <parse_uart_command+0x2f0>)
 80029be:	601a      	str	r2, [r3, #0]
}
 80029c0:	e085      	b.n	8002ace <parse_uart_command+0x3ee>
 80029c2:	bf00      	nop
 80029c4:	08007578 	.word	0x08007578
 80029c8:	20000000 	.word	0x20000000
 80029cc:	20000004 	.word	0x20000004
 80029d0:	20000008 	.word	0x20000008
 80029d4:	2000000c 	.word	0x2000000c
 80029d8:	20000010 	.word	0x20000010
 80029dc:	08007584 	.word	0x08007584
 80029e0:	20000014 	.word	0x20000014
 80029e4:	45474445 	.word	0x45474445
 80029e8:	2000001c 	.word	0x2000001c
 80029ec:	08007588 	.word	0x08007588
 80029f0:	08007590 	.word	0x08007590
 80029f4:	2000000d 	.word	0x2000000d
 80029f8:	0800759c 	.word	0x0800759c
 80029fc:	080075a8 	.word	0x080075a8
 8002a00:	20000332 	.word	0x20000332
 8002a04:	080075b4 	.word	0x080075b4
 8002a08:	080075c0 	.word	0x080075c0
 8002a0c:	080075d0 	.word	0x080075d0
 8002a10:	080075d8 	.word	0x080075d8
 8002a14:	080075dc 	.word	0x080075dc
 8002a18:	080075ec 	.word	0x080075ec
 8002a1c:	080075f0 	.word	0x080075f0
 8002a20:	080075fc 	.word	0x080075fc
 8002a24:	08007608 	.word	0x08007608
 8002a28:	0800760c 	.word	0x0800760c
 8002a2c:	08007610 	.word	0x08007610
 8002a30:	08007618 	.word	0x08007618
 8002a34:	08007620 	.word	0x08007620
 8002a38:	08007624 	.word	0x08007624
 8002a3c:	08007628 	.word	0x08007628
 8002a40:	08007630 	.word	0x08007630
 8002a44:	447a0000 	.word	0x447a0000
 8002a48:	08007638 	.word	0x08007638
 8002a4c:	08007644 	.word	0x08007644
 8002a50:	0800764c 	.word	0x0800764c
 8002a54:	08007658 	.word	0x08007658
  else if (strstr(command, ":TRIG:SWEEP"))
 8002a58:	491f      	ldr	r1, [pc, #124]	@ (8002ad8 <parse_uart_command+0x3f8>)
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f002 ff18 	bl	8005890 <strstr>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d020      	beq.n	8002aa8 <parse_uart_command+0x3c8>
    if (strstr(command, "SINGLE"))
 8002a66:	491d      	ldr	r1, [pc, #116]	@ (8002adc <parse_uart_command+0x3fc>)
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f002 ff11 	bl	8005890 <strstr>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <parse_uart_command+0x3aa>
      strcpy(trigger_sweep, "SINGLE");
 8002a74:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae0 <parse_uart_command+0x400>)
 8002a76:	4a19      	ldr	r2, [pc, #100]	@ (8002adc <parse_uart_command+0x3fc>)
 8002a78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a7c:	6018      	str	r0, [r3, #0]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	8019      	strh	r1, [r3, #0]
 8002a82:	3302      	adds	r3, #2
 8002a84:	0c0a      	lsrs	r2, r1, #16
 8002a86:	701a      	strb	r2, [r3, #0]
}
 8002a88:	e021      	b.n	8002ace <parse_uart_command+0x3ee>
    else if (strstr(command, "AUTO"))
 8002a8a:	4916      	ldr	r1, [pc, #88]	@ (8002ae4 <parse_uart_command+0x404>)
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f002 feff 	bl	8005890 <strstr>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01a      	beq.n	8002ace <parse_uart_command+0x3ee>
      strcpy(trigger_sweep, "AUTO");
 8002a98:	4b11      	ldr	r3, [pc, #68]	@ (8002ae0 <parse_uart_command+0x400>)
 8002a9a:	4a12      	ldr	r2, [pc, #72]	@ (8002ae4 <parse_uart_command+0x404>)
 8002a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002aa0:	6018      	str	r0, [r3, #0]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	7019      	strb	r1, [r3, #0]
}
 8002aa6:	e012      	b.n	8002ace <parse_uart_command+0x3ee>
  else if (strstr(command, ":RUN"))
 8002aa8:	490f      	ldr	r1, [pc, #60]	@ (8002ae8 <parse_uart_command+0x408>)
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f002 fef0 	bl	8005890 <strstr>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00b      	beq.n	8002ace <parse_uart_command+0x3ee>
    run_state = !run_state; // 切换运行/停止状态
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8002aec <parse_uart_command+0x40c>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf0c      	ite	eq
 8002abe:	2301      	moveq	r3, #1
 8002ac0:	2300      	movne	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b09      	ldr	r3, [pc, #36]	@ (8002aec <parse_uart_command+0x40c>)
 8002ac8:	701a      	strb	r2, [r3, #0]
}
 8002aca:	e000      	b.n	8002ace <parse_uart_command+0x3ee>
      if (sscanf(time_pos, "%fMS", &new_time) == 1 || sscanf(time_pos, "%fms", &new_time) == 1)
 8002acc:	bf00      	nop
}
 8002ace:	bf00      	nop
 8002ad0:	3720      	adds	r7, #32
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	08007668 	.word	0x08007668
 8002adc:	08007674 	.word	0x08007674
 8002ae0:	2000001c 	.word	0x2000001c
 8002ae4:	08007588 	.word	0x08007588
 8002ae8:	0800767c 	.word	0x0800767c
 8002aec:	2000000c 	.word	0x2000000c

08002af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002af4:	b672      	cpsid	i
}
 8002af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002af8:	bf00      	nop
 8002afa:	e7fd      	b.n	8002af8 <Error_Handler+0x8>

08002afc <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b00:	4b17      	ldr	r3, [pc, #92]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b02:	4a18      	ldr	r2, [pc, #96]	@ (8002b64 <MX_SPI1_Init+0x68>)
 8002b04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b06:	4b16      	ldr	r3, [pc, #88]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b0e:	4b14      	ldr	r3, [pc, #80]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b14:	4b12      	ldr	r3, [pc, #72]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b1a:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b20:	4b0f      	ldr	r3, [pc, #60]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b26:	4b0e      	ldr	r3, [pc, #56]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b30:	2208      	movs	r2, #8
 8002b32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b34:	4b0a      	ldr	r3, [pc, #40]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b3a:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b40:	4b07      	ldr	r3, [pc, #28]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b46:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b48:	220a      	movs	r2, #10
 8002b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b4c:	4804      	ldr	r0, [pc, #16]	@ (8002b60 <MX_SPI1_Init+0x64>)
 8002b4e:	f001 fc43 	bl	80043d8 <HAL_SPI_Init>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b58:	f7ff ffca 	bl	8002af0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000380 	.word	0x20000380
 8002b64:	40013000 	.word	0x40013000

08002b68 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002b6c:	4b17      	ldr	r3, [pc, #92]	@ (8002bcc <MX_SPI2_Init+0x64>)
 8002b6e:	4a18      	ldr	r2, [pc, #96]	@ (8002bd0 <MX_SPI2_Init+0x68>)
 8002b70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b72:	4b16      	ldr	r3, [pc, #88]	@ (8002bcc <MX_SPI2_Init+0x64>)
 8002b74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b7a:	4b14      	ldr	r3, [pc, #80]	@ (8002bcc <MX_SPI2_Init+0x64>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b80:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <MX_SPI2_Init+0x64>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b86:	4b11      	ldr	r3, [pc, #68]	@ (8002bcc <MX_SPI2_Init+0x64>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bcc <MX_SPI2_Init+0x64>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b92:	4b0e      	ldr	r3, [pc, #56]	@ (8002bcc <MX_SPI2_Init+0x64>)
 8002b94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bcc <MX_SPI2_Init+0x64>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bcc <MX_SPI2_Init+0x64>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ba6:	4b09      	ldr	r3, [pc, #36]	@ (8002bcc <MX_SPI2_Init+0x64>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bac:	4b07      	ldr	r3, [pc, #28]	@ (8002bcc <MX_SPI2_Init+0x64>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002bb2:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <MX_SPI2_Init+0x64>)
 8002bb4:	220a      	movs	r2, #10
 8002bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002bb8:	4804      	ldr	r0, [pc, #16]	@ (8002bcc <MX_SPI2_Init+0x64>)
 8002bba:	f001 fc0d 	bl	80043d8 <HAL_SPI_Init>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002bc4:	f7ff ff94 	bl	8002af0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200003d8 	.word	0x200003d8
 8002bd0:	40003800 	.word	0x40003800

08002bd4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	@ 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 0318 	add.w	r3, r7, #24
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a52      	ldr	r2, [pc, #328]	@ (8002d38 <HAL_SPI_MspInit+0x164>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d14b      	bne.n	8002c8c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bf4:	4b51      	ldr	r3, [pc, #324]	@ (8002d3c <HAL_SPI_MspInit+0x168>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	4a50      	ldr	r2, [pc, #320]	@ (8002d3c <HAL_SPI_MspInit+0x168>)
 8002bfa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bfe:	6193      	str	r3, [r2, #24]
 8002c00:	4b4e      	ldr	r3, [pc, #312]	@ (8002d3c <HAL_SPI_MspInit+0x168>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0c:	4b4b      	ldr	r3, [pc, #300]	@ (8002d3c <HAL_SPI_MspInit+0x168>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	4a4a      	ldr	r2, [pc, #296]	@ (8002d3c <HAL_SPI_MspInit+0x168>)
 8002c12:	f043 0304 	orr.w	r3, r3, #4
 8002c16:	6193      	str	r3, [r2, #24]
 8002c18:	4b48      	ldr	r3, [pc, #288]	@ (8002d3c <HAL_SPI_MspInit+0x168>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002c24:	23a0      	movs	r3, #160	@ 0xa0
 8002c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c30:	f107 0318 	add.w	r3, r7, #24
 8002c34:	4619      	mov	r1, r3
 8002c36:	4842      	ldr	r0, [pc, #264]	@ (8002d40 <HAL_SPI_MspInit+0x16c>)
 8002c38:	f000 fe22 	bl	8003880 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002c3c:	4b41      	ldr	r3, [pc, #260]	@ (8002d44 <HAL_SPI_MspInit+0x170>)
 8002c3e:	4a42      	ldr	r2, [pc, #264]	@ (8002d48 <HAL_SPI_MspInit+0x174>)
 8002c40:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c42:	4b40      	ldr	r3, [pc, #256]	@ (8002d44 <HAL_SPI_MspInit+0x170>)
 8002c44:	2210      	movs	r2, #16
 8002c46:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c48:	4b3e      	ldr	r3, [pc, #248]	@ (8002d44 <HAL_SPI_MspInit+0x170>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d44 <HAL_SPI_MspInit+0x170>)
 8002c50:	2280      	movs	r2, #128	@ 0x80
 8002c52:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c54:	4b3b      	ldr	r3, [pc, #236]	@ (8002d44 <HAL_SPI_MspInit+0x170>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c5a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d44 <HAL_SPI_MspInit+0x170>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002c60:	4b38      	ldr	r3, [pc, #224]	@ (8002d44 <HAL_SPI_MspInit+0x170>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002c66:	4b37      	ldr	r3, [pc, #220]	@ (8002d44 <HAL_SPI_MspInit+0x170>)
 8002c68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c6c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002c6e:	4835      	ldr	r0, [pc, #212]	@ (8002d44 <HAL_SPI_MspInit+0x170>)
 8002c70:	f000 fb64 	bl	800333c <HAL_DMA_Init>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 8002c7a:	f7ff ff39 	bl	8002af0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a30      	ldr	r2, [pc, #192]	@ (8002d44 <HAL_SPI_MspInit+0x170>)
 8002c82:	649a      	str	r2, [r3, #72]	@ 0x48
 8002c84:	4a2f      	ldr	r2, [pc, #188]	@ (8002d44 <HAL_SPI_MspInit+0x170>)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002c8a:	e050      	b.n	8002d2e <HAL_SPI_MspInit+0x15a>
  else if(spiHandle->Instance==SPI2)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a2e      	ldr	r2, [pc, #184]	@ (8002d4c <HAL_SPI_MspInit+0x178>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d14b      	bne.n	8002d2e <HAL_SPI_MspInit+0x15a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c96:	4b29      	ldr	r3, [pc, #164]	@ (8002d3c <HAL_SPI_MspInit+0x168>)
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	4a28      	ldr	r2, [pc, #160]	@ (8002d3c <HAL_SPI_MspInit+0x168>)
 8002c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ca0:	61d3      	str	r3, [r2, #28]
 8002ca2:	4b26      	ldr	r3, [pc, #152]	@ (8002d3c <HAL_SPI_MspInit+0x168>)
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cae:	4b23      	ldr	r3, [pc, #140]	@ (8002d3c <HAL_SPI_MspInit+0x168>)
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	4a22      	ldr	r2, [pc, #136]	@ (8002d3c <HAL_SPI_MspInit+0x168>)
 8002cb4:	f043 0308 	orr.w	r3, r3, #8
 8002cb8:	6193      	str	r3, [r2, #24]
 8002cba:	4b20      	ldr	r3, [pc, #128]	@ (8002d3c <HAL_SPI_MspInit+0x168>)
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002cc6:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd4:	f107 0318 	add.w	r3, r7, #24
 8002cd8:	4619      	mov	r1, r3
 8002cda:	481d      	ldr	r0, [pc, #116]	@ (8002d50 <HAL_SPI_MspInit+0x17c>)
 8002cdc:	f000 fdd0 	bl	8003880 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d54 <HAL_SPI_MspInit+0x180>)
 8002ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8002d58 <HAL_SPI_MspInit+0x184>)
 8002ce4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d54 <HAL_SPI_MspInit+0x180>)
 8002ce8:	2210      	movs	r2, #16
 8002cea:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cec:	4b19      	ldr	r3, [pc, #100]	@ (8002d54 <HAL_SPI_MspInit+0x180>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cf2:	4b18      	ldr	r3, [pc, #96]	@ (8002d54 <HAL_SPI_MspInit+0x180>)
 8002cf4:	2280      	movs	r2, #128	@ 0x80
 8002cf6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cf8:	4b16      	ldr	r3, [pc, #88]	@ (8002d54 <HAL_SPI_MspInit+0x180>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cfe:	4b15      	ldr	r3, [pc, #84]	@ (8002d54 <HAL_SPI_MspInit+0x180>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002d04:	4b13      	ldr	r3, [pc, #76]	@ (8002d54 <HAL_SPI_MspInit+0x180>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002d0a:	4b12      	ldr	r3, [pc, #72]	@ (8002d54 <HAL_SPI_MspInit+0x180>)
 8002d0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d10:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002d12:	4810      	ldr	r0, [pc, #64]	@ (8002d54 <HAL_SPI_MspInit+0x180>)
 8002d14:	f000 fb12 	bl	800333c <HAL_DMA_Init>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_SPI_MspInit+0x14e>
      Error_Handler();
 8002d1e:	f7ff fee7 	bl	8002af0 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a0b      	ldr	r2, [pc, #44]	@ (8002d54 <HAL_SPI_MspInit+0x180>)
 8002d26:	649a      	str	r2, [r3, #72]	@ 0x48
 8002d28:	4a0a      	ldr	r2, [pc, #40]	@ (8002d54 <HAL_SPI_MspInit+0x180>)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8002d2e:	bf00      	nop
 8002d30:	3728      	adds	r7, #40	@ 0x28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40013000 	.word	0x40013000
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40010800 	.word	0x40010800
 8002d44:	20000430 	.word	0x20000430
 8002d48:	40020030 	.word	0x40020030
 8002d4c:	40003800 	.word	0x40003800
 8002d50:	40010c00 	.word	0x40010c00
 8002d54:	20000474 	.word	0x20000474
 8002d58:	40020058 	.word	0x40020058

08002d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d62:	4b15      	ldr	r3, [pc, #84]	@ (8002db8 <HAL_MspInit+0x5c>)
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	4a14      	ldr	r2, [pc, #80]	@ (8002db8 <HAL_MspInit+0x5c>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6193      	str	r3, [r2, #24]
 8002d6e:	4b12      	ldr	r3, [pc, #72]	@ (8002db8 <HAL_MspInit+0x5c>)
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002db8 <HAL_MspInit+0x5c>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8002db8 <HAL_MspInit+0x5c>)
 8002d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d84:	61d3      	str	r3, [r2, #28]
 8002d86:	4b0c      	ldr	r3, [pc, #48]	@ (8002db8 <HAL_MspInit+0x5c>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d92:	4b0a      	ldr	r3, [pc, #40]	@ (8002dbc <HAL_MspInit+0x60>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	4a04      	ldr	r2, [pc, #16]	@ (8002dbc <HAL_MspInit+0x60>)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dae:	bf00      	nop
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40010000 	.word	0x40010000

08002dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002dc4:	bf00      	nop
 8002dc6:	e7fd      	b.n	8002dc4 <NMI_Handler+0x4>

08002dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dcc:	bf00      	nop
 8002dce:	e7fd      	b.n	8002dcc <HardFault_Handler+0x4>

08002dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd4:	bf00      	nop
 8002dd6:	e7fd      	b.n	8002dd4 <MemManage_Handler+0x4>

08002dd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ddc:	bf00      	nop
 8002dde:	e7fd      	b.n	8002ddc <BusFault_Handler+0x4>

08002de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de4:	bf00      	nop
 8002de6:	e7fd      	b.n	8002de4 <UsageFault_Handler+0x4>

08002de8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e10:	f000 f946 	bl	80030a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002e1c:	4802      	ldr	r0, [pc, #8]	@ (8002e28 <DMA1_Channel3_IRQHandler+0x10>)
 8002e1e:	f000 fbfb 	bl	8003618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000430 	.word	0x20000430

08002e2c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002e30:	4802      	ldr	r0, [pc, #8]	@ (8002e3c <DMA1_Channel5_IRQHandler+0x10>)
 8002e32:	f000 fbf1 	bl	8003618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000474 	.word	0x20000474

08002e40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e44:	4802      	ldr	r0, [pc, #8]	@ (8002e50 <USART1_IRQHandler+0x10>)
 8002e46:	f001 ff03 	bl	8004c50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200004bc 	.word	0x200004bc

08002e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e5c:	4a14      	ldr	r2, [pc, #80]	@ (8002eb0 <_sbrk+0x5c>)
 8002e5e:	4b15      	ldr	r3, [pc, #84]	@ (8002eb4 <_sbrk+0x60>)
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e68:	4b13      	ldr	r3, [pc, #76]	@ (8002eb8 <_sbrk+0x64>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d102      	bne.n	8002e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e70:	4b11      	ldr	r3, [pc, #68]	@ (8002eb8 <_sbrk+0x64>)
 8002e72:	4a12      	ldr	r2, [pc, #72]	@ (8002ebc <_sbrk+0x68>)
 8002e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e76:	4b10      	ldr	r3, [pc, #64]	@ (8002eb8 <_sbrk+0x64>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d207      	bcs.n	8002e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e84:	f002 fd2a 	bl	80058dc <__errno>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	220c      	movs	r2, #12
 8002e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e92:	e009      	b.n	8002ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e94:	4b08      	ldr	r3, [pc, #32]	@ (8002eb8 <_sbrk+0x64>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e9a:	4b07      	ldr	r3, [pc, #28]	@ (8002eb8 <_sbrk+0x64>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	4a05      	ldr	r2, [pc, #20]	@ (8002eb8 <_sbrk+0x64>)
 8002ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20005000 	.word	0x20005000
 8002eb4:	00000400 	.word	0x00000400
 8002eb8:	200004b8 	.word	0x200004b8
 8002ebc:	20000650 	.word	0x20000650

08002ec0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ed0:	4b11      	ldr	r3, [pc, #68]	@ (8002f18 <MX_USART1_UART_Init+0x4c>)
 8002ed2:	4a12      	ldr	r2, [pc, #72]	@ (8002f1c <MX_USART1_UART_Init+0x50>)
 8002ed4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ed6:	4b10      	ldr	r3, [pc, #64]	@ (8002f18 <MX_USART1_UART_Init+0x4c>)
 8002ed8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002edc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ede:	4b0e      	ldr	r3, [pc, #56]	@ (8002f18 <MX_USART1_UART_Init+0x4c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f18 <MX_USART1_UART_Init+0x4c>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eea:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <MX_USART1_UART_Init+0x4c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ef0:	4b09      	ldr	r3, [pc, #36]	@ (8002f18 <MX_USART1_UART_Init+0x4c>)
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ef6:	4b08      	ldr	r3, [pc, #32]	@ (8002f18 <MX_USART1_UART_Init+0x4c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002efc:	4b06      	ldr	r3, [pc, #24]	@ (8002f18 <MX_USART1_UART_Init+0x4c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f02:	4805      	ldr	r0, [pc, #20]	@ (8002f18 <MX_USART1_UART_Init+0x4c>)
 8002f04:	f001 fe2f 	bl	8004b66 <HAL_UART_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f0e:	f7ff fdef 	bl	8002af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	200004bc 	.word	0x200004bc
 8002f1c:	40013800 	.word	0x40013800

08002f20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f28:	f107 0310 	add.w	r3, r7, #16
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a20      	ldr	r2, [pc, #128]	@ (8002fbc <HAL_UART_MspInit+0x9c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d139      	bne.n	8002fb4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f40:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc0 <HAL_UART_MspInit+0xa0>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	4a1e      	ldr	r2, [pc, #120]	@ (8002fc0 <HAL_UART_MspInit+0xa0>)
 8002f46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f4a:	6193      	str	r3, [r2, #24]
 8002f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc0 <HAL_UART_MspInit+0xa0>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f58:	4b19      	ldr	r3, [pc, #100]	@ (8002fc0 <HAL_UART_MspInit+0xa0>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	4a18      	ldr	r2, [pc, #96]	@ (8002fc0 <HAL_UART_MspInit+0xa0>)
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	6193      	str	r3, [r2, #24]
 8002f64:	4b16      	ldr	r3, [pc, #88]	@ (8002fc0 <HAL_UART_MspInit+0xa0>)
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f76:	2302      	movs	r3, #2
 8002f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7e:	f107 0310 	add.w	r3, r7, #16
 8002f82:	4619      	mov	r1, r3
 8002f84:	480f      	ldr	r0, [pc, #60]	@ (8002fc4 <HAL_UART_MspInit+0xa4>)
 8002f86:	f000 fc7b 	bl	8003880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f98:	f107 0310 	add.w	r3, r7, #16
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4809      	ldr	r0, [pc, #36]	@ (8002fc4 <HAL_UART_MspInit+0xa4>)
 8002fa0:	f000 fc6e 	bl	8003880 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	2025      	movs	r0, #37	@ 0x25
 8002faa:	f000 f990 	bl	80032ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fae:	2025      	movs	r0, #37	@ 0x25
 8002fb0:	f000 f9a9 	bl	8003306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	3720      	adds	r7, #32
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40013800 	.word	0x40013800
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40010800 	.word	0x40010800

08002fc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fc8:	f7ff ff7a 	bl	8002ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fcc:	480b      	ldr	r0, [pc, #44]	@ (8002ffc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002fce:	490c      	ldr	r1, [pc, #48]	@ (8003000 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8003004 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fd4:	e002      	b.n	8002fdc <LoopCopyDataInit>

08002fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fda:	3304      	adds	r3, #4

08002fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe0:	d3f9      	bcc.n	8002fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fe2:	4a09      	ldr	r2, [pc, #36]	@ (8003008 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002fe4:	4c09      	ldr	r4, [pc, #36]	@ (800300c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fe8:	e001      	b.n	8002fee <LoopFillZerobss>

08002fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fec:	3204      	adds	r2, #4

08002fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff0:	d3fb      	bcc.n	8002fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ff2:	f002 fc79 	bl	80058e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ff6:	f7fe ff47 	bl	8001e88 <main>
  bx lr
 8002ffa:	4770      	bx	lr
  ldr r0, =_sdata
 8002ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003000:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003004:	08008890 	.word	0x08008890
  ldr r2, =_sbss
 8003008:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800300c:	20000650 	.word	0x20000650

08003010 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003010:	e7fe      	b.n	8003010 <ADC1_2_IRQHandler>
	...

08003014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003018:	4b08      	ldr	r3, [pc, #32]	@ (800303c <HAL_Init+0x28>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a07      	ldr	r2, [pc, #28]	@ (800303c <HAL_Init+0x28>)
 800301e:	f043 0310 	orr.w	r3, r3, #16
 8003022:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003024:	2003      	movs	r0, #3
 8003026:	f000 f947 	bl	80032b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800302a:	200f      	movs	r0, #15
 800302c:	f000 f808 	bl	8003040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003030:	f7ff fe94 	bl	8002d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40022000 	.word	0x40022000

08003040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003048:	4b12      	ldr	r3, [pc, #72]	@ (8003094 <HAL_InitTick+0x54>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4b12      	ldr	r3, [pc, #72]	@ (8003098 <HAL_InitTick+0x58>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	4619      	mov	r1, r3
 8003052:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003056:	fbb3 f3f1 	udiv	r3, r3, r1
 800305a:	fbb2 f3f3 	udiv	r3, r2, r3
 800305e:	4618      	mov	r0, r3
 8003060:	f000 f95f 	bl	8003322 <HAL_SYSTICK_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e00e      	b.n	800308c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b0f      	cmp	r3, #15
 8003072:	d80a      	bhi.n	800308a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003074:	2200      	movs	r2, #0
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	f04f 30ff 	mov.w	r0, #4294967295
 800307c:	f000 f927 	bl	80032ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003080:	4a06      	ldr	r2, [pc, #24]	@ (800309c <HAL_InitTick+0x5c>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	e000      	b.n	800308c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000030 	.word	0x20000030
 8003098:	20000038 	.word	0x20000038
 800309c:	20000034 	.word	0x20000034

080030a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030a4:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <HAL_IncTick+0x1c>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b05      	ldr	r3, [pc, #20]	@ (80030c0 <HAL_IncTick+0x20>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4413      	add	r3, r2
 80030b0:	4a03      	ldr	r2, [pc, #12]	@ (80030c0 <HAL_IncTick+0x20>)
 80030b2:	6013      	str	r3, [r2, #0]
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr
 80030bc:	20000038 	.word	0x20000038
 80030c0:	20000504 	.word	0x20000504

080030c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return uwTick;
 80030c8:	4b02      	ldr	r3, [pc, #8]	@ (80030d4 <HAL_GetTick+0x10>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	20000504 	.word	0x20000504

080030d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030e0:	f7ff fff0 	bl	80030c4 <HAL_GetTick>
 80030e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f0:	d005      	beq.n	80030fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030f2:	4b0a      	ldr	r3, [pc, #40]	@ (800311c <HAL_Delay+0x44>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030fe:	bf00      	nop
 8003100:	f7ff ffe0 	bl	80030c4 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	429a      	cmp	r2, r3
 800310e:	d8f7      	bhi.n	8003100 <HAL_Delay+0x28>
  {
  }
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000038 	.word	0x20000038

08003120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003130:	4b0c      	ldr	r3, [pc, #48]	@ (8003164 <__NVIC_SetPriorityGrouping+0x44>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800313c:	4013      	ands	r3, r2
 800313e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003148:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800314c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003152:	4a04      	ldr	r2, [pc, #16]	@ (8003164 <__NVIC_SetPriorityGrouping+0x44>)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	60d3      	str	r3, [r2, #12]
}
 8003158:	bf00      	nop
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800316c:	4b04      	ldr	r3, [pc, #16]	@ (8003180 <__NVIC_GetPriorityGrouping+0x18>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	0a1b      	lsrs	r3, r3, #8
 8003172:	f003 0307 	and.w	r3, r3, #7
}
 8003176:	4618      	mov	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003192:	2b00      	cmp	r3, #0
 8003194:	db0b      	blt.n	80031ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	f003 021f 	and.w	r2, r3, #31
 800319c:	4906      	ldr	r1, [pc, #24]	@ (80031b8 <__NVIC_EnableIRQ+0x34>)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	2001      	movs	r0, #1
 80031a6:	fa00 f202 	lsl.w	r2, r0, r2
 80031aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	e000e100 	.word	0xe000e100

080031bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	6039      	str	r1, [r7, #0]
 80031c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	db0a      	blt.n	80031e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	490c      	ldr	r1, [pc, #48]	@ (8003208 <__NVIC_SetPriority+0x4c>)
 80031d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031da:	0112      	lsls	r2, r2, #4
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	440b      	add	r3, r1
 80031e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031e4:	e00a      	b.n	80031fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	4908      	ldr	r1, [pc, #32]	@ (800320c <__NVIC_SetPriority+0x50>)
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	3b04      	subs	r3, #4
 80031f4:	0112      	lsls	r2, r2, #4
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	440b      	add	r3, r1
 80031fa:	761a      	strb	r2, [r3, #24]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000e100 	.word	0xe000e100
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003210:	b480      	push	{r7}
 8003212:	b089      	sub	sp, #36	@ 0x24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f1c3 0307 	rsb	r3, r3, #7
 800322a:	2b04      	cmp	r3, #4
 800322c:	bf28      	it	cs
 800322e:	2304      	movcs	r3, #4
 8003230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3304      	adds	r3, #4
 8003236:	2b06      	cmp	r3, #6
 8003238:	d902      	bls.n	8003240 <NVIC_EncodePriority+0x30>
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3b03      	subs	r3, #3
 800323e:	e000      	b.n	8003242 <NVIC_EncodePriority+0x32>
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	f04f 32ff 	mov.w	r2, #4294967295
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43da      	mvns	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	401a      	ands	r2, r3
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003258:	f04f 31ff 	mov.w	r1, #4294967295
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	43d9      	mvns	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003268:	4313      	orrs	r3, r2
         );
}
 800326a:	4618      	mov	r0, r3
 800326c:	3724      	adds	r7, #36	@ 0x24
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3b01      	subs	r3, #1
 8003280:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003284:	d301      	bcc.n	800328a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003286:	2301      	movs	r3, #1
 8003288:	e00f      	b.n	80032aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800328a:	4a0a      	ldr	r2, [pc, #40]	@ (80032b4 <SysTick_Config+0x40>)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3b01      	subs	r3, #1
 8003290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003292:	210f      	movs	r1, #15
 8003294:	f04f 30ff 	mov.w	r0, #4294967295
 8003298:	f7ff ff90 	bl	80031bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800329c:	4b05      	ldr	r3, [pc, #20]	@ (80032b4 <SysTick_Config+0x40>)
 800329e:	2200      	movs	r2, #0
 80032a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032a2:	4b04      	ldr	r3, [pc, #16]	@ (80032b4 <SysTick_Config+0x40>)
 80032a4:	2207      	movs	r2, #7
 80032a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	e000e010 	.word	0xe000e010

080032b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff ff2d 	bl	8003120 <__NVIC_SetPriorityGrouping>
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b086      	sub	sp, #24
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	4603      	mov	r3, r0
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032e0:	f7ff ff42 	bl	8003168 <__NVIC_GetPriorityGrouping>
 80032e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	6978      	ldr	r0, [r7, #20]
 80032ec:	f7ff ff90 	bl	8003210 <NVIC_EncodePriority>
 80032f0:	4602      	mov	r2, r0
 80032f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f6:	4611      	mov	r1, r2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff5f 	bl	80031bc <__NVIC_SetPriority>
}
 80032fe:	bf00      	nop
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	4603      	mov	r3, r0
 800330e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff35 	bl	8003184 <__NVIC_EnableIRQ>
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff ffa2 	bl	8003274 <SysTick_Config>
 8003330:	4603      	mov	r3, r0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e043      	b.n	80033da <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	4b22      	ldr	r3, [pc, #136]	@ (80033e4 <HAL_DMA_Init+0xa8>)
 800335a:	4413      	add	r3, r2
 800335c:	4a22      	ldr	r2, [pc, #136]	@ (80033e8 <HAL_DMA_Init+0xac>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	091b      	lsrs	r3, r3, #4
 8003364:	009a      	lsls	r2, r3, #2
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a1f      	ldr	r2, [pc, #124]	@ (80033ec <HAL_DMA_Init+0xb0>)
 800336e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003386:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800338a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003394:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr
 80033e4:	bffdfff8 	.word	0xbffdfff8
 80033e8:	cccccccd 	.word	0xcccccccd
 80033ec:	40020000 	.word	0x40020000

080033f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_DMA_Start_IT+0x20>
 800340c:	2302      	movs	r3, #2
 800340e:	e04b      	b.n	80034a8 <HAL_DMA_Start_IT+0xb8>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b01      	cmp	r3, #1
 8003422:	d13a      	bne.n	800349a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0201 	bic.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f9eb 	bl	8003824 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003452:	2b00      	cmp	r3, #0
 8003454:	d008      	beq.n	8003468 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 020e 	orr.w	r2, r2, #14
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	e00f      	b.n	8003488 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0204 	bic.w	r2, r2, #4
 8003476:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 020a 	orr.w	r2, r2, #10
 8003486:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	e005      	b.n	80034a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80034a2:	2302      	movs	r3, #2
 80034a4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80034a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d008      	beq.n	80034da <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2204      	movs	r2, #4
 80034cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e020      	b.n	800351c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 020e 	bic.w	r2, r2, #14
 80034e8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0201 	bic.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003502:	2101      	movs	r1, #1
 8003504:	fa01 f202 	lsl.w	r2, r1, r2
 8003508:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800351a:	7bfb      	ldrb	r3, [r7, #15]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr
	...

08003528 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d005      	beq.n	800354c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2204      	movs	r2, #4
 8003544:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]
 800354a:	e051      	b.n	80035f0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 020e 	bic.w	r2, r2, #14
 800355a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a22      	ldr	r2, [pc, #136]	@ (80035fc <HAL_DMA_Abort_IT+0xd4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d029      	beq.n	80035ca <HAL_DMA_Abort_IT+0xa2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a21      	ldr	r2, [pc, #132]	@ (8003600 <HAL_DMA_Abort_IT+0xd8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d022      	beq.n	80035c6 <HAL_DMA_Abort_IT+0x9e>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a1f      	ldr	r2, [pc, #124]	@ (8003604 <HAL_DMA_Abort_IT+0xdc>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d01a      	beq.n	80035c0 <HAL_DMA_Abort_IT+0x98>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a1e      	ldr	r2, [pc, #120]	@ (8003608 <HAL_DMA_Abort_IT+0xe0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d012      	beq.n	80035ba <HAL_DMA_Abort_IT+0x92>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a1c      	ldr	r2, [pc, #112]	@ (800360c <HAL_DMA_Abort_IT+0xe4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00a      	beq.n	80035b4 <HAL_DMA_Abort_IT+0x8c>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003610 <HAL_DMA_Abort_IT+0xe8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d102      	bne.n	80035ae <HAL_DMA_Abort_IT+0x86>
 80035a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80035ac:	e00e      	b.n	80035cc <HAL_DMA_Abort_IT+0xa4>
 80035ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035b2:	e00b      	b.n	80035cc <HAL_DMA_Abort_IT+0xa4>
 80035b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035b8:	e008      	b.n	80035cc <HAL_DMA_Abort_IT+0xa4>
 80035ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035be:	e005      	b.n	80035cc <HAL_DMA_Abort_IT+0xa4>
 80035c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035c4:	e002      	b.n	80035cc <HAL_DMA_Abort_IT+0xa4>
 80035c6:	2310      	movs	r3, #16
 80035c8:	e000      	b.n	80035cc <HAL_DMA_Abort_IT+0xa4>
 80035ca:	2301      	movs	r3, #1
 80035cc:	4a11      	ldr	r2, [pc, #68]	@ (8003614 <HAL_DMA_Abort_IT+0xec>)
 80035ce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	4798      	blx	r3
    } 
  }
  return status;
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40020008 	.word	0x40020008
 8003600:	4002001c 	.word	0x4002001c
 8003604:	40020030 	.word	0x40020030
 8003608:	40020044 	.word	0x40020044
 800360c:	40020058 	.word	0x40020058
 8003610:	4002006c 	.word	0x4002006c
 8003614:	40020000 	.word	0x40020000

08003618 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003634:	2204      	movs	r2, #4
 8003636:	409a      	lsls	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d04f      	beq.n	80036e0 <HAL_DMA_IRQHandler+0xc8>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	d04a      	beq.n	80036e0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d107      	bne.n	8003668 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0204 	bic.w	r2, r2, #4
 8003666:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a66      	ldr	r2, [pc, #408]	@ (8003808 <HAL_DMA_IRQHandler+0x1f0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d029      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xae>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a65      	ldr	r2, [pc, #404]	@ (800380c <HAL_DMA_IRQHandler+0x1f4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d022      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xaa>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a63      	ldr	r2, [pc, #396]	@ (8003810 <HAL_DMA_IRQHandler+0x1f8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d01a      	beq.n	80036bc <HAL_DMA_IRQHandler+0xa4>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a62      	ldr	r2, [pc, #392]	@ (8003814 <HAL_DMA_IRQHandler+0x1fc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d012      	beq.n	80036b6 <HAL_DMA_IRQHandler+0x9e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a60      	ldr	r2, [pc, #384]	@ (8003818 <HAL_DMA_IRQHandler+0x200>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00a      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x98>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a5f      	ldr	r2, [pc, #380]	@ (800381c <HAL_DMA_IRQHandler+0x204>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d102      	bne.n	80036aa <HAL_DMA_IRQHandler+0x92>
 80036a4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80036a8:	e00e      	b.n	80036c8 <HAL_DMA_IRQHandler+0xb0>
 80036aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80036ae:	e00b      	b.n	80036c8 <HAL_DMA_IRQHandler+0xb0>
 80036b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80036b4:	e008      	b.n	80036c8 <HAL_DMA_IRQHandler+0xb0>
 80036b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036ba:	e005      	b.n	80036c8 <HAL_DMA_IRQHandler+0xb0>
 80036bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036c0:	e002      	b.n	80036c8 <HAL_DMA_IRQHandler+0xb0>
 80036c2:	2340      	movs	r3, #64	@ 0x40
 80036c4:	e000      	b.n	80036c8 <HAL_DMA_IRQHandler+0xb0>
 80036c6:	2304      	movs	r3, #4
 80036c8:	4a55      	ldr	r2, [pc, #340]	@ (8003820 <HAL_DMA_IRQHandler+0x208>)
 80036ca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8094 	beq.w	80037fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80036de:	e08e      	b.n	80037fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	2202      	movs	r2, #2
 80036e6:	409a      	lsls	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d056      	beq.n	800379e <HAL_DMA_IRQHandler+0x186>
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d051      	beq.n	800379e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10b      	bne.n	8003720 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 020a 	bic.w	r2, r2, #10
 8003716:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a38      	ldr	r2, [pc, #224]	@ (8003808 <HAL_DMA_IRQHandler+0x1f0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d029      	beq.n	800377e <HAL_DMA_IRQHandler+0x166>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a37      	ldr	r2, [pc, #220]	@ (800380c <HAL_DMA_IRQHandler+0x1f4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d022      	beq.n	800377a <HAL_DMA_IRQHandler+0x162>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a35      	ldr	r2, [pc, #212]	@ (8003810 <HAL_DMA_IRQHandler+0x1f8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d01a      	beq.n	8003774 <HAL_DMA_IRQHandler+0x15c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a34      	ldr	r2, [pc, #208]	@ (8003814 <HAL_DMA_IRQHandler+0x1fc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d012      	beq.n	800376e <HAL_DMA_IRQHandler+0x156>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a32      	ldr	r2, [pc, #200]	@ (8003818 <HAL_DMA_IRQHandler+0x200>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00a      	beq.n	8003768 <HAL_DMA_IRQHandler+0x150>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a31      	ldr	r2, [pc, #196]	@ (800381c <HAL_DMA_IRQHandler+0x204>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d102      	bne.n	8003762 <HAL_DMA_IRQHandler+0x14a>
 800375c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003760:	e00e      	b.n	8003780 <HAL_DMA_IRQHandler+0x168>
 8003762:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003766:	e00b      	b.n	8003780 <HAL_DMA_IRQHandler+0x168>
 8003768:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800376c:	e008      	b.n	8003780 <HAL_DMA_IRQHandler+0x168>
 800376e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003772:	e005      	b.n	8003780 <HAL_DMA_IRQHandler+0x168>
 8003774:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003778:	e002      	b.n	8003780 <HAL_DMA_IRQHandler+0x168>
 800377a:	2320      	movs	r3, #32
 800377c:	e000      	b.n	8003780 <HAL_DMA_IRQHandler+0x168>
 800377e:	2302      	movs	r3, #2
 8003780:	4a27      	ldr	r2, [pc, #156]	@ (8003820 <HAL_DMA_IRQHandler+0x208>)
 8003782:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003790:	2b00      	cmp	r3, #0
 8003792:	d034      	beq.n	80037fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800379c:	e02f      	b.n	80037fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	2208      	movs	r2, #8
 80037a4:	409a      	lsls	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4013      	ands	r3, r2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d028      	beq.n	8003800 <HAL_DMA_IRQHandler+0x1e8>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d023      	beq.n	8003800 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 020e 	bic.w	r2, r2, #14
 80037c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d0:	2101      	movs	r1, #1
 80037d2:	fa01 f202 	lsl.w	r2, r1, r2
 80037d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d004      	beq.n	8003800 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	4798      	blx	r3
    }
  }
  return;
 80037fe:	bf00      	nop
 8003800:	bf00      	nop
}
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40020008 	.word	0x40020008
 800380c:	4002001c 	.word	0x4002001c
 8003810:	40020030 	.word	0x40020030
 8003814:	40020044 	.word	0x40020044
 8003818:	40020058 	.word	0x40020058
 800381c:	4002006c 	.word	0x4002006c
 8003820:	40020000 	.word	0x40020000

08003824 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800383a:	2101      	movs	r1, #1
 800383c:	fa01 f202 	lsl.w	r2, r1, r2
 8003840:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b10      	cmp	r3, #16
 8003850:	d108      	bne.n	8003864 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003862:	e007      	b.n	8003874 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	60da      	str	r2, [r3, #12]
}
 8003874:	bf00      	nop
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr
	...

08003880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003880:	b480      	push	{r7}
 8003882:	b08b      	sub	sp, #44	@ 0x2c
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800388a:	2300      	movs	r3, #0
 800388c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800388e:	2300      	movs	r3, #0
 8003890:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003892:	e169      	b.n	8003b68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003894:	2201      	movs	r2, #1
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69fa      	ldr	r2, [r7, #28]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	f040 8158 	bne.w	8003b62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	4a9a      	ldr	r2, [pc, #616]	@ (8003b20 <HAL_GPIO_Init+0x2a0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d05e      	beq.n	800397a <HAL_GPIO_Init+0xfa>
 80038bc:	4a98      	ldr	r2, [pc, #608]	@ (8003b20 <HAL_GPIO_Init+0x2a0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d875      	bhi.n	80039ae <HAL_GPIO_Init+0x12e>
 80038c2:	4a98      	ldr	r2, [pc, #608]	@ (8003b24 <HAL_GPIO_Init+0x2a4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d058      	beq.n	800397a <HAL_GPIO_Init+0xfa>
 80038c8:	4a96      	ldr	r2, [pc, #600]	@ (8003b24 <HAL_GPIO_Init+0x2a4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d86f      	bhi.n	80039ae <HAL_GPIO_Init+0x12e>
 80038ce:	4a96      	ldr	r2, [pc, #600]	@ (8003b28 <HAL_GPIO_Init+0x2a8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d052      	beq.n	800397a <HAL_GPIO_Init+0xfa>
 80038d4:	4a94      	ldr	r2, [pc, #592]	@ (8003b28 <HAL_GPIO_Init+0x2a8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d869      	bhi.n	80039ae <HAL_GPIO_Init+0x12e>
 80038da:	4a94      	ldr	r2, [pc, #592]	@ (8003b2c <HAL_GPIO_Init+0x2ac>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d04c      	beq.n	800397a <HAL_GPIO_Init+0xfa>
 80038e0:	4a92      	ldr	r2, [pc, #584]	@ (8003b2c <HAL_GPIO_Init+0x2ac>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d863      	bhi.n	80039ae <HAL_GPIO_Init+0x12e>
 80038e6:	4a92      	ldr	r2, [pc, #584]	@ (8003b30 <HAL_GPIO_Init+0x2b0>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d046      	beq.n	800397a <HAL_GPIO_Init+0xfa>
 80038ec:	4a90      	ldr	r2, [pc, #576]	@ (8003b30 <HAL_GPIO_Init+0x2b0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d85d      	bhi.n	80039ae <HAL_GPIO_Init+0x12e>
 80038f2:	2b12      	cmp	r3, #18
 80038f4:	d82a      	bhi.n	800394c <HAL_GPIO_Init+0xcc>
 80038f6:	2b12      	cmp	r3, #18
 80038f8:	d859      	bhi.n	80039ae <HAL_GPIO_Init+0x12e>
 80038fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003900 <HAL_GPIO_Init+0x80>)
 80038fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003900:	0800397b 	.word	0x0800397b
 8003904:	08003955 	.word	0x08003955
 8003908:	08003967 	.word	0x08003967
 800390c:	080039a9 	.word	0x080039a9
 8003910:	080039af 	.word	0x080039af
 8003914:	080039af 	.word	0x080039af
 8003918:	080039af 	.word	0x080039af
 800391c:	080039af 	.word	0x080039af
 8003920:	080039af 	.word	0x080039af
 8003924:	080039af 	.word	0x080039af
 8003928:	080039af 	.word	0x080039af
 800392c:	080039af 	.word	0x080039af
 8003930:	080039af 	.word	0x080039af
 8003934:	080039af 	.word	0x080039af
 8003938:	080039af 	.word	0x080039af
 800393c:	080039af 	.word	0x080039af
 8003940:	080039af 	.word	0x080039af
 8003944:	0800395d 	.word	0x0800395d
 8003948:	08003971 	.word	0x08003971
 800394c:	4a79      	ldr	r2, [pc, #484]	@ (8003b34 <HAL_GPIO_Init+0x2b4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d013      	beq.n	800397a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003952:	e02c      	b.n	80039ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	623b      	str	r3, [r7, #32]
          break;
 800395a:	e029      	b.n	80039b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	3304      	adds	r3, #4
 8003962:	623b      	str	r3, [r7, #32]
          break;
 8003964:	e024      	b.n	80039b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	3308      	adds	r3, #8
 800396c:	623b      	str	r3, [r7, #32]
          break;
 800396e:	e01f      	b.n	80039b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	330c      	adds	r3, #12
 8003976:	623b      	str	r3, [r7, #32]
          break;
 8003978:	e01a      	b.n	80039b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d102      	bne.n	8003988 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003982:	2304      	movs	r3, #4
 8003984:	623b      	str	r3, [r7, #32]
          break;
 8003986:	e013      	b.n	80039b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d105      	bne.n	800399c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003990:	2308      	movs	r3, #8
 8003992:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	611a      	str	r2, [r3, #16]
          break;
 800399a:	e009      	b.n	80039b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800399c:	2308      	movs	r3, #8
 800399e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69fa      	ldr	r2, [r7, #28]
 80039a4:	615a      	str	r2, [r3, #20]
          break;
 80039a6:	e003      	b.n	80039b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039a8:	2300      	movs	r3, #0
 80039aa:	623b      	str	r3, [r7, #32]
          break;
 80039ac:	e000      	b.n	80039b0 <HAL_GPIO_Init+0x130>
          break;
 80039ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2bff      	cmp	r3, #255	@ 0xff
 80039b4:	d801      	bhi.n	80039ba <HAL_GPIO_Init+0x13a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	e001      	b.n	80039be <HAL_GPIO_Init+0x13e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3304      	adds	r3, #4
 80039be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	2bff      	cmp	r3, #255	@ 0xff
 80039c4:	d802      	bhi.n	80039cc <HAL_GPIO_Init+0x14c>
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	e002      	b.n	80039d2 <HAL_GPIO_Init+0x152>
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	3b08      	subs	r3, #8
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	210f      	movs	r1, #15
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	fa01 f303 	lsl.w	r3, r1, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	401a      	ands	r2, r3
 80039e4:	6a39      	ldr	r1, [r7, #32]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ec:	431a      	orrs	r2, r3
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80b1 	beq.w	8003b62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a00:	4b4d      	ldr	r3, [pc, #308]	@ (8003b38 <HAL_GPIO_Init+0x2b8>)
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	4a4c      	ldr	r2, [pc, #304]	@ (8003b38 <HAL_GPIO_Init+0x2b8>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	6193      	str	r3, [r2, #24]
 8003a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8003b38 <HAL_GPIO_Init+0x2b8>)
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a18:	4a48      	ldr	r2, [pc, #288]	@ (8003b3c <HAL_GPIO_Init+0x2bc>)
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	089b      	lsrs	r3, r3, #2
 8003a1e:	3302      	adds	r3, #2
 8003a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	220f      	movs	r2, #15
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a40      	ldr	r2, [pc, #256]	@ (8003b40 <HAL_GPIO_Init+0x2c0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d013      	beq.n	8003a6c <HAL_GPIO_Init+0x1ec>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a3f      	ldr	r2, [pc, #252]	@ (8003b44 <HAL_GPIO_Init+0x2c4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00d      	beq.n	8003a68 <HAL_GPIO_Init+0x1e8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a3e      	ldr	r2, [pc, #248]	@ (8003b48 <HAL_GPIO_Init+0x2c8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d007      	beq.n	8003a64 <HAL_GPIO_Init+0x1e4>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a3d      	ldr	r2, [pc, #244]	@ (8003b4c <HAL_GPIO_Init+0x2cc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d101      	bne.n	8003a60 <HAL_GPIO_Init+0x1e0>
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e006      	b.n	8003a6e <HAL_GPIO_Init+0x1ee>
 8003a60:	2304      	movs	r3, #4
 8003a62:	e004      	b.n	8003a6e <HAL_GPIO_Init+0x1ee>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e002      	b.n	8003a6e <HAL_GPIO_Init+0x1ee>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <HAL_GPIO_Init+0x1ee>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a70:	f002 0203 	and.w	r2, r2, #3
 8003a74:	0092      	lsls	r2, r2, #2
 8003a76:	4093      	lsls	r3, r2
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a7e:	492f      	ldr	r1, [pc, #188]	@ (8003b3c <HAL_GPIO_Init+0x2bc>)
 8003a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a82:	089b      	lsrs	r3, r3, #2
 8003a84:	3302      	adds	r3, #2
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d006      	beq.n	8003aa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a98:	4b2d      	ldr	r3, [pc, #180]	@ (8003b50 <HAL_GPIO_Init+0x2d0>)
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	492c      	ldr	r1, [pc, #176]	@ (8003b50 <HAL_GPIO_Init+0x2d0>)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	608b      	str	r3, [r1, #8]
 8003aa4:	e006      	b.n	8003ab4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8003b50 <HAL_GPIO_Init+0x2d0>)
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	43db      	mvns	r3, r3
 8003aae:	4928      	ldr	r1, [pc, #160]	@ (8003b50 <HAL_GPIO_Init+0x2d0>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d006      	beq.n	8003ace <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ac0:	4b23      	ldr	r3, [pc, #140]	@ (8003b50 <HAL_GPIO_Init+0x2d0>)
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	4922      	ldr	r1, [pc, #136]	@ (8003b50 <HAL_GPIO_Init+0x2d0>)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60cb      	str	r3, [r1, #12]
 8003acc:	e006      	b.n	8003adc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ace:	4b20      	ldr	r3, [pc, #128]	@ (8003b50 <HAL_GPIO_Init+0x2d0>)
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	491e      	ldr	r1, [pc, #120]	@ (8003b50 <HAL_GPIO_Init+0x2d0>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d006      	beq.n	8003af6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ae8:	4b19      	ldr	r3, [pc, #100]	@ (8003b50 <HAL_GPIO_Init+0x2d0>)
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	4918      	ldr	r1, [pc, #96]	@ (8003b50 <HAL_GPIO_Init+0x2d0>)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
 8003af4:	e006      	b.n	8003b04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003af6:	4b16      	ldr	r3, [pc, #88]	@ (8003b50 <HAL_GPIO_Init+0x2d0>)
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	43db      	mvns	r3, r3
 8003afe:	4914      	ldr	r1, [pc, #80]	@ (8003b50 <HAL_GPIO_Init+0x2d0>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d021      	beq.n	8003b54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b10:	4b0f      	ldr	r3, [pc, #60]	@ (8003b50 <HAL_GPIO_Init+0x2d0>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	490e      	ldr	r1, [pc, #56]	@ (8003b50 <HAL_GPIO_Init+0x2d0>)
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	600b      	str	r3, [r1, #0]
 8003b1c:	e021      	b.n	8003b62 <HAL_GPIO_Init+0x2e2>
 8003b1e:	bf00      	nop
 8003b20:	10320000 	.word	0x10320000
 8003b24:	10310000 	.word	0x10310000
 8003b28:	10220000 	.word	0x10220000
 8003b2c:	10210000 	.word	0x10210000
 8003b30:	10120000 	.word	0x10120000
 8003b34:	10110000 	.word	0x10110000
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40010000 	.word	0x40010000
 8003b40:	40010800 	.word	0x40010800
 8003b44:	40010c00 	.word	0x40010c00
 8003b48:	40011000 	.word	0x40011000
 8003b4c:	40011400 	.word	0x40011400
 8003b50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b54:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <HAL_GPIO_Init+0x304>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	4909      	ldr	r1, [pc, #36]	@ (8003b84 <HAL_GPIO_Init+0x304>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b64:	3301      	adds	r3, #1
 8003b66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f47f ae8e 	bne.w	8003894 <HAL_GPIO_Init+0x14>
  }
}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	372c      	adds	r7, #44	@ 0x2c
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr
 8003b84:	40010400 	.word	0x40010400

08003b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	807b      	strh	r3, [r7, #2]
 8003b94:	4613      	mov	r3, r2
 8003b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b98:	787b      	ldrb	r3, [r7, #1]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b9e:	887a      	ldrh	r2, [r7, #2]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ba4:	e003      	b.n	8003bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ba6:	887b      	ldrh	r3, [r7, #2]
 8003ba8:	041a      	lsls	r2, r3, #16
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	611a      	str	r2, [r3, #16]
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e272      	b.n	80040b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 8087 	beq.w	8003ce6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bd8:	4b92      	ldr	r3, [pc, #584]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 030c 	and.w	r3, r3, #12
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d00c      	beq.n	8003bfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003be4:	4b8f      	ldr	r3, [pc, #572]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 030c 	and.w	r3, r3, #12
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d112      	bne.n	8003c16 <HAL_RCC_OscConfig+0x5e>
 8003bf0:	4b8c      	ldr	r3, [pc, #560]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bfc:	d10b      	bne.n	8003c16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfe:	4b89      	ldr	r3, [pc, #548]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d06c      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x12c>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d168      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e24c      	b.n	80040b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c1e:	d106      	bne.n	8003c2e <HAL_RCC_OscConfig+0x76>
 8003c20:	4b80      	ldr	r3, [pc, #512]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a7f      	ldr	r2, [pc, #508]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003c26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	e02e      	b.n	8003c8c <HAL_RCC_OscConfig+0xd4>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCC_OscConfig+0x98>
 8003c36:	4b7b      	ldr	r3, [pc, #492]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a7a      	ldr	r2, [pc, #488]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	4b78      	ldr	r3, [pc, #480]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a77      	ldr	r2, [pc, #476]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003c48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e01d      	b.n	8003c8c <HAL_RCC_OscConfig+0xd4>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCC_OscConfig+0xbc>
 8003c5a:	4b72      	ldr	r3, [pc, #456]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a71      	ldr	r2, [pc, #452]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003c60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	4b6f      	ldr	r3, [pc, #444]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a6e      	ldr	r2, [pc, #440]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	e00b      	b.n	8003c8c <HAL_RCC_OscConfig+0xd4>
 8003c74:	4b6b      	ldr	r3, [pc, #428]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a6a      	ldr	r2, [pc, #424]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	4b68      	ldr	r3, [pc, #416]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a67      	ldr	r2, [pc, #412]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d013      	beq.n	8003cbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7ff fa16 	bl	80030c4 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c9c:	f7ff fa12 	bl	80030c4 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	@ 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e200      	b.n	80040b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cae:	4b5d      	ldr	r3, [pc, #372]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0xe4>
 8003cba:	e014      	b.n	8003ce6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbc:	f7ff fa02 	bl	80030c4 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cc4:	f7ff f9fe 	bl	80030c4 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	@ 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e1ec      	b.n	80040b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd6:	4b53      	ldr	r3, [pc, #332]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f0      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x10c>
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d063      	beq.n	8003dba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cf2:	4b4c      	ldr	r3, [pc, #304]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00b      	beq.n	8003d16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003cfe:	4b49      	ldr	r3, [pc, #292]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d11c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x18c>
 8003d0a:	4b46      	ldr	r3, [pc, #280]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d116      	bne.n	8003d44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d16:	4b43      	ldr	r3, [pc, #268]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d005      	beq.n	8003d2e <HAL_RCC_OscConfig+0x176>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d001      	beq.n	8003d2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e1c0      	b.n	80040b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4939      	ldr	r1, [pc, #228]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d42:	e03a      	b.n	8003dba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d020      	beq.n	8003d8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d4c:	4b36      	ldr	r3, [pc, #216]	@ (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d52:	f7ff f9b7 	bl	80030c4 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d5a:	f7ff f9b3 	bl	80030c4 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e1a1      	b.n	80040b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d78:	4b2a      	ldr	r3, [pc, #168]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4927      	ldr	r1, [pc, #156]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	600b      	str	r3, [r1, #0]
 8003d8c:	e015      	b.n	8003dba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d8e:	4b26      	ldr	r3, [pc, #152]	@ (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7ff f996 	bl	80030c4 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d9c:	f7ff f992 	bl	80030c4 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e180      	b.n	80040b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dae:	4b1d      	ldr	r3, [pc, #116]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d03a      	beq.n	8003e3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d019      	beq.n	8003e02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dce:	4b17      	ldr	r3, [pc, #92]	@ (8003e2c <HAL_RCC_OscConfig+0x274>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd4:	f7ff f976 	bl	80030c4 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ddc:	f7ff f972 	bl	80030c4 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e160      	b.n	80040b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dee:	4b0d      	ldr	r3, [pc, #52]	@ (8003e24 <HAL_RCC_OscConfig+0x26c>)
 8003df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003dfa:	2001      	movs	r0, #1
 8003dfc:	f000 face 	bl	800439c <RCC_Delay>
 8003e00:	e01c      	b.n	8003e3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e02:	4b0a      	ldr	r3, [pc, #40]	@ (8003e2c <HAL_RCC_OscConfig+0x274>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e08:	f7ff f95c 	bl	80030c4 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e0e:	e00f      	b.n	8003e30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e10:	f7ff f958 	bl	80030c4 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d908      	bls.n	8003e30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e146      	b.n	80040b0 <HAL_RCC_OscConfig+0x4f8>
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000
 8003e28:	42420000 	.word	0x42420000
 8003e2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e30:	4b92      	ldr	r3, [pc, #584]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1e9      	bne.n	8003e10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 80a6 	beq.w	8003f96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e4e:	4b8b      	ldr	r3, [pc, #556]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10d      	bne.n	8003e76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e5a:	4b88      	ldr	r3, [pc, #544]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	4a87      	ldr	r2, [pc, #540]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e64:	61d3      	str	r3, [r2, #28]
 8003e66:	4b85      	ldr	r3, [pc, #532]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e72:	2301      	movs	r3, #1
 8003e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e76:	4b82      	ldr	r3, [pc, #520]	@ (8004080 <HAL_RCC_OscConfig+0x4c8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d118      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e82:	4b7f      	ldr	r3, [pc, #508]	@ (8004080 <HAL_RCC_OscConfig+0x4c8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a7e      	ldr	r2, [pc, #504]	@ (8004080 <HAL_RCC_OscConfig+0x4c8>)
 8003e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e8e:	f7ff f919 	bl	80030c4 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e96:	f7ff f915 	bl	80030c4 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b64      	cmp	r3, #100	@ 0x64
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e103      	b.n	80040b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea8:	4b75      	ldr	r3, [pc, #468]	@ (8004080 <HAL_RCC_OscConfig+0x4c8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d106      	bne.n	8003eca <HAL_RCC_OscConfig+0x312>
 8003ebc:	4b6f      	ldr	r3, [pc, #444]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	4a6e      	ldr	r2, [pc, #440]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	6213      	str	r3, [r2, #32]
 8003ec8:	e02d      	b.n	8003f26 <HAL_RCC_OscConfig+0x36e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10c      	bne.n	8003eec <HAL_RCC_OscConfig+0x334>
 8003ed2:	4b6a      	ldr	r3, [pc, #424]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	4a69      	ldr	r2, [pc, #420]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003ed8:	f023 0301 	bic.w	r3, r3, #1
 8003edc:	6213      	str	r3, [r2, #32]
 8003ede:	4b67      	ldr	r3, [pc, #412]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	4a66      	ldr	r2, [pc, #408]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	f023 0304 	bic.w	r3, r3, #4
 8003ee8:	6213      	str	r3, [r2, #32]
 8003eea:	e01c      	b.n	8003f26 <HAL_RCC_OscConfig+0x36e>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	2b05      	cmp	r3, #5
 8003ef2:	d10c      	bne.n	8003f0e <HAL_RCC_OscConfig+0x356>
 8003ef4:	4b61      	ldr	r3, [pc, #388]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	4a60      	ldr	r2, [pc, #384]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003efa:	f043 0304 	orr.w	r3, r3, #4
 8003efe:	6213      	str	r3, [r2, #32]
 8003f00:	4b5e      	ldr	r3, [pc, #376]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	4a5d      	ldr	r2, [pc, #372]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	6213      	str	r3, [r2, #32]
 8003f0c:	e00b      	b.n	8003f26 <HAL_RCC_OscConfig+0x36e>
 8003f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	4a5a      	ldr	r2, [pc, #360]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003f14:	f023 0301 	bic.w	r3, r3, #1
 8003f18:	6213      	str	r3, [r2, #32]
 8003f1a:	4b58      	ldr	r3, [pc, #352]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	4a57      	ldr	r2, [pc, #348]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003f20:	f023 0304 	bic.w	r3, r3, #4
 8003f24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d015      	beq.n	8003f5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2e:	f7ff f8c9 	bl	80030c4 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f34:	e00a      	b.n	8003f4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f36:	f7ff f8c5 	bl	80030c4 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e0b1      	b.n	80040b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4c:	4b4b      	ldr	r3, [pc, #300]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0ee      	beq.n	8003f36 <HAL_RCC_OscConfig+0x37e>
 8003f58:	e014      	b.n	8003f84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f5a:	f7ff f8b3 	bl	80030c4 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f60:	e00a      	b.n	8003f78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f62:	f7ff f8af 	bl	80030c4 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e09b      	b.n	80040b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f78:	4b40      	ldr	r3, [pc, #256]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1ee      	bne.n	8003f62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d105      	bne.n	8003f96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f8a:	4b3c      	ldr	r3, [pc, #240]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	4a3b      	ldr	r2, [pc, #236]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003f90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 8087 	beq.w	80040ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fa0:	4b36      	ldr	r3, [pc, #216]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 030c 	and.w	r3, r3, #12
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d061      	beq.n	8004070 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d146      	bne.n	8004042 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb4:	4b33      	ldr	r3, [pc, #204]	@ (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fba:	f7ff f883 	bl	80030c4 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc2:	f7ff f87f 	bl	80030c4 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e06d      	b.n	80040b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fd4:	4b29      	ldr	r3, [pc, #164]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1f0      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fe8:	d108      	bne.n	8003ffc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fea:	4b24      	ldr	r3, [pc, #144]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	4921      	ldr	r1, [pc, #132]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a19      	ldr	r1, [r3, #32]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400c:	430b      	orrs	r3, r1
 800400e:	491b      	ldr	r1, [pc, #108]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8004010:	4313      	orrs	r3, r2
 8004012:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004014:	4b1b      	ldr	r3, [pc, #108]	@ (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8004016:	2201      	movs	r2, #1
 8004018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401a:	f7ff f853 	bl	80030c4 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004022:	f7ff f84f 	bl	80030c4 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e03d      	b.n	80040b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004034:	4b11      	ldr	r3, [pc, #68]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCC_OscConfig+0x46a>
 8004040:	e035      	b.n	80040ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004042:	4b10      	ldr	r3, [pc, #64]	@ (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004048:	f7ff f83c 	bl	80030c4 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004050:	f7ff f838 	bl	80030c4 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e026      	b.n	80040b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004062:	4b06      	ldr	r3, [pc, #24]	@ (800407c <HAL_RCC_OscConfig+0x4c4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0x498>
 800406e:	e01e      	b.n	80040ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d107      	bne.n	8004088 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e019      	b.n	80040b0 <HAL_RCC_OscConfig+0x4f8>
 800407c:	40021000 	.word	0x40021000
 8004080:	40007000 	.word	0x40007000
 8004084:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004088:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <HAL_RCC_OscConfig+0x500>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	429a      	cmp	r2, r3
 800409a:	d106      	bne.n	80040aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d001      	beq.n	80040ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40021000 	.word	0x40021000

080040bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0d0      	b.n	8004272 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040d0:	4b6a      	ldr	r3, [pc, #424]	@ (800427c <HAL_RCC_ClockConfig+0x1c0>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d910      	bls.n	8004100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040de:	4b67      	ldr	r3, [pc, #412]	@ (800427c <HAL_RCC_ClockConfig+0x1c0>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 0207 	bic.w	r2, r3, #7
 80040e6:	4965      	ldr	r1, [pc, #404]	@ (800427c <HAL_RCC_ClockConfig+0x1c0>)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b63      	ldr	r3, [pc, #396]	@ (800427c <HAL_RCC_ClockConfig+0x1c0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0b8      	b.n	8004272 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d020      	beq.n	800414e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004118:	4b59      	ldr	r3, [pc, #356]	@ (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4a58      	ldr	r2, [pc, #352]	@ (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 800411e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004122:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004130:	4b53      	ldr	r3, [pc, #332]	@ (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4a52      	ldr	r2, [pc, #328]	@ (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 8004136:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800413a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800413c:	4b50      	ldr	r3, [pc, #320]	@ (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	494d      	ldr	r1, [pc, #308]	@ (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 800414a:	4313      	orrs	r3, r2
 800414c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d040      	beq.n	80041dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	4b47      	ldr	r3, [pc, #284]	@ (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d115      	bne.n	800419a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e07f      	b.n	8004272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d107      	bne.n	800418a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417a:	4b41      	ldr	r3, [pc, #260]	@ (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e073      	b.n	8004272 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418a:	4b3d      	ldr	r3, [pc, #244]	@ (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e06b      	b.n	8004272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800419a:	4b39      	ldr	r3, [pc, #228]	@ (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f023 0203 	bic.w	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4936      	ldr	r1, [pc, #216]	@ (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041ac:	f7fe ff8a 	bl	80030c4 <HAL_GetTick>
 80041b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b2:	e00a      	b.n	80041ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b4:	f7fe ff86 	bl	80030c4 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e053      	b.n	8004272 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ca:	4b2d      	ldr	r3, [pc, #180]	@ (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f003 020c 	and.w	r2, r3, #12
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	429a      	cmp	r2, r3
 80041da:	d1eb      	bne.n	80041b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041dc:	4b27      	ldr	r3, [pc, #156]	@ (800427c <HAL_RCC_ClockConfig+0x1c0>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d210      	bcs.n	800420c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ea:	4b24      	ldr	r3, [pc, #144]	@ (800427c <HAL_RCC_ClockConfig+0x1c0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f023 0207 	bic.w	r2, r3, #7
 80041f2:	4922      	ldr	r1, [pc, #136]	@ (800427c <HAL_RCC_ClockConfig+0x1c0>)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fa:	4b20      	ldr	r3, [pc, #128]	@ (800427c <HAL_RCC_ClockConfig+0x1c0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d001      	beq.n	800420c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e032      	b.n	8004272 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004218:	4b19      	ldr	r3, [pc, #100]	@ (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4916      	ldr	r1, [pc, #88]	@ (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 8004226:	4313      	orrs	r3, r2
 8004228:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004236:	4b12      	ldr	r3, [pc, #72]	@ (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	490e      	ldr	r1, [pc, #56]	@ (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 8004246:	4313      	orrs	r3, r2
 8004248:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800424a:	f000 f821 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 800424e:	4602      	mov	r2, r0
 8004250:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <HAL_RCC_ClockConfig+0x1c4>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	490a      	ldr	r1, [pc, #40]	@ (8004284 <HAL_RCC_ClockConfig+0x1c8>)
 800425c:	5ccb      	ldrb	r3, [r1, r3]
 800425e:	fa22 f303 	lsr.w	r3, r2, r3
 8004262:	4a09      	ldr	r2, [pc, #36]	@ (8004288 <HAL_RCC_ClockConfig+0x1cc>)
 8004264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004266:	4b09      	ldr	r3, [pc, #36]	@ (800428c <HAL_RCC_ClockConfig+0x1d0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe fee8 	bl	8003040 <HAL_InitTick>

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40022000 	.word	0x40022000
 8004280:	40021000 	.word	0x40021000
 8004284:	08008334 	.word	0x08008334
 8004288:	20000030 	.word	0x20000030
 800428c:	20000034 	.word	0x20000034

08004290 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	2300      	movs	r3, #0
 800429c:	60bb      	str	r3, [r7, #8]
 800429e:	2300      	movs	r3, #0
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	2300      	movs	r3, #0
 80042a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x94>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 030c 	and.w	r3, r3, #12
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d002      	beq.n	80042c0 <HAL_RCC_GetSysClockFreq+0x30>
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d003      	beq.n	80042c6 <HAL_RCC_GetSysClockFreq+0x36>
 80042be:	e027      	b.n	8004310 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042c0:	4b19      	ldr	r3, [pc, #100]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x98>)
 80042c2:	613b      	str	r3, [r7, #16]
      break;
 80042c4:	e027      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	0c9b      	lsrs	r3, r3, #18
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	4a17      	ldr	r2, [pc, #92]	@ (800432c <HAL_RCC_GetSysClockFreq+0x9c>)
 80042d0:	5cd3      	ldrb	r3, [r2, r3]
 80042d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d010      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042de:	4b11      	ldr	r3, [pc, #68]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x94>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	0c5b      	lsrs	r3, r3, #17
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	4a11      	ldr	r2, [pc, #68]	@ (8004330 <HAL_RCC_GetSysClockFreq+0xa0>)
 80042ea:	5cd3      	ldrb	r3, [r2, r3]
 80042ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x98>)
 80042f2:	fb03 f202 	mul.w	r2, r3, r2
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	e004      	b.n	800430a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a0c      	ldr	r2, [pc, #48]	@ (8004334 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004304:	fb02 f303 	mul.w	r3, r2, r3
 8004308:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	613b      	str	r3, [r7, #16]
      break;
 800430e:	e002      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004310:	4b05      	ldr	r3, [pc, #20]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x98>)
 8004312:	613b      	str	r3, [r7, #16]
      break;
 8004314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004316:	693b      	ldr	r3, [r7, #16]
}
 8004318:	4618      	mov	r0, r3
 800431a:	371c      	adds	r7, #28
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40021000 	.word	0x40021000
 8004328:	007a1200 	.word	0x007a1200
 800432c:	0800834c 	.word	0x0800834c
 8004330:	0800835c 	.word	0x0800835c
 8004334:	003d0900 	.word	0x003d0900

08004338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800433c:	4b02      	ldr	r3, [pc, #8]	@ (8004348 <HAL_RCC_GetHCLKFreq+0x10>)
 800433e:	681b      	ldr	r3, [r3, #0]
}
 8004340:	4618      	mov	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr
 8004348:	20000030 	.word	0x20000030

0800434c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004350:	f7ff fff2 	bl	8004338 <HAL_RCC_GetHCLKFreq>
 8004354:	4602      	mov	r2, r0
 8004356:	4b05      	ldr	r3, [pc, #20]	@ (800436c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	4903      	ldr	r1, [pc, #12]	@ (8004370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004362:	5ccb      	ldrb	r3, [r1, r3]
 8004364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004368:	4618      	mov	r0, r3
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40021000 	.word	0x40021000
 8004370:	08008344 	.word	0x08008344

08004374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004378:	f7ff ffde 	bl	8004338 <HAL_RCC_GetHCLKFreq>
 800437c:	4602      	mov	r2, r0
 800437e:	4b05      	ldr	r3, [pc, #20]	@ (8004394 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	0adb      	lsrs	r3, r3, #11
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	4903      	ldr	r1, [pc, #12]	@ (8004398 <HAL_RCC_GetPCLK2Freq+0x24>)
 800438a:	5ccb      	ldrb	r3, [r1, r3]
 800438c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004390:	4618      	mov	r0, r3
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40021000 	.word	0x40021000
 8004398:	08008344 	.word	0x08008344

0800439c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80043a4:	4b0a      	ldr	r3, [pc, #40]	@ (80043d0 <RCC_Delay+0x34>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a0a      	ldr	r2, [pc, #40]	@ (80043d4 <RCC_Delay+0x38>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	0a5b      	lsrs	r3, r3, #9
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	fb02 f303 	mul.w	r3, r2, r3
 80043b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043b8:	bf00      	nop
  }
  while (Delay --);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	1e5a      	subs	r2, r3, #1
 80043be:	60fa      	str	r2, [r7, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1f9      	bne.n	80043b8 <RCC_Delay+0x1c>
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bc80      	pop	{r7}
 80043ce:	4770      	bx	lr
 80043d0:	20000030 	.word	0x20000030
 80043d4:	10624dd3 	.word	0x10624dd3

080043d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e076      	b.n	80044d8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d108      	bne.n	8004404 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043fa:	d009      	beq.n	8004410 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	61da      	str	r2, [r3, #28]
 8004402:	e005      	b.n	8004410 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fe fbd2 	bl	8002bd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004446:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004494:	ea42 0103 	orr.w	r1, r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	0c1a      	lsrs	r2, r3, #16
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f002 0204 	and.w	r2, r2, #4
 80044b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69da      	ldr	r2, [r3, #28]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044f0:	f7fe fde8 	bl	80030c4 <HAL_GetTick>
 80044f4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b01      	cmp	r3, #1
 8004504:	d001      	beq.n	800450a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004506:	2302      	movs	r3, #2
 8004508:	e12a      	b.n	8004760 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <HAL_SPI_Transmit+0x36>
 8004510:	88fb      	ldrh	r3, [r7, #6]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e122      	b.n	8004760 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_SPI_Transmit+0x48>
 8004524:	2302      	movs	r3, #2
 8004526:	e11b      	b.n	8004760 <HAL_SPI_Transmit+0x280>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2203      	movs	r2, #3
 8004534:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	88fa      	ldrh	r2, [r7, #6]
 8004548:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	88fa      	ldrh	r2, [r7, #6]
 800454e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004576:	d10f      	bne.n	8004598 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004586:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004596:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a2:	2b40      	cmp	r3, #64	@ 0x40
 80045a4:	d007      	beq.n	80045b6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045be:	d152      	bne.n	8004666 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_SPI_Transmit+0xee>
 80045c8:	8b7b      	ldrh	r3, [r7, #26]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d145      	bne.n	800465a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d2:	881a      	ldrh	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045de:	1c9a      	adds	r2, r3, #2
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045f2:	e032      	b.n	800465a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d112      	bne.n	8004628 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004606:	881a      	ldrh	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004612:	1c9a      	adds	r2, r3, #2
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004626:	e018      	b.n	800465a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004628:	f7fe fd4c 	bl	80030c4 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	d803      	bhi.n	8004640 <HAL_SPI_Transmit+0x160>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463e:	d102      	bne.n	8004646 <HAL_SPI_Transmit+0x166>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e082      	b.n	8004760 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1c7      	bne.n	80045f4 <HAL_SPI_Transmit+0x114>
 8004664:	e053      	b.n	800470e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <HAL_SPI_Transmit+0x194>
 800466e:	8b7b      	ldrh	r3, [r7, #26]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d147      	bne.n	8004704 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	7812      	ldrb	r2, [r2, #0]
 8004680:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800469a:	e033      	b.n	8004704 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d113      	bne.n	80046d2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	330c      	adds	r3, #12
 80046b4:	7812      	ldrb	r2, [r2, #0]
 80046b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80046d0:	e018      	b.n	8004704 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046d2:	f7fe fcf7 	bl	80030c4 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d803      	bhi.n	80046ea <HAL_SPI_Transmit+0x20a>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e8:	d102      	bne.n	80046f0 <HAL_SPI_Transmit+0x210>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d109      	bne.n	8004704 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e02d      	b.n	8004760 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1c6      	bne.n	800469c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	6839      	ldr	r1, [r7, #0]
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f9f6 	bl	8004b04 <SPI_EndRxTxTransaction>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2220      	movs	r2, #32
 8004722:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800472c:	2300      	movs	r3, #0
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800475e:	2300      	movs	r3, #0
  }
}
 8004760:	4618      	mov	r0, r3
 8004762:	3720      	adds	r7, #32
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	4613      	mov	r3, r2
 8004774:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b01      	cmp	r3, #1
 8004780:	d001      	beq.n	8004786 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004782:	2302      	movs	r3, #2
 8004784:	e097      	b.n	80048b6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <HAL_SPI_Transmit_DMA+0x2a>
 800478c:	88fb      	ldrh	r3, [r7, #6]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e08f      	b.n	80048b6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_SPI_Transmit_DMA+0x3c>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e088      	b.n	80048b6 <HAL_SPI_Transmit_DMA+0x14e>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2203      	movs	r2, #3
 80047b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	88fa      	ldrh	r2, [r7, #6]
 80047c4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	88fa      	ldrh	r2, [r7, #6]
 80047ca:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047f2:	d10f      	bne.n	8004814 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004802:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004812:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004818:	4a29      	ldr	r2, [pc, #164]	@ (80048c0 <HAL_SPI_Transmit_DMA+0x158>)
 800481a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004820:	4a28      	ldr	r2, [pc, #160]	@ (80048c4 <HAL_SPI_Transmit_DMA+0x15c>)
 8004822:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004828:	4a27      	ldr	r2, [pc, #156]	@ (80048c8 <HAL_SPI_Transmit_DMA+0x160>)
 800482a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004830:	2200      	movs	r2, #0
 8004832:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483c:	4619      	mov	r1, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	330c      	adds	r3, #12
 8004844:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800484a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800484c:	f7fe fdd0 	bl	80033f0 <HAL_DMA_Start_IT>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00b      	beq.n	800486e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485a:	f043 0210 	orr.w	r2, r3, #16
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e023      	b.n	80048b6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004878:	2b40      	cmp	r3, #64	@ 0x40
 800487a:	d007      	beq.n	800488c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800488a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0220 	orr.w	r2, r2, #32
 80048a2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0202 	orr.w	r2, r2, #2
 80048b2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	08004997 	.word	0x08004997
 80048c4:	080048f1 	.word	0x080048f1
 80048c8:	080049b3 	.word	0x080049b3

080048cc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048fe:	f7fe fbe1 	bl	80030c4 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b20      	cmp	r3, #32
 8004910:	d03b      	beq.n	800498a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0220 	bic.w	r2, r2, #32
 8004920:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0202 	bic.w	r2, r2, #2
 8004930:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	2164      	movs	r1, #100	@ 0x64
 8004936:	6978      	ldr	r0, [r7, #20]
 8004938:	f000 f8e4 	bl	8004b04 <SPI_EndRxTxTransaction>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004946:	f043 0220 	orr.w	r2, r3, #32
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10a      	bne.n	800496c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2200      	movs	r2, #0
 8004970:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004982:	6978      	ldr	r0, [r7, #20]
 8004984:	f7ff ffab 	bl	80048de <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004988:	e002      	b.n	8004990 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800498a:	6978      	ldr	r0, [r7, #20]
 800498c:	f7fd f878 	bl	8001a80 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f7ff ff91 	bl	80048cc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0203 	bic.w	r2, r2, #3
 80049ce:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d4:	f043 0210 	orr.w	r2, r3, #16
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f7ff ff7a 	bl	80048de <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	4613      	mov	r3, r2
 8004a02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a04:	f7fe fb5e 	bl	80030c4 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0c:	1a9b      	subs	r3, r3, r2
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	4413      	add	r3, r2
 8004a12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a14:	f7fe fb56 	bl	80030c4 <HAL_GetTick>
 8004a18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a1a:	4b39      	ldr	r3, [pc, #228]	@ (8004b00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	015b      	lsls	r3, r3, #5
 8004a20:	0d1b      	lsrs	r3, r3, #20
 8004a22:	69fa      	ldr	r2, [r7, #28]
 8004a24:	fb02 f303 	mul.w	r3, r2, r3
 8004a28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a2a:	e054      	b.n	8004ad6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a32:	d050      	beq.n	8004ad6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a34:	f7fe fb46 	bl	80030c4 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d902      	bls.n	8004a4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d13d      	bne.n	8004ac6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a62:	d111      	bne.n	8004a88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a6c:	d004      	beq.n	8004a78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a76:	d107      	bne.n	8004a88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a90:	d10f      	bne.n	8004ab2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ab0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e017      	b.n	8004af6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	bf0c      	ite	eq
 8004ae6:	2301      	moveq	r3, #1
 8004ae8:	2300      	movne	r3, #0
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	461a      	mov	r2, r3
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d19b      	bne.n	8004a2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3720      	adds	r7, #32
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20000030 	.word	0x20000030

08004b04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2201      	movs	r2, #1
 8004b18:	2102      	movs	r1, #2
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7ff ff6a 	bl	80049f4 <SPI_WaitFlagStateUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2a:	f043 0220 	orr.w	r2, r3, #32
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e013      	b.n	8004b5e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2180      	movs	r1, #128	@ 0x80
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7ff ff57 	bl	80049f4 <SPI_WaitFlagStateUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d007      	beq.n	8004b5c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b50:	f043 0220 	orr.w	r2, r3, #32
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e000      	b.n	8004b5e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e042      	b.n	8004bfe <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d106      	bne.n	8004b92 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7fe f9c7 	bl	8002f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2224      	movs	r2, #36	@ 0x24
 8004b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68da      	ldr	r2, [r3, #12]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ba8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fcd4 	bl	8005558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691a      	ldr	r2, [r3, #16]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bbe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695a      	ldr	r2, [r3, #20]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bde:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	4613      	mov	r3, r2
 8004c12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d112      	bne.n	8004c46 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <HAL_UART_Receive_IT+0x26>
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e00b      	b.n	8004c48 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c36:	88fb      	ldrh	r3, [r7, #6]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	68b9      	ldr	r1, [r7, #8]
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 fab6 	bl	80051ae <UART_Start_Receive_IT>
 8004c42:	4603      	mov	r3, r0
 8004c44:	e000      	b.n	8004c48 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c46:	2302      	movs	r3, #2
  }
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b0ba      	sub	sp, #232	@ 0xe8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004c8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10f      	bne.n	8004cb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x66>
 8004ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fb93 	bl	80053da <UART_Receive_IT>
      return;
 8004cb4:	e25b      	b.n	800516e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 80de 	beq.w	8004e7c <HAL_UART_IRQHandler+0x22c>
 8004cc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cd0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80d1 	beq.w	8004e7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00b      	beq.n	8004cfe <HAL_UART_IRQHandler+0xae>
 8004ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf6:	f043 0201 	orr.w	r2, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <HAL_UART_IRQHandler+0xd2>
 8004d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1a:	f043 0202 	orr.w	r2, r3, #2
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00b      	beq.n	8004d46 <HAL_UART_IRQHandler+0xf6>
 8004d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3e:	f043 0204 	orr.w	r2, r3, #4
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d011      	beq.n	8004d76 <HAL_UART_IRQHandler+0x126>
 8004d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d105      	bne.n	8004d6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6e:	f043 0208 	orr.w	r2, r3, #8
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 81f2 	beq.w	8005164 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <HAL_UART_IRQHandler+0x14e>
 8004d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d90:	f003 0320 	and.w	r3, r3, #32
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fb1e 	bl	80053da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	bf14      	ite	ne
 8004dac:	2301      	movne	r3, #1
 8004dae:	2300      	moveq	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d103      	bne.n	8004dca <HAL_UART_IRQHandler+0x17a>
 8004dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d04f      	beq.n	8004e6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fa28 	bl	8005220 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d041      	beq.n	8004e62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3314      	adds	r3, #20
 8004de4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004df4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004df8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3314      	adds	r3, #20
 8004e06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1d9      	bne.n	8004dde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d013      	beq.n	8004e5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e36:	4a7e      	ldr	r2, [pc, #504]	@ (8005030 <HAL_UART_IRQHandler+0x3e0>)
 8004e38:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe fb72 	bl	8003528 <HAL_DMA_Abort_IT>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d016      	beq.n	8004e78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e54:	4610      	mov	r0, r2
 8004e56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e58:	e00e      	b.n	8004e78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f993 	bl	8005186 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e60:	e00a      	b.n	8004e78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f98f 	bl	8005186 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e68:	e006      	b.n	8004e78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f98b 	bl	8005186 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e76:	e175      	b.n	8005164 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e78:	bf00      	nop
    return;
 8004e7a:	e173      	b.n	8005164 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	f040 814f 	bne.w	8005124 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e8a:	f003 0310 	and.w	r3, r3, #16
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8148 	beq.w	8005124 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e98:	f003 0310 	and.w	r3, r3, #16
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 8141 	beq.w	8005124 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60bb      	str	r3, [r7, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60bb      	str	r3, [r7, #8]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f000 80b6 	beq.w	8005034 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ed4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8145 	beq.w	8005168 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ee2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	f080 813e 	bcs.w	8005168 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ef2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	2b20      	cmp	r3, #32
 8004efc:	f000 8088 	beq.w	8005010 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	330c      	adds	r3, #12
 8004f06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f0e:	e853 3f00 	ldrex	r3, [r3]
 8004f12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	330c      	adds	r3, #12
 8004f28:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f2c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f34:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f38:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1d9      	bne.n	8004f00 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3314      	adds	r3, #20
 8004f52:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f5e:	f023 0301 	bic.w	r3, r3, #1
 8004f62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3314      	adds	r3, #20
 8004f6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f70:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f74:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f78:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f7c:	e841 2300 	strex	r3, r2, [r1]
 8004f80:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1e1      	bne.n	8004f4c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3314      	adds	r3, #20
 8004f8e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3314      	adds	r3, #20
 8004fa8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004fac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004fae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004fb2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004fba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e3      	bne.n	8004f88 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	330c      	adds	r3, #12
 8004fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004fde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fe0:	f023 0310 	bic.w	r3, r3, #16
 8004fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	330c      	adds	r3, #12
 8004fee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004ff2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004ff4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ff8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005000:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1e3      	bne.n	8004fce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800500a:	4618      	mov	r0, r3
 800500c:	f7fe fa50 	bl	80034b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800501e:	b29b      	uxth	r3, r3
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	b29b      	uxth	r3, r3
 8005024:	4619      	mov	r1, r3
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f8b6 	bl	8005198 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800502c:	e09c      	b.n	8005168 <HAL_UART_IRQHandler+0x518>
 800502e:	bf00      	nop
 8005030:	080052e5 	.word	0x080052e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800503c:	b29b      	uxth	r3, r3
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 808e 	beq.w	800516c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 8089 	beq.w	800516c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	330c      	adds	r3, #12
 8005060:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005064:	e853 3f00 	ldrex	r3, [r3]
 8005068:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800506a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800506c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005070:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	330c      	adds	r3, #12
 800507a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800507e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005080:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005084:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800508c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e3      	bne.n	800505a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3314      	adds	r3, #20
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	623b      	str	r3, [r7, #32]
   return(result);
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	f023 0301 	bic.w	r3, r3, #1
 80050a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3314      	adds	r3, #20
 80050b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80050b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050be:	e841 2300 	strex	r3, r2, [r1]
 80050c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1e3      	bne.n	8005092 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	330c      	adds	r3, #12
 80050de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0310 	bic.w	r3, r3, #16
 80050ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	330c      	adds	r3, #12
 80050f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80050fc:	61fa      	str	r2, [r7, #28]
 80050fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	69b9      	ldr	r1, [r7, #24]
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	617b      	str	r3, [r7, #20]
   return(result);
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e3      	bne.n	80050d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005116:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800511a:	4619      	mov	r1, r3
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f83b 	bl	8005198 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005122:	e023      	b.n	800516c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800512c:	2b00      	cmp	r3, #0
 800512e:	d009      	beq.n	8005144 <HAL_UART_IRQHandler+0x4f4>
 8005130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f8e5 	bl	800530c <UART_Transmit_IT>
    return;
 8005142:	e014      	b.n	800516e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00e      	beq.n	800516e <HAL_UART_IRQHandler+0x51e>
 8005150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f924 	bl	80053aa <UART_EndTransmit_IT>
    return;
 8005162:	e004      	b.n	800516e <HAL_UART_IRQHandler+0x51e>
    return;
 8005164:	bf00      	nop
 8005166:	e002      	b.n	800516e <HAL_UART_IRQHandler+0x51e>
      return;
 8005168:	bf00      	nop
 800516a:	e000      	b.n	800516e <HAL_UART_IRQHandler+0x51e>
      return;
 800516c:	bf00      	nop
  }
}
 800516e:	37e8      	adds	r7, #232	@ 0xe8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr

08005186 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr

08005198 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc80      	pop	{r7}
 80051ac:	4770      	bx	lr

080051ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	4613      	mov	r3, r2
 80051ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	88fa      	ldrh	r2, [r7, #6]
 80051c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	88fa      	ldrh	r2, [r7, #6]
 80051cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2222      	movs	r2, #34	@ 0x22
 80051d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d007      	beq.n	80051f4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051f2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695a      	ldr	r2, [r3, #20]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0220 	orr.w	r2, r2, #32
 8005212:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	bc80      	pop	{r7}
 800521e:	4770      	bx	lr

08005220 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005220:	b480      	push	{r7}
 8005222:	b095      	sub	sp, #84	@ 0x54
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	330c      	adds	r3, #12
 800522e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005232:	e853 3f00 	ldrex	r3, [r3]
 8005236:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800523e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	330c      	adds	r3, #12
 8005246:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005248:	643a      	str	r2, [r7, #64]	@ 0x40
 800524a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800524e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005250:	e841 2300 	strex	r3, r2, [r1]
 8005254:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e5      	bne.n	8005228 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3314      	adds	r3, #20
 8005262:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	61fb      	str	r3, [r7, #28]
   return(result);
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	f023 0301 	bic.w	r3, r3, #1
 8005272:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3314      	adds	r3, #20
 800527a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800527c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800527e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005284:	e841 2300 	strex	r3, r2, [r1]
 8005288:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1e5      	bne.n	800525c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005294:	2b01      	cmp	r3, #1
 8005296:	d119      	bne.n	80052cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	330c      	adds	r3, #12
 800529e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	e853 3f00 	ldrex	r3, [r3]
 80052a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f023 0310 	bic.w	r3, r3, #16
 80052ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	330c      	adds	r3, #12
 80052b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052b8:	61ba      	str	r2, [r7, #24]
 80052ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	6979      	ldr	r1, [r7, #20]
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	e841 2300 	strex	r3, r2, [r1]
 80052c4:	613b      	str	r3, [r7, #16]
   return(result);
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e5      	bne.n	8005298 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80052da:	bf00      	nop
 80052dc:	3754      	adds	r7, #84	@ 0x54
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr

080052e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f7ff ff41 	bl	8005186 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005304:	bf00      	nop
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b21      	cmp	r3, #33	@ 0x21
 800531e:	d13e      	bne.n	800539e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005328:	d114      	bne.n	8005354 <UART_Transmit_IT+0x48>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d110      	bne.n	8005354 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	461a      	mov	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005346:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	1c9a      	adds	r2, r3, #2
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	621a      	str	r2, [r3, #32]
 8005352:	e008      	b.n	8005366 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	1c59      	adds	r1, r3, #1
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6211      	str	r1, [r2, #32]
 800535e:	781a      	ldrb	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29b      	uxth	r3, r3
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	4619      	mov	r1, r3
 8005374:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10f      	bne.n	800539a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005388:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005398:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	e000      	b.n	80053a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800539e:	2302      	movs	r3, #2
  }
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr

080053aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff fed2 	bl	8005174 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b08c      	sub	sp, #48	@ 0x30
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b22      	cmp	r3, #34	@ 0x22
 80053ec:	f040 80ae 	bne.w	800554c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053f8:	d117      	bne.n	800542a <UART_Receive_IT+0x50>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d113      	bne.n	800542a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005402:	2300      	movs	r3, #0
 8005404:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	b29b      	uxth	r3, r3
 8005414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005418:	b29a      	uxth	r2, r3
 800541a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005422:	1c9a      	adds	r2, r3, #2
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	629a      	str	r2, [r3, #40]	@ 0x28
 8005428:	e026      	b.n	8005478 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005430:	2300      	movs	r3, #0
 8005432:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800543c:	d007      	beq.n	800544e <UART_Receive_IT+0x74>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <UART_Receive_IT+0x82>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	b2da      	uxtb	r2, r3
 8005456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	e008      	b.n	800546e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	b2db      	uxtb	r3, r3
 8005464:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005468:	b2da      	uxtb	r2, r3
 800546a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800547c:	b29b      	uxth	r3, r3
 800547e:	3b01      	subs	r3, #1
 8005480:	b29b      	uxth	r3, r3
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	4619      	mov	r1, r3
 8005486:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005488:	2b00      	cmp	r3, #0
 800548a:	d15d      	bne.n	8005548 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0220 	bic.w	r2, r2, #32
 800549a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695a      	ldr	r2, [r3, #20]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0201 	bic.w	r2, r2, #1
 80054ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d135      	bne.n	800553e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	330c      	adds	r3, #12
 80054de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	613b      	str	r3, [r7, #16]
   return(result);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f023 0310 	bic.w	r3, r3, #16
 80054ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	330c      	adds	r3, #12
 80054f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054f8:	623a      	str	r2, [r7, #32]
 80054fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	69f9      	ldr	r1, [r7, #28]
 80054fe:	6a3a      	ldr	r2, [r7, #32]
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	61bb      	str	r3, [r7, #24]
   return(result);
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e5      	bne.n	80054d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	2b10      	cmp	r3, #16
 8005518:	d10a      	bne.n	8005530 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005534:	4619      	mov	r1, r3
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7ff fe2e 	bl	8005198 <HAL_UARTEx_RxEventCallback>
 800553c:	e002      	b.n	8005544 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fd f884 	bl	800264c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	e002      	b.n	800554e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	e000      	b.n	800554e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800554c:	2302      	movs	r3, #2
  }
}
 800554e:	4618      	mov	r0, r3
 8005550:	3730      	adds	r7, #48	@ 0x30
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
	...

08005558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005592:	f023 030c 	bic.w	r3, r3, #12
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6812      	ldr	r2, [r2, #0]
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	430b      	orrs	r3, r1
 800559e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a2c      	ldr	r2, [pc, #176]	@ (800566c <UART_SetConfig+0x114>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d103      	bne.n	80055c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055c0:	f7fe fed8 	bl	8004374 <HAL_RCC_GetPCLK2Freq>
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	e002      	b.n	80055ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055c8:	f7fe fec0 	bl	800434c <HAL_RCC_GetPCLK1Freq>
 80055cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	009a      	lsls	r2, r3, #2
 80055d8:	441a      	add	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e4:	4a22      	ldr	r2, [pc, #136]	@ (8005670 <UART_SetConfig+0x118>)
 80055e6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	0119      	lsls	r1, r3, #4
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	009a      	lsls	r2, r3, #2
 80055f8:	441a      	add	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	fbb2 f2f3 	udiv	r2, r2, r3
 8005604:	4b1a      	ldr	r3, [pc, #104]	@ (8005670 <UART_SetConfig+0x118>)
 8005606:	fba3 0302 	umull	r0, r3, r3, r2
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	2064      	movs	r0, #100	@ 0x64
 800560e:	fb00 f303 	mul.w	r3, r0, r3
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	3332      	adds	r3, #50	@ 0x32
 8005618:	4a15      	ldr	r2, [pc, #84]	@ (8005670 <UART_SetConfig+0x118>)
 800561a:	fba2 2303 	umull	r2, r3, r2, r3
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005624:	4419      	add	r1, r3
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	009a      	lsls	r2, r3, #2
 8005630:	441a      	add	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	fbb2 f2f3 	udiv	r2, r2, r3
 800563c:	4b0c      	ldr	r3, [pc, #48]	@ (8005670 <UART_SetConfig+0x118>)
 800563e:	fba3 0302 	umull	r0, r3, r3, r2
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	2064      	movs	r0, #100	@ 0x64
 8005646:	fb00 f303 	mul.w	r3, r0, r3
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	3332      	adds	r3, #50	@ 0x32
 8005650:	4a07      	ldr	r2, [pc, #28]	@ (8005670 <UART_SetConfig+0x118>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	095b      	lsrs	r3, r3, #5
 8005658:	f003 020f 	and.w	r2, r3, #15
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	440a      	add	r2, r1
 8005662:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005664:	bf00      	nop
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40013800 	.word	0x40013800
 8005670:	51eb851f 	.word	0x51eb851f

08005674 <malloc>:
 8005674:	4b02      	ldr	r3, [pc, #8]	@ (8005680 <malloc+0xc>)
 8005676:	4601      	mov	r1, r0
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	f000 b825 	b.w	80056c8 <_malloc_r>
 800567e:	bf00      	nop
 8005680:	2000003c 	.word	0x2000003c

08005684 <sbrk_aligned>:
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	4e0f      	ldr	r6, [pc, #60]	@ (80056c4 <sbrk_aligned+0x40>)
 8005688:	460c      	mov	r4, r1
 800568a:	6831      	ldr	r1, [r6, #0]
 800568c:	4605      	mov	r5, r0
 800568e:	b911      	cbnz	r1, 8005696 <sbrk_aligned+0x12>
 8005690:	f000 f914 	bl	80058bc <_sbrk_r>
 8005694:	6030      	str	r0, [r6, #0]
 8005696:	4621      	mov	r1, r4
 8005698:	4628      	mov	r0, r5
 800569a:	f000 f90f 	bl	80058bc <_sbrk_r>
 800569e:	1c43      	adds	r3, r0, #1
 80056a0:	d103      	bne.n	80056aa <sbrk_aligned+0x26>
 80056a2:	f04f 34ff 	mov.w	r4, #4294967295
 80056a6:	4620      	mov	r0, r4
 80056a8:	bd70      	pop	{r4, r5, r6, pc}
 80056aa:	1cc4      	adds	r4, r0, #3
 80056ac:	f024 0403 	bic.w	r4, r4, #3
 80056b0:	42a0      	cmp	r0, r4
 80056b2:	d0f8      	beq.n	80056a6 <sbrk_aligned+0x22>
 80056b4:	1a21      	subs	r1, r4, r0
 80056b6:	4628      	mov	r0, r5
 80056b8:	f000 f900 	bl	80058bc <_sbrk_r>
 80056bc:	3001      	adds	r0, #1
 80056be:	d1f2      	bne.n	80056a6 <sbrk_aligned+0x22>
 80056c0:	e7ef      	b.n	80056a2 <sbrk_aligned+0x1e>
 80056c2:	bf00      	nop
 80056c4:	20000508 	.word	0x20000508

080056c8 <_malloc_r>:
 80056c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056cc:	1ccd      	adds	r5, r1, #3
 80056ce:	f025 0503 	bic.w	r5, r5, #3
 80056d2:	3508      	adds	r5, #8
 80056d4:	2d0c      	cmp	r5, #12
 80056d6:	bf38      	it	cc
 80056d8:	250c      	movcc	r5, #12
 80056da:	2d00      	cmp	r5, #0
 80056dc:	4606      	mov	r6, r0
 80056de:	db01      	blt.n	80056e4 <_malloc_r+0x1c>
 80056e0:	42a9      	cmp	r1, r5
 80056e2:	d904      	bls.n	80056ee <_malloc_r+0x26>
 80056e4:	230c      	movs	r3, #12
 80056e6:	6033      	str	r3, [r6, #0]
 80056e8:	2000      	movs	r0, #0
 80056ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057c4 <_malloc_r+0xfc>
 80056f2:	f000 f869 	bl	80057c8 <__malloc_lock>
 80056f6:	f8d8 3000 	ldr.w	r3, [r8]
 80056fa:	461c      	mov	r4, r3
 80056fc:	bb44      	cbnz	r4, 8005750 <_malloc_r+0x88>
 80056fe:	4629      	mov	r1, r5
 8005700:	4630      	mov	r0, r6
 8005702:	f7ff ffbf 	bl	8005684 <sbrk_aligned>
 8005706:	1c43      	adds	r3, r0, #1
 8005708:	4604      	mov	r4, r0
 800570a:	d158      	bne.n	80057be <_malloc_r+0xf6>
 800570c:	f8d8 4000 	ldr.w	r4, [r8]
 8005710:	4627      	mov	r7, r4
 8005712:	2f00      	cmp	r7, #0
 8005714:	d143      	bne.n	800579e <_malloc_r+0xd6>
 8005716:	2c00      	cmp	r4, #0
 8005718:	d04b      	beq.n	80057b2 <_malloc_r+0xea>
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	4639      	mov	r1, r7
 800571e:	4630      	mov	r0, r6
 8005720:	eb04 0903 	add.w	r9, r4, r3
 8005724:	f000 f8ca 	bl	80058bc <_sbrk_r>
 8005728:	4581      	cmp	r9, r0
 800572a:	d142      	bne.n	80057b2 <_malloc_r+0xea>
 800572c:	6821      	ldr	r1, [r4, #0]
 800572e:	4630      	mov	r0, r6
 8005730:	1a6d      	subs	r5, r5, r1
 8005732:	4629      	mov	r1, r5
 8005734:	f7ff ffa6 	bl	8005684 <sbrk_aligned>
 8005738:	3001      	adds	r0, #1
 800573a:	d03a      	beq.n	80057b2 <_malloc_r+0xea>
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	442b      	add	r3, r5
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	f8d8 3000 	ldr.w	r3, [r8]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	bb62      	cbnz	r2, 80057a4 <_malloc_r+0xdc>
 800574a:	f8c8 7000 	str.w	r7, [r8]
 800574e:	e00f      	b.n	8005770 <_malloc_r+0xa8>
 8005750:	6822      	ldr	r2, [r4, #0]
 8005752:	1b52      	subs	r2, r2, r5
 8005754:	d420      	bmi.n	8005798 <_malloc_r+0xd0>
 8005756:	2a0b      	cmp	r2, #11
 8005758:	d917      	bls.n	800578a <_malloc_r+0xc2>
 800575a:	1961      	adds	r1, r4, r5
 800575c:	42a3      	cmp	r3, r4
 800575e:	6025      	str	r5, [r4, #0]
 8005760:	bf18      	it	ne
 8005762:	6059      	strne	r1, [r3, #4]
 8005764:	6863      	ldr	r3, [r4, #4]
 8005766:	bf08      	it	eq
 8005768:	f8c8 1000 	streq.w	r1, [r8]
 800576c:	5162      	str	r2, [r4, r5]
 800576e:	604b      	str	r3, [r1, #4]
 8005770:	4630      	mov	r0, r6
 8005772:	f000 f82f 	bl	80057d4 <__malloc_unlock>
 8005776:	f104 000b 	add.w	r0, r4, #11
 800577a:	1d23      	adds	r3, r4, #4
 800577c:	f020 0007 	bic.w	r0, r0, #7
 8005780:	1ac2      	subs	r2, r0, r3
 8005782:	bf1c      	itt	ne
 8005784:	1a1b      	subne	r3, r3, r0
 8005786:	50a3      	strne	r3, [r4, r2]
 8005788:	e7af      	b.n	80056ea <_malloc_r+0x22>
 800578a:	6862      	ldr	r2, [r4, #4]
 800578c:	42a3      	cmp	r3, r4
 800578e:	bf0c      	ite	eq
 8005790:	f8c8 2000 	streq.w	r2, [r8]
 8005794:	605a      	strne	r2, [r3, #4]
 8005796:	e7eb      	b.n	8005770 <_malloc_r+0xa8>
 8005798:	4623      	mov	r3, r4
 800579a:	6864      	ldr	r4, [r4, #4]
 800579c:	e7ae      	b.n	80056fc <_malloc_r+0x34>
 800579e:	463c      	mov	r4, r7
 80057a0:	687f      	ldr	r7, [r7, #4]
 80057a2:	e7b6      	b.n	8005712 <_malloc_r+0x4a>
 80057a4:	461a      	mov	r2, r3
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	42a3      	cmp	r3, r4
 80057aa:	d1fb      	bne.n	80057a4 <_malloc_r+0xdc>
 80057ac:	2300      	movs	r3, #0
 80057ae:	6053      	str	r3, [r2, #4]
 80057b0:	e7de      	b.n	8005770 <_malloc_r+0xa8>
 80057b2:	230c      	movs	r3, #12
 80057b4:	4630      	mov	r0, r6
 80057b6:	6033      	str	r3, [r6, #0]
 80057b8:	f000 f80c 	bl	80057d4 <__malloc_unlock>
 80057bc:	e794      	b.n	80056e8 <_malloc_r+0x20>
 80057be:	6005      	str	r5, [r0, #0]
 80057c0:	e7d6      	b.n	8005770 <_malloc_r+0xa8>
 80057c2:	bf00      	nop
 80057c4:	2000050c 	.word	0x2000050c

080057c8 <__malloc_lock>:
 80057c8:	4801      	ldr	r0, [pc, #4]	@ (80057d0 <__malloc_lock+0x8>)
 80057ca:	f000 b8b1 	b.w	8005930 <__retarget_lock_acquire_recursive>
 80057ce:	bf00      	nop
 80057d0:	2000064c 	.word	0x2000064c

080057d4 <__malloc_unlock>:
 80057d4:	4801      	ldr	r0, [pc, #4]	@ (80057dc <__malloc_unlock+0x8>)
 80057d6:	f000 b8ac 	b.w	8005932 <__retarget_lock_release_recursive>
 80057da:	bf00      	nop
 80057dc:	2000064c 	.word	0x2000064c

080057e0 <siprintf>:
 80057e0:	b40e      	push	{r1, r2, r3}
 80057e2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80057e6:	b510      	push	{r4, lr}
 80057e8:	2400      	movs	r4, #0
 80057ea:	b09d      	sub	sp, #116	@ 0x74
 80057ec:	ab1f      	add	r3, sp, #124	@ 0x7c
 80057ee:	9002      	str	r0, [sp, #8]
 80057f0:	9006      	str	r0, [sp, #24]
 80057f2:	9107      	str	r1, [sp, #28]
 80057f4:	9104      	str	r1, [sp, #16]
 80057f6:	4809      	ldr	r0, [pc, #36]	@ (800581c <siprintf+0x3c>)
 80057f8:	4909      	ldr	r1, [pc, #36]	@ (8005820 <siprintf+0x40>)
 80057fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80057fe:	9105      	str	r1, [sp, #20]
 8005800:	6800      	ldr	r0, [r0, #0]
 8005802:	a902      	add	r1, sp, #8
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005808:	f000 f938 	bl	8005a7c <_svfiprintf_r>
 800580c:	9b02      	ldr	r3, [sp, #8]
 800580e:	701c      	strb	r4, [r3, #0]
 8005810:	b01d      	add	sp, #116	@ 0x74
 8005812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005816:	b003      	add	sp, #12
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	2000003c 	.word	0x2000003c
 8005820:	ffff0208 	.word	0xffff0208

08005824 <siscanf>:
 8005824:	b40e      	push	{r1, r2, r3}
 8005826:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800582a:	b570      	push	{r4, r5, r6, lr}
 800582c:	2500      	movs	r5, #0
 800582e:	b09d      	sub	sp, #116	@ 0x74
 8005830:	ac21      	add	r4, sp, #132	@ 0x84
 8005832:	f854 6b04 	ldr.w	r6, [r4], #4
 8005836:	f8ad 2014 	strh.w	r2, [sp, #20]
 800583a:	951b      	str	r5, [sp, #108]	@ 0x6c
 800583c:	9002      	str	r0, [sp, #8]
 800583e:	9006      	str	r0, [sp, #24]
 8005840:	f7fa fc84 	bl	800014c <strlen>
 8005844:	4b0b      	ldr	r3, [pc, #44]	@ (8005874 <siscanf+0x50>)
 8005846:	9003      	str	r0, [sp, #12]
 8005848:	930b      	str	r3, [sp, #44]	@ 0x2c
 800584a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800584e:	9007      	str	r0, [sp, #28]
 8005850:	4809      	ldr	r0, [pc, #36]	@ (8005878 <siscanf+0x54>)
 8005852:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005856:	4632      	mov	r2, r6
 8005858:	4623      	mov	r3, r4
 800585a:	a902      	add	r1, sp, #8
 800585c:	6800      	ldr	r0, [r0, #0]
 800585e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8005860:	9514      	str	r5, [sp, #80]	@ 0x50
 8005862:	9401      	str	r4, [sp, #4]
 8005864:	f000 fa60 	bl	8005d28 <__ssvfiscanf_r>
 8005868:	b01d      	add	sp, #116	@ 0x74
 800586a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800586e:	b003      	add	sp, #12
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	0800587d 	.word	0x0800587d
 8005878:	2000003c 	.word	0x2000003c

0800587c <__seofread>:
 800587c:	2000      	movs	r0, #0
 800587e:	4770      	bx	lr

08005880 <memset>:
 8005880:	4603      	mov	r3, r0
 8005882:	4402      	add	r2, r0
 8005884:	4293      	cmp	r3, r2
 8005886:	d100      	bne.n	800588a <memset+0xa>
 8005888:	4770      	bx	lr
 800588a:	f803 1b01 	strb.w	r1, [r3], #1
 800588e:	e7f9      	b.n	8005884 <memset+0x4>

08005890 <strstr>:
 8005890:	780a      	ldrb	r2, [r1, #0]
 8005892:	b570      	push	{r4, r5, r6, lr}
 8005894:	b96a      	cbnz	r2, 80058b2 <strstr+0x22>
 8005896:	bd70      	pop	{r4, r5, r6, pc}
 8005898:	429a      	cmp	r2, r3
 800589a:	d109      	bne.n	80058b0 <strstr+0x20>
 800589c:	460c      	mov	r4, r1
 800589e:	4605      	mov	r5, r0
 80058a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0f6      	beq.n	8005896 <strstr+0x6>
 80058a8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80058ac:	429e      	cmp	r6, r3
 80058ae:	d0f7      	beq.n	80058a0 <strstr+0x10>
 80058b0:	3001      	adds	r0, #1
 80058b2:	7803      	ldrb	r3, [r0, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1ef      	bne.n	8005898 <strstr+0x8>
 80058b8:	4618      	mov	r0, r3
 80058ba:	e7ec      	b.n	8005896 <strstr+0x6>

080058bc <_sbrk_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	2300      	movs	r3, #0
 80058c0:	4d05      	ldr	r5, [pc, #20]	@ (80058d8 <_sbrk_r+0x1c>)
 80058c2:	4604      	mov	r4, r0
 80058c4:	4608      	mov	r0, r1
 80058c6:	602b      	str	r3, [r5, #0]
 80058c8:	f7fd fac4 	bl	8002e54 <_sbrk>
 80058cc:	1c43      	adds	r3, r0, #1
 80058ce:	d102      	bne.n	80058d6 <_sbrk_r+0x1a>
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	b103      	cbz	r3, 80058d6 <_sbrk_r+0x1a>
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	bd38      	pop	{r3, r4, r5, pc}
 80058d8:	20000648 	.word	0x20000648

080058dc <__errno>:
 80058dc:	4b01      	ldr	r3, [pc, #4]	@ (80058e4 <__errno+0x8>)
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	2000003c 	.word	0x2000003c

080058e8 <__libc_init_array>:
 80058e8:	b570      	push	{r4, r5, r6, lr}
 80058ea:	2600      	movs	r6, #0
 80058ec:	4d0c      	ldr	r5, [pc, #48]	@ (8005920 <__libc_init_array+0x38>)
 80058ee:	4c0d      	ldr	r4, [pc, #52]	@ (8005924 <__libc_init_array+0x3c>)
 80058f0:	1b64      	subs	r4, r4, r5
 80058f2:	10a4      	asrs	r4, r4, #2
 80058f4:	42a6      	cmp	r6, r4
 80058f6:	d109      	bne.n	800590c <__libc_init_array+0x24>
 80058f8:	f001 fdf6 	bl	80074e8 <_init>
 80058fc:	2600      	movs	r6, #0
 80058fe:	4d0a      	ldr	r5, [pc, #40]	@ (8005928 <__libc_init_array+0x40>)
 8005900:	4c0a      	ldr	r4, [pc, #40]	@ (800592c <__libc_init_array+0x44>)
 8005902:	1b64      	subs	r4, r4, r5
 8005904:	10a4      	asrs	r4, r4, #2
 8005906:	42a6      	cmp	r6, r4
 8005908:	d105      	bne.n	8005916 <__libc_init_array+0x2e>
 800590a:	bd70      	pop	{r4, r5, r6, pc}
 800590c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005910:	4798      	blx	r3
 8005912:	3601      	adds	r6, #1
 8005914:	e7ee      	b.n	80058f4 <__libc_init_array+0xc>
 8005916:	f855 3b04 	ldr.w	r3, [r5], #4
 800591a:	4798      	blx	r3
 800591c:	3601      	adds	r6, #1
 800591e:	e7f2      	b.n	8005906 <__libc_init_array+0x1e>
 8005920:	08008888 	.word	0x08008888
 8005924:	08008888 	.word	0x08008888
 8005928:	08008888 	.word	0x08008888
 800592c:	0800888c 	.word	0x0800888c

08005930 <__retarget_lock_acquire_recursive>:
 8005930:	4770      	bx	lr

08005932 <__retarget_lock_release_recursive>:
 8005932:	4770      	bx	lr

08005934 <_free_r>:
 8005934:	b538      	push	{r3, r4, r5, lr}
 8005936:	4605      	mov	r5, r0
 8005938:	2900      	cmp	r1, #0
 800593a:	d040      	beq.n	80059be <_free_r+0x8a>
 800593c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005940:	1f0c      	subs	r4, r1, #4
 8005942:	2b00      	cmp	r3, #0
 8005944:	bfb8      	it	lt
 8005946:	18e4      	addlt	r4, r4, r3
 8005948:	f7ff ff3e 	bl	80057c8 <__malloc_lock>
 800594c:	4a1c      	ldr	r2, [pc, #112]	@ (80059c0 <_free_r+0x8c>)
 800594e:	6813      	ldr	r3, [r2, #0]
 8005950:	b933      	cbnz	r3, 8005960 <_free_r+0x2c>
 8005952:	6063      	str	r3, [r4, #4]
 8005954:	6014      	str	r4, [r2, #0]
 8005956:	4628      	mov	r0, r5
 8005958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800595c:	f7ff bf3a 	b.w	80057d4 <__malloc_unlock>
 8005960:	42a3      	cmp	r3, r4
 8005962:	d908      	bls.n	8005976 <_free_r+0x42>
 8005964:	6820      	ldr	r0, [r4, #0]
 8005966:	1821      	adds	r1, r4, r0
 8005968:	428b      	cmp	r3, r1
 800596a:	bf01      	itttt	eq
 800596c:	6819      	ldreq	r1, [r3, #0]
 800596e:	685b      	ldreq	r3, [r3, #4]
 8005970:	1809      	addeq	r1, r1, r0
 8005972:	6021      	streq	r1, [r4, #0]
 8005974:	e7ed      	b.n	8005952 <_free_r+0x1e>
 8005976:	461a      	mov	r2, r3
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	b10b      	cbz	r3, 8005980 <_free_r+0x4c>
 800597c:	42a3      	cmp	r3, r4
 800597e:	d9fa      	bls.n	8005976 <_free_r+0x42>
 8005980:	6811      	ldr	r1, [r2, #0]
 8005982:	1850      	adds	r0, r2, r1
 8005984:	42a0      	cmp	r0, r4
 8005986:	d10b      	bne.n	80059a0 <_free_r+0x6c>
 8005988:	6820      	ldr	r0, [r4, #0]
 800598a:	4401      	add	r1, r0
 800598c:	1850      	adds	r0, r2, r1
 800598e:	4283      	cmp	r3, r0
 8005990:	6011      	str	r1, [r2, #0]
 8005992:	d1e0      	bne.n	8005956 <_free_r+0x22>
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	4408      	add	r0, r1
 800599a:	6010      	str	r0, [r2, #0]
 800599c:	6053      	str	r3, [r2, #4]
 800599e:	e7da      	b.n	8005956 <_free_r+0x22>
 80059a0:	d902      	bls.n	80059a8 <_free_r+0x74>
 80059a2:	230c      	movs	r3, #12
 80059a4:	602b      	str	r3, [r5, #0]
 80059a6:	e7d6      	b.n	8005956 <_free_r+0x22>
 80059a8:	6820      	ldr	r0, [r4, #0]
 80059aa:	1821      	adds	r1, r4, r0
 80059ac:	428b      	cmp	r3, r1
 80059ae:	bf01      	itttt	eq
 80059b0:	6819      	ldreq	r1, [r3, #0]
 80059b2:	685b      	ldreq	r3, [r3, #4]
 80059b4:	1809      	addeq	r1, r1, r0
 80059b6:	6021      	streq	r1, [r4, #0]
 80059b8:	6063      	str	r3, [r4, #4]
 80059ba:	6054      	str	r4, [r2, #4]
 80059bc:	e7cb      	b.n	8005956 <_free_r+0x22>
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	2000050c 	.word	0x2000050c

080059c4 <__ssputs_r>:
 80059c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c8:	461f      	mov	r7, r3
 80059ca:	688e      	ldr	r6, [r1, #8]
 80059cc:	4682      	mov	sl, r0
 80059ce:	42be      	cmp	r6, r7
 80059d0:	460c      	mov	r4, r1
 80059d2:	4690      	mov	r8, r2
 80059d4:	680b      	ldr	r3, [r1, #0]
 80059d6:	d82d      	bhi.n	8005a34 <__ssputs_r+0x70>
 80059d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80059e0:	d026      	beq.n	8005a30 <__ssputs_r+0x6c>
 80059e2:	6965      	ldr	r5, [r4, #20]
 80059e4:	6909      	ldr	r1, [r1, #16]
 80059e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059ea:	eba3 0901 	sub.w	r9, r3, r1
 80059ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059f2:	1c7b      	adds	r3, r7, #1
 80059f4:	444b      	add	r3, r9
 80059f6:	106d      	asrs	r5, r5, #1
 80059f8:	429d      	cmp	r5, r3
 80059fa:	bf38      	it	cc
 80059fc:	461d      	movcc	r5, r3
 80059fe:	0553      	lsls	r3, r2, #21
 8005a00:	d527      	bpl.n	8005a52 <__ssputs_r+0x8e>
 8005a02:	4629      	mov	r1, r5
 8005a04:	f7ff fe60 	bl	80056c8 <_malloc_r>
 8005a08:	4606      	mov	r6, r0
 8005a0a:	b360      	cbz	r0, 8005a66 <__ssputs_r+0xa2>
 8005a0c:	464a      	mov	r2, r9
 8005a0e:	6921      	ldr	r1, [r4, #16]
 8005a10:	f000 fe73 	bl	80066fa <memcpy>
 8005a14:	89a3      	ldrh	r3, [r4, #12]
 8005a16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a1e:	81a3      	strh	r3, [r4, #12]
 8005a20:	6126      	str	r6, [r4, #16]
 8005a22:	444e      	add	r6, r9
 8005a24:	6026      	str	r6, [r4, #0]
 8005a26:	463e      	mov	r6, r7
 8005a28:	6165      	str	r5, [r4, #20]
 8005a2a:	eba5 0509 	sub.w	r5, r5, r9
 8005a2e:	60a5      	str	r5, [r4, #8]
 8005a30:	42be      	cmp	r6, r7
 8005a32:	d900      	bls.n	8005a36 <__ssputs_r+0x72>
 8005a34:	463e      	mov	r6, r7
 8005a36:	4632      	mov	r2, r6
 8005a38:	4641      	mov	r1, r8
 8005a3a:	6820      	ldr	r0, [r4, #0]
 8005a3c:	f000 fe35 	bl	80066aa <memmove>
 8005a40:	2000      	movs	r0, #0
 8005a42:	68a3      	ldr	r3, [r4, #8]
 8005a44:	1b9b      	subs	r3, r3, r6
 8005a46:	60a3      	str	r3, [r4, #8]
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	4433      	add	r3, r6
 8005a4c:	6023      	str	r3, [r4, #0]
 8005a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a52:	462a      	mov	r2, r5
 8005a54:	f000 fe5f 	bl	8006716 <_realloc_r>
 8005a58:	4606      	mov	r6, r0
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d1e0      	bne.n	8005a20 <__ssputs_r+0x5c>
 8005a5e:	4650      	mov	r0, sl
 8005a60:	6921      	ldr	r1, [r4, #16]
 8005a62:	f7ff ff67 	bl	8005934 <_free_r>
 8005a66:	230c      	movs	r3, #12
 8005a68:	f8ca 3000 	str.w	r3, [sl]
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a76:	81a3      	strh	r3, [r4, #12]
 8005a78:	e7e9      	b.n	8005a4e <__ssputs_r+0x8a>
	...

08005a7c <_svfiprintf_r>:
 8005a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a80:	4698      	mov	r8, r3
 8005a82:	898b      	ldrh	r3, [r1, #12]
 8005a84:	4607      	mov	r7, r0
 8005a86:	061b      	lsls	r3, r3, #24
 8005a88:	460d      	mov	r5, r1
 8005a8a:	4614      	mov	r4, r2
 8005a8c:	b09d      	sub	sp, #116	@ 0x74
 8005a8e:	d510      	bpl.n	8005ab2 <_svfiprintf_r+0x36>
 8005a90:	690b      	ldr	r3, [r1, #16]
 8005a92:	b973      	cbnz	r3, 8005ab2 <_svfiprintf_r+0x36>
 8005a94:	2140      	movs	r1, #64	@ 0x40
 8005a96:	f7ff fe17 	bl	80056c8 <_malloc_r>
 8005a9a:	6028      	str	r0, [r5, #0]
 8005a9c:	6128      	str	r0, [r5, #16]
 8005a9e:	b930      	cbnz	r0, 8005aae <_svfiprintf_r+0x32>
 8005aa0:	230c      	movs	r3, #12
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa8:	b01d      	add	sp, #116	@ 0x74
 8005aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aae:	2340      	movs	r3, #64	@ 0x40
 8005ab0:	616b      	str	r3, [r5, #20]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ab6:	2320      	movs	r3, #32
 8005ab8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005abc:	2330      	movs	r3, #48	@ 0x30
 8005abe:	f04f 0901 	mov.w	r9, #1
 8005ac2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ac6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005c60 <_svfiprintf_r+0x1e4>
 8005aca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ace:	4623      	mov	r3, r4
 8005ad0:	469a      	mov	sl, r3
 8005ad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ad6:	b10a      	cbz	r2, 8005adc <_svfiprintf_r+0x60>
 8005ad8:	2a25      	cmp	r2, #37	@ 0x25
 8005ada:	d1f9      	bne.n	8005ad0 <_svfiprintf_r+0x54>
 8005adc:	ebba 0b04 	subs.w	fp, sl, r4
 8005ae0:	d00b      	beq.n	8005afa <_svfiprintf_r+0x7e>
 8005ae2:	465b      	mov	r3, fp
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	4638      	mov	r0, r7
 8005aea:	f7ff ff6b 	bl	80059c4 <__ssputs_r>
 8005aee:	3001      	adds	r0, #1
 8005af0:	f000 80a7 	beq.w	8005c42 <_svfiprintf_r+0x1c6>
 8005af4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005af6:	445a      	add	r2, fp
 8005af8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005afa:	f89a 3000 	ldrb.w	r3, [sl]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 809f 	beq.w	8005c42 <_svfiprintf_r+0x1c6>
 8005b04:	2300      	movs	r3, #0
 8005b06:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b0e:	f10a 0a01 	add.w	sl, sl, #1
 8005b12:	9304      	str	r3, [sp, #16]
 8005b14:	9307      	str	r3, [sp, #28]
 8005b16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b1c:	4654      	mov	r4, sl
 8005b1e:	2205      	movs	r2, #5
 8005b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b24:	484e      	ldr	r0, [pc, #312]	@ (8005c60 <_svfiprintf_r+0x1e4>)
 8005b26:	f000 fdda 	bl	80066de <memchr>
 8005b2a:	9a04      	ldr	r2, [sp, #16]
 8005b2c:	b9d8      	cbnz	r0, 8005b66 <_svfiprintf_r+0xea>
 8005b2e:	06d0      	lsls	r0, r2, #27
 8005b30:	bf44      	itt	mi
 8005b32:	2320      	movmi	r3, #32
 8005b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b38:	0711      	lsls	r1, r2, #28
 8005b3a:	bf44      	itt	mi
 8005b3c:	232b      	movmi	r3, #43	@ 0x2b
 8005b3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b42:	f89a 3000 	ldrb.w	r3, [sl]
 8005b46:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b48:	d015      	beq.n	8005b76 <_svfiprintf_r+0xfa>
 8005b4a:	4654      	mov	r4, sl
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	f04f 0c0a 	mov.w	ip, #10
 8005b52:	9a07      	ldr	r2, [sp, #28]
 8005b54:	4621      	mov	r1, r4
 8005b56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b5a:	3b30      	subs	r3, #48	@ 0x30
 8005b5c:	2b09      	cmp	r3, #9
 8005b5e:	d94b      	bls.n	8005bf8 <_svfiprintf_r+0x17c>
 8005b60:	b1b0      	cbz	r0, 8005b90 <_svfiprintf_r+0x114>
 8005b62:	9207      	str	r2, [sp, #28]
 8005b64:	e014      	b.n	8005b90 <_svfiprintf_r+0x114>
 8005b66:	eba0 0308 	sub.w	r3, r0, r8
 8005b6a:	fa09 f303 	lsl.w	r3, r9, r3
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	46a2      	mov	sl, r4
 8005b72:	9304      	str	r3, [sp, #16]
 8005b74:	e7d2      	b.n	8005b1c <_svfiprintf_r+0xa0>
 8005b76:	9b03      	ldr	r3, [sp, #12]
 8005b78:	1d19      	adds	r1, r3, #4
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	9103      	str	r1, [sp, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	bfbb      	ittet	lt
 8005b82:	425b      	neglt	r3, r3
 8005b84:	f042 0202 	orrlt.w	r2, r2, #2
 8005b88:	9307      	strge	r3, [sp, #28]
 8005b8a:	9307      	strlt	r3, [sp, #28]
 8005b8c:	bfb8      	it	lt
 8005b8e:	9204      	strlt	r2, [sp, #16]
 8005b90:	7823      	ldrb	r3, [r4, #0]
 8005b92:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b94:	d10a      	bne.n	8005bac <_svfiprintf_r+0x130>
 8005b96:	7863      	ldrb	r3, [r4, #1]
 8005b98:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b9a:	d132      	bne.n	8005c02 <_svfiprintf_r+0x186>
 8005b9c:	9b03      	ldr	r3, [sp, #12]
 8005b9e:	3402      	adds	r4, #2
 8005ba0:	1d1a      	adds	r2, r3, #4
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	9203      	str	r2, [sp, #12]
 8005ba6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005baa:	9305      	str	r3, [sp, #20]
 8005bac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005c64 <_svfiprintf_r+0x1e8>
 8005bb0:	2203      	movs	r2, #3
 8005bb2:	4650      	mov	r0, sl
 8005bb4:	7821      	ldrb	r1, [r4, #0]
 8005bb6:	f000 fd92 	bl	80066de <memchr>
 8005bba:	b138      	cbz	r0, 8005bcc <_svfiprintf_r+0x150>
 8005bbc:	2240      	movs	r2, #64	@ 0x40
 8005bbe:	9b04      	ldr	r3, [sp, #16]
 8005bc0:	eba0 000a 	sub.w	r0, r0, sl
 8005bc4:	4082      	lsls	r2, r0
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	3401      	adds	r4, #1
 8005bca:	9304      	str	r3, [sp, #16]
 8005bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd0:	2206      	movs	r2, #6
 8005bd2:	4825      	ldr	r0, [pc, #148]	@ (8005c68 <_svfiprintf_r+0x1ec>)
 8005bd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bd8:	f000 fd81 	bl	80066de <memchr>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	d036      	beq.n	8005c4e <_svfiprintf_r+0x1d2>
 8005be0:	4b22      	ldr	r3, [pc, #136]	@ (8005c6c <_svfiprintf_r+0x1f0>)
 8005be2:	bb1b      	cbnz	r3, 8005c2c <_svfiprintf_r+0x1b0>
 8005be4:	9b03      	ldr	r3, [sp, #12]
 8005be6:	3307      	adds	r3, #7
 8005be8:	f023 0307 	bic.w	r3, r3, #7
 8005bec:	3308      	adds	r3, #8
 8005bee:	9303      	str	r3, [sp, #12]
 8005bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bf2:	4433      	add	r3, r6
 8005bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bf6:	e76a      	b.n	8005ace <_svfiprintf_r+0x52>
 8005bf8:	460c      	mov	r4, r1
 8005bfa:	2001      	movs	r0, #1
 8005bfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c00:	e7a8      	b.n	8005b54 <_svfiprintf_r+0xd8>
 8005c02:	2300      	movs	r3, #0
 8005c04:	f04f 0c0a 	mov.w	ip, #10
 8005c08:	4619      	mov	r1, r3
 8005c0a:	3401      	adds	r4, #1
 8005c0c:	9305      	str	r3, [sp, #20]
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c14:	3a30      	subs	r2, #48	@ 0x30
 8005c16:	2a09      	cmp	r2, #9
 8005c18:	d903      	bls.n	8005c22 <_svfiprintf_r+0x1a6>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0c6      	beq.n	8005bac <_svfiprintf_r+0x130>
 8005c1e:	9105      	str	r1, [sp, #20]
 8005c20:	e7c4      	b.n	8005bac <_svfiprintf_r+0x130>
 8005c22:	4604      	mov	r4, r0
 8005c24:	2301      	movs	r3, #1
 8005c26:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c2a:	e7f0      	b.n	8005c0e <_svfiprintf_r+0x192>
 8005c2c:	ab03      	add	r3, sp, #12
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	462a      	mov	r2, r5
 8005c32:	4638      	mov	r0, r7
 8005c34:	4b0e      	ldr	r3, [pc, #56]	@ (8005c70 <_svfiprintf_r+0x1f4>)
 8005c36:	a904      	add	r1, sp, #16
 8005c38:	f3af 8000 	nop.w
 8005c3c:	1c42      	adds	r2, r0, #1
 8005c3e:	4606      	mov	r6, r0
 8005c40:	d1d6      	bne.n	8005bf0 <_svfiprintf_r+0x174>
 8005c42:	89ab      	ldrh	r3, [r5, #12]
 8005c44:	065b      	lsls	r3, r3, #25
 8005c46:	f53f af2d 	bmi.w	8005aa4 <_svfiprintf_r+0x28>
 8005c4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c4c:	e72c      	b.n	8005aa8 <_svfiprintf_r+0x2c>
 8005c4e:	ab03      	add	r3, sp, #12
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	462a      	mov	r2, r5
 8005c54:	4638      	mov	r0, r7
 8005c56:	4b06      	ldr	r3, [pc, #24]	@ (8005c70 <_svfiprintf_r+0x1f4>)
 8005c58:	a904      	add	r1, sp, #16
 8005c5a:	f000 fa4b 	bl	80060f4 <_printf_i>
 8005c5e:	e7ed      	b.n	8005c3c <_svfiprintf_r+0x1c0>
 8005c60:	0800835e 	.word	0x0800835e
 8005c64:	08008364 	.word	0x08008364
 8005c68:	08008368 	.word	0x08008368
 8005c6c:	00000000 	.word	0x00000000
 8005c70:	080059c5 	.word	0x080059c5

08005c74 <_sungetc_r>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	1c4b      	adds	r3, r1, #1
 8005c78:	4614      	mov	r4, r2
 8005c7a:	d103      	bne.n	8005c84 <_sungetc_r+0x10>
 8005c7c:	f04f 35ff 	mov.w	r5, #4294967295
 8005c80:	4628      	mov	r0, r5
 8005c82:	bd38      	pop	{r3, r4, r5, pc}
 8005c84:	8993      	ldrh	r3, [r2, #12]
 8005c86:	b2cd      	uxtb	r5, r1
 8005c88:	f023 0320 	bic.w	r3, r3, #32
 8005c8c:	8193      	strh	r3, [r2, #12]
 8005c8e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c90:	6852      	ldr	r2, [r2, #4]
 8005c92:	b18b      	cbz	r3, 8005cb8 <_sungetc_r+0x44>
 8005c94:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005c96:	4293      	cmp	r3, r2
 8005c98:	dd08      	ble.n	8005cac <_sungetc_r+0x38>
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	1e5a      	subs	r2, r3, #1
 8005c9e:	6022      	str	r2, [r4, #0]
 8005ca0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005ca4:	6863      	ldr	r3, [r4, #4]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	6063      	str	r3, [r4, #4]
 8005caa:	e7e9      	b.n	8005c80 <_sungetc_r+0xc>
 8005cac:	4621      	mov	r1, r4
 8005cae:	f000 fcc4 	bl	800663a <__submore>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d0f1      	beq.n	8005c9a <_sungetc_r+0x26>
 8005cb6:	e7e1      	b.n	8005c7c <_sungetc_r+0x8>
 8005cb8:	6921      	ldr	r1, [r4, #16]
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	b151      	cbz	r1, 8005cd4 <_sungetc_r+0x60>
 8005cbe:	4299      	cmp	r1, r3
 8005cc0:	d208      	bcs.n	8005cd4 <_sungetc_r+0x60>
 8005cc2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005cc6:	42a9      	cmp	r1, r5
 8005cc8:	d104      	bne.n	8005cd4 <_sungetc_r+0x60>
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	3201      	adds	r2, #1
 8005cce:	6023      	str	r3, [r4, #0]
 8005cd0:	6062      	str	r2, [r4, #4]
 8005cd2:	e7d5      	b.n	8005c80 <_sungetc_r+0xc>
 8005cd4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8005cd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005cdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8005cde:	2303      	movs	r3, #3
 8005ce0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005ce2:	4623      	mov	r3, r4
 8005ce4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005ce8:	6023      	str	r3, [r4, #0]
 8005cea:	2301      	movs	r3, #1
 8005cec:	e7dc      	b.n	8005ca8 <_sungetc_r+0x34>

08005cee <__ssrefill_r>:
 8005cee:	b510      	push	{r4, lr}
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005cf4:	b169      	cbz	r1, 8005d12 <__ssrefill_r+0x24>
 8005cf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005cfa:	4299      	cmp	r1, r3
 8005cfc:	d001      	beq.n	8005d02 <__ssrefill_r+0x14>
 8005cfe:	f7ff fe19 	bl	8005934 <_free_r>
 8005d02:	2000      	movs	r0, #0
 8005d04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d06:	6360      	str	r0, [r4, #52]	@ 0x34
 8005d08:	6063      	str	r3, [r4, #4]
 8005d0a:	b113      	cbz	r3, 8005d12 <__ssrefill_r+0x24>
 8005d0c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005d0e:	6023      	str	r3, [r4, #0]
 8005d10:	bd10      	pop	{r4, pc}
 8005d12:	6923      	ldr	r3, [r4, #16]
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	6063      	str	r3, [r4, #4]
 8005d1e:	89a3      	ldrh	r3, [r4, #12]
 8005d20:	f043 0320 	orr.w	r3, r3, #32
 8005d24:	81a3      	strh	r3, [r4, #12]
 8005d26:	e7f3      	b.n	8005d10 <__ssrefill_r+0x22>

08005d28 <__ssvfiscanf_r>:
 8005d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2c:	460c      	mov	r4, r1
 8005d2e:	2100      	movs	r1, #0
 8005d30:	4606      	mov	r6, r0
 8005d32:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8005d36:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8005d3a:	49ab      	ldr	r1, [pc, #684]	@ (8005fe8 <__ssvfiscanf_r+0x2c0>)
 8005d3c:	f10d 0804 	add.w	r8, sp, #4
 8005d40:	91a0      	str	r1, [sp, #640]	@ 0x280
 8005d42:	49aa      	ldr	r1, [pc, #680]	@ (8005fec <__ssvfiscanf_r+0x2c4>)
 8005d44:	4faa      	ldr	r7, [pc, #680]	@ (8005ff0 <__ssvfiscanf_r+0x2c8>)
 8005d46:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8005d4a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	f892 9000 	ldrb.w	r9, [r2]
 8005d52:	f1b9 0f00 	cmp.w	r9, #0
 8005d56:	f000 8159 	beq.w	800600c <__ssvfiscanf_r+0x2e4>
 8005d5a:	f817 3009 	ldrb.w	r3, [r7, r9]
 8005d5e:	1c55      	adds	r5, r2, #1
 8005d60:	f013 0308 	ands.w	r3, r3, #8
 8005d64:	d019      	beq.n	8005d9a <__ssvfiscanf_r+0x72>
 8005d66:	6863      	ldr	r3, [r4, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	dd0f      	ble.n	8005d8c <__ssvfiscanf_r+0x64>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	781a      	ldrb	r2, [r3, #0]
 8005d70:	5cba      	ldrb	r2, [r7, r2]
 8005d72:	0712      	lsls	r2, r2, #28
 8005d74:	d401      	bmi.n	8005d7a <__ssvfiscanf_r+0x52>
 8005d76:	462a      	mov	r2, r5
 8005d78:	e7e9      	b.n	8005d4e <__ssvfiscanf_r+0x26>
 8005d7a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	3201      	adds	r2, #1
 8005d80:	9245      	str	r2, [sp, #276]	@ 0x114
 8005d82:	6862      	ldr	r2, [r4, #4]
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	3a01      	subs	r2, #1
 8005d88:	6062      	str	r2, [r4, #4]
 8005d8a:	e7ec      	b.n	8005d66 <__ssvfiscanf_r+0x3e>
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	4630      	mov	r0, r6
 8005d90:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005d92:	4798      	blx	r3
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d0e9      	beq.n	8005d6c <__ssvfiscanf_r+0x44>
 8005d98:	e7ed      	b.n	8005d76 <__ssvfiscanf_r+0x4e>
 8005d9a:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8005d9e:	f040 8086 	bne.w	8005eae <__ssvfiscanf_r+0x186>
 8005da2:	9341      	str	r3, [sp, #260]	@ 0x104
 8005da4:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005da6:	7853      	ldrb	r3, [r2, #1]
 8005da8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005daa:	bf04      	itt	eq
 8005dac:	2310      	moveq	r3, #16
 8005dae:	1c95      	addeq	r5, r2, #2
 8005db0:	f04f 020a 	mov.w	r2, #10
 8005db4:	bf08      	it	eq
 8005db6:	9341      	streq	r3, [sp, #260]	@ 0x104
 8005db8:	46aa      	mov	sl, r5
 8005dba:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005dbe:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8005dc2:	2b09      	cmp	r3, #9
 8005dc4:	d91e      	bls.n	8005e04 <__ssvfiscanf_r+0xdc>
 8005dc6:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8005ff4 <__ssvfiscanf_r+0x2cc>
 8005dca:	2203      	movs	r2, #3
 8005dcc:	4658      	mov	r0, fp
 8005dce:	f000 fc86 	bl	80066de <memchr>
 8005dd2:	b138      	cbz	r0, 8005de4 <__ssvfiscanf_r+0xbc>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	4655      	mov	r5, sl
 8005dd8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005dda:	eba0 000b 	sub.w	r0, r0, fp
 8005dde:	4083      	lsls	r3, r0
 8005de0:	4313      	orrs	r3, r2
 8005de2:	9341      	str	r3, [sp, #260]	@ 0x104
 8005de4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005de8:	2b78      	cmp	r3, #120	@ 0x78
 8005dea:	d806      	bhi.n	8005dfa <__ssvfiscanf_r+0xd2>
 8005dec:	2b57      	cmp	r3, #87	@ 0x57
 8005dee:	d810      	bhi.n	8005e12 <__ssvfiscanf_r+0xea>
 8005df0:	2b25      	cmp	r3, #37	@ 0x25
 8005df2:	d05c      	beq.n	8005eae <__ssvfiscanf_r+0x186>
 8005df4:	d856      	bhi.n	8005ea4 <__ssvfiscanf_r+0x17c>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d074      	beq.n	8005ee4 <__ssvfiscanf_r+0x1bc>
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005dfe:	230a      	movs	r3, #10
 8005e00:	9342      	str	r3, [sp, #264]	@ 0x108
 8005e02:	e087      	b.n	8005f14 <__ssvfiscanf_r+0x1ec>
 8005e04:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005e06:	4655      	mov	r5, sl
 8005e08:	fb02 1103 	mla	r1, r2, r3, r1
 8005e0c:	3930      	subs	r1, #48	@ 0x30
 8005e0e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005e10:	e7d2      	b.n	8005db8 <__ssvfiscanf_r+0x90>
 8005e12:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8005e16:	2a20      	cmp	r2, #32
 8005e18:	d8ef      	bhi.n	8005dfa <__ssvfiscanf_r+0xd2>
 8005e1a:	a101      	add	r1, pc, #4	@ (adr r1, 8005e20 <__ssvfiscanf_r+0xf8>)
 8005e1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005e20:	08005ef3 	.word	0x08005ef3
 8005e24:	08005dfb 	.word	0x08005dfb
 8005e28:	08005dfb 	.word	0x08005dfb
 8005e2c:	08005f4d 	.word	0x08005f4d
 8005e30:	08005dfb 	.word	0x08005dfb
 8005e34:	08005dfb 	.word	0x08005dfb
 8005e38:	08005dfb 	.word	0x08005dfb
 8005e3c:	08005dfb 	.word	0x08005dfb
 8005e40:	08005dfb 	.word	0x08005dfb
 8005e44:	08005dfb 	.word	0x08005dfb
 8005e48:	08005dfb 	.word	0x08005dfb
 8005e4c:	08005f63 	.word	0x08005f63
 8005e50:	08005f49 	.word	0x08005f49
 8005e54:	08005eab 	.word	0x08005eab
 8005e58:	08005eab 	.word	0x08005eab
 8005e5c:	08005eab 	.word	0x08005eab
 8005e60:	08005dfb 	.word	0x08005dfb
 8005e64:	08005f05 	.word	0x08005f05
 8005e68:	08005dfb 	.word	0x08005dfb
 8005e6c:	08005dfb 	.word	0x08005dfb
 8005e70:	08005dfb 	.word	0x08005dfb
 8005e74:	08005dfb 	.word	0x08005dfb
 8005e78:	08005f73 	.word	0x08005f73
 8005e7c:	08005f0d 	.word	0x08005f0d
 8005e80:	08005eeb 	.word	0x08005eeb
 8005e84:	08005dfb 	.word	0x08005dfb
 8005e88:	08005dfb 	.word	0x08005dfb
 8005e8c:	08005f6f 	.word	0x08005f6f
 8005e90:	08005dfb 	.word	0x08005dfb
 8005e94:	08005f49 	.word	0x08005f49
 8005e98:	08005dfb 	.word	0x08005dfb
 8005e9c:	08005dfb 	.word	0x08005dfb
 8005ea0:	08005ef3 	.word	0x08005ef3
 8005ea4:	3b45      	subs	r3, #69	@ 0x45
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d8a7      	bhi.n	8005dfa <__ssvfiscanf_r+0xd2>
 8005eaa:	2305      	movs	r3, #5
 8005eac:	e031      	b.n	8005f12 <__ssvfiscanf_r+0x1ea>
 8005eae:	6863      	ldr	r3, [r4, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	dd0d      	ble.n	8005ed0 <__ssvfiscanf_r+0x1a8>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	781a      	ldrb	r2, [r3, #0]
 8005eb8:	454a      	cmp	r2, r9
 8005eba:	f040 80a7 	bne.w	800600c <__ssvfiscanf_r+0x2e4>
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	6862      	ldr	r2, [r4, #4]
 8005ec2:	6023      	str	r3, [r4, #0]
 8005ec4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8005ec6:	3a01      	subs	r2, #1
 8005ec8:	3301      	adds	r3, #1
 8005eca:	6062      	str	r2, [r4, #4]
 8005ecc:	9345      	str	r3, [sp, #276]	@ 0x114
 8005ece:	e752      	b.n	8005d76 <__ssvfiscanf_r+0x4e>
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005ed6:	4798      	blx	r3
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	d0eb      	beq.n	8005eb4 <__ssvfiscanf_r+0x18c>
 8005edc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	f040 808c 	bne.w	8005ffc <__ssvfiscanf_r+0x2d4>
 8005ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee8:	e08c      	b.n	8006004 <__ssvfiscanf_r+0x2dc>
 8005eea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005eec:	f042 0220 	orr.w	r2, r2, #32
 8005ef0:	9241      	str	r2, [sp, #260]	@ 0x104
 8005ef2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005ef4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ef8:	9241      	str	r2, [sp, #260]	@ 0x104
 8005efa:	2210      	movs	r2, #16
 8005efc:	2b6e      	cmp	r3, #110	@ 0x6e
 8005efe:	9242      	str	r2, [sp, #264]	@ 0x108
 8005f00:	d902      	bls.n	8005f08 <__ssvfiscanf_r+0x1e0>
 8005f02:	e005      	b.n	8005f10 <__ssvfiscanf_r+0x1e8>
 8005f04:	2300      	movs	r3, #0
 8005f06:	9342      	str	r3, [sp, #264]	@ 0x108
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e002      	b.n	8005f12 <__ssvfiscanf_r+0x1ea>
 8005f0c:	2308      	movs	r3, #8
 8005f0e:	9342      	str	r3, [sp, #264]	@ 0x108
 8005f10:	2304      	movs	r3, #4
 8005f12:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005f14:	6863      	ldr	r3, [r4, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	dd39      	ble.n	8005f8e <__ssvfiscanf_r+0x266>
 8005f1a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005f1c:	0659      	lsls	r1, r3, #25
 8005f1e:	d404      	bmi.n	8005f2a <__ssvfiscanf_r+0x202>
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	781a      	ldrb	r2, [r3, #0]
 8005f24:	5cba      	ldrb	r2, [r7, r2]
 8005f26:	0712      	lsls	r2, r2, #28
 8005f28:	d438      	bmi.n	8005f9c <__ssvfiscanf_r+0x274>
 8005f2a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	dc47      	bgt.n	8005fc0 <__ssvfiscanf_r+0x298>
 8005f30:	466b      	mov	r3, sp
 8005f32:	4622      	mov	r2, r4
 8005f34:	4630      	mov	r0, r6
 8005f36:	a941      	add	r1, sp, #260	@ 0x104
 8005f38:	f000 f9fa 	bl	8006330 <_scanf_chars>
 8005f3c:	2801      	cmp	r0, #1
 8005f3e:	d065      	beq.n	800600c <__ssvfiscanf_r+0x2e4>
 8005f40:	2802      	cmp	r0, #2
 8005f42:	f47f af18 	bne.w	8005d76 <__ssvfiscanf_r+0x4e>
 8005f46:	e7c9      	b.n	8005edc <__ssvfiscanf_r+0x1b4>
 8005f48:	220a      	movs	r2, #10
 8005f4a:	e7d7      	b.n	8005efc <__ssvfiscanf_r+0x1d4>
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	4640      	mov	r0, r8
 8005f50:	f000 fb3a 	bl	80065c8 <__sccl>
 8005f54:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005f56:	4605      	mov	r5, r0
 8005f58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f5c:	9341      	str	r3, [sp, #260]	@ 0x104
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e7d7      	b.n	8005f12 <__ssvfiscanf_r+0x1ea>
 8005f62:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005f64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f68:	9341      	str	r3, [sp, #260]	@ 0x104
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e7d1      	b.n	8005f12 <__ssvfiscanf_r+0x1ea>
 8005f6e:	2302      	movs	r3, #2
 8005f70:	e7cf      	b.n	8005f12 <__ssvfiscanf_r+0x1ea>
 8005f72:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8005f74:	06c3      	lsls	r3, r0, #27
 8005f76:	f53f aefe 	bmi.w	8005d76 <__ssvfiscanf_r+0x4e>
 8005f7a:	9b00      	ldr	r3, [sp, #0]
 8005f7c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005f7e:	1d19      	adds	r1, r3, #4
 8005f80:	9100      	str	r1, [sp, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	07c0      	lsls	r0, r0, #31
 8005f86:	bf4c      	ite	mi
 8005f88:	801a      	strhmi	r2, [r3, #0]
 8005f8a:	601a      	strpl	r2, [r3, #0]
 8005f8c:	e6f3      	b.n	8005d76 <__ssvfiscanf_r+0x4e>
 8005f8e:	4621      	mov	r1, r4
 8005f90:	4630      	mov	r0, r6
 8005f92:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005f94:	4798      	blx	r3
 8005f96:	2800      	cmp	r0, #0
 8005f98:	d0bf      	beq.n	8005f1a <__ssvfiscanf_r+0x1f2>
 8005f9a:	e79f      	b.n	8005edc <__ssvfiscanf_r+0x1b4>
 8005f9c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005f9e:	3201      	adds	r2, #1
 8005fa0:	9245      	str	r2, [sp, #276]	@ 0x114
 8005fa2:	6862      	ldr	r2, [r4, #4]
 8005fa4:	3a01      	subs	r2, #1
 8005fa6:	2a00      	cmp	r2, #0
 8005fa8:	6062      	str	r2, [r4, #4]
 8005faa:	dd02      	ble.n	8005fb2 <__ssvfiscanf_r+0x28a>
 8005fac:	3301      	adds	r3, #1
 8005fae:	6023      	str	r3, [r4, #0]
 8005fb0:	e7b6      	b.n	8005f20 <__ssvfiscanf_r+0x1f8>
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005fb8:	4798      	blx	r3
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	d0b0      	beq.n	8005f20 <__ssvfiscanf_r+0x1f8>
 8005fbe:	e78d      	b.n	8005edc <__ssvfiscanf_r+0x1b4>
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	dc06      	bgt.n	8005fd2 <__ssvfiscanf_r+0x2aa>
 8005fc4:	466b      	mov	r3, sp
 8005fc6:	4622      	mov	r2, r4
 8005fc8:	4630      	mov	r0, r6
 8005fca:	a941      	add	r1, sp, #260	@ 0x104
 8005fcc:	f000 fa0a 	bl	80063e4 <_scanf_i>
 8005fd0:	e7b4      	b.n	8005f3c <__ssvfiscanf_r+0x214>
 8005fd2:	4b09      	ldr	r3, [pc, #36]	@ (8005ff8 <__ssvfiscanf_r+0x2d0>)
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f43f aece 	beq.w	8005d76 <__ssvfiscanf_r+0x4e>
 8005fda:	466b      	mov	r3, sp
 8005fdc:	4622      	mov	r2, r4
 8005fde:	4630      	mov	r0, r6
 8005fe0:	a941      	add	r1, sp, #260	@ 0x104
 8005fe2:	f3af 8000 	nop.w
 8005fe6:	e7a9      	b.n	8005f3c <__ssvfiscanf_r+0x214>
 8005fe8:	08005c75 	.word	0x08005c75
 8005fec:	08005cef 	.word	0x08005cef
 8005ff0:	080083ad 	.word	0x080083ad
 8005ff4:	08008364 	.word	0x08008364
 8005ff8:	00000000 	.word	0x00000000
 8005ffc:	89a3      	ldrh	r3, [r4, #12]
 8005ffe:	065b      	lsls	r3, r3, #25
 8006000:	f53f af70 	bmi.w	8005ee4 <__ssvfiscanf_r+0x1bc>
 8006004:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8006008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800600e:	e7f9      	b.n	8006004 <__ssvfiscanf_r+0x2dc>

08006010 <_printf_common>:
 8006010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006014:	4616      	mov	r6, r2
 8006016:	4698      	mov	r8, r3
 8006018:	688a      	ldr	r2, [r1, #8]
 800601a:	690b      	ldr	r3, [r1, #16]
 800601c:	4607      	mov	r7, r0
 800601e:	4293      	cmp	r3, r2
 8006020:	bfb8      	it	lt
 8006022:	4613      	movlt	r3, r2
 8006024:	6033      	str	r3, [r6, #0]
 8006026:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800602a:	460c      	mov	r4, r1
 800602c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006030:	b10a      	cbz	r2, 8006036 <_printf_common+0x26>
 8006032:	3301      	adds	r3, #1
 8006034:	6033      	str	r3, [r6, #0]
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	0699      	lsls	r1, r3, #26
 800603a:	bf42      	ittt	mi
 800603c:	6833      	ldrmi	r3, [r6, #0]
 800603e:	3302      	addmi	r3, #2
 8006040:	6033      	strmi	r3, [r6, #0]
 8006042:	6825      	ldr	r5, [r4, #0]
 8006044:	f015 0506 	ands.w	r5, r5, #6
 8006048:	d106      	bne.n	8006058 <_printf_common+0x48>
 800604a:	f104 0a19 	add.w	sl, r4, #25
 800604e:	68e3      	ldr	r3, [r4, #12]
 8006050:	6832      	ldr	r2, [r6, #0]
 8006052:	1a9b      	subs	r3, r3, r2
 8006054:	42ab      	cmp	r3, r5
 8006056:	dc2b      	bgt.n	80060b0 <_printf_common+0xa0>
 8006058:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800605c:	6822      	ldr	r2, [r4, #0]
 800605e:	3b00      	subs	r3, #0
 8006060:	bf18      	it	ne
 8006062:	2301      	movne	r3, #1
 8006064:	0692      	lsls	r2, r2, #26
 8006066:	d430      	bmi.n	80060ca <_printf_common+0xba>
 8006068:	4641      	mov	r1, r8
 800606a:	4638      	mov	r0, r7
 800606c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006070:	47c8      	blx	r9
 8006072:	3001      	adds	r0, #1
 8006074:	d023      	beq.n	80060be <_printf_common+0xae>
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	6922      	ldr	r2, [r4, #16]
 800607a:	f003 0306 	and.w	r3, r3, #6
 800607e:	2b04      	cmp	r3, #4
 8006080:	bf14      	ite	ne
 8006082:	2500      	movne	r5, #0
 8006084:	6833      	ldreq	r3, [r6, #0]
 8006086:	f04f 0600 	mov.w	r6, #0
 800608a:	bf08      	it	eq
 800608c:	68e5      	ldreq	r5, [r4, #12]
 800608e:	f104 041a 	add.w	r4, r4, #26
 8006092:	bf08      	it	eq
 8006094:	1aed      	subeq	r5, r5, r3
 8006096:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800609a:	bf08      	it	eq
 800609c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060a0:	4293      	cmp	r3, r2
 80060a2:	bfc4      	itt	gt
 80060a4:	1a9b      	subgt	r3, r3, r2
 80060a6:	18ed      	addgt	r5, r5, r3
 80060a8:	42b5      	cmp	r5, r6
 80060aa:	d11a      	bne.n	80060e2 <_printf_common+0xd2>
 80060ac:	2000      	movs	r0, #0
 80060ae:	e008      	b.n	80060c2 <_printf_common+0xb2>
 80060b0:	2301      	movs	r3, #1
 80060b2:	4652      	mov	r2, sl
 80060b4:	4641      	mov	r1, r8
 80060b6:	4638      	mov	r0, r7
 80060b8:	47c8      	blx	r9
 80060ba:	3001      	adds	r0, #1
 80060bc:	d103      	bne.n	80060c6 <_printf_common+0xb6>
 80060be:	f04f 30ff 	mov.w	r0, #4294967295
 80060c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c6:	3501      	adds	r5, #1
 80060c8:	e7c1      	b.n	800604e <_printf_common+0x3e>
 80060ca:	2030      	movs	r0, #48	@ 0x30
 80060cc:	18e1      	adds	r1, r4, r3
 80060ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060d8:	4422      	add	r2, r4
 80060da:	3302      	adds	r3, #2
 80060dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060e0:	e7c2      	b.n	8006068 <_printf_common+0x58>
 80060e2:	2301      	movs	r3, #1
 80060e4:	4622      	mov	r2, r4
 80060e6:	4641      	mov	r1, r8
 80060e8:	4638      	mov	r0, r7
 80060ea:	47c8      	blx	r9
 80060ec:	3001      	adds	r0, #1
 80060ee:	d0e6      	beq.n	80060be <_printf_common+0xae>
 80060f0:	3601      	adds	r6, #1
 80060f2:	e7d9      	b.n	80060a8 <_printf_common+0x98>

080060f4 <_printf_i>:
 80060f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060f8:	7e0f      	ldrb	r7, [r1, #24]
 80060fa:	4691      	mov	r9, r2
 80060fc:	2f78      	cmp	r7, #120	@ 0x78
 80060fe:	4680      	mov	r8, r0
 8006100:	460c      	mov	r4, r1
 8006102:	469a      	mov	sl, r3
 8006104:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006106:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800610a:	d807      	bhi.n	800611c <_printf_i+0x28>
 800610c:	2f62      	cmp	r7, #98	@ 0x62
 800610e:	d80a      	bhi.n	8006126 <_printf_i+0x32>
 8006110:	2f00      	cmp	r7, #0
 8006112:	f000 80d1 	beq.w	80062b8 <_printf_i+0x1c4>
 8006116:	2f58      	cmp	r7, #88	@ 0x58
 8006118:	f000 80b8 	beq.w	800628c <_printf_i+0x198>
 800611c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006120:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006124:	e03a      	b.n	800619c <_printf_i+0xa8>
 8006126:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800612a:	2b15      	cmp	r3, #21
 800612c:	d8f6      	bhi.n	800611c <_printf_i+0x28>
 800612e:	a101      	add	r1, pc, #4	@ (adr r1, 8006134 <_printf_i+0x40>)
 8006130:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006134:	0800618d 	.word	0x0800618d
 8006138:	080061a1 	.word	0x080061a1
 800613c:	0800611d 	.word	0x0800611d
 8006140:	0800611d 	.word	0x0800611d
 8006144:	0800611d 	.word	0x0800611d
 8006148:	0800611d 	.word	0x0800611d
 800614c:	080061a1 	.word	0x080061a1
 8006150:	0800611d 	.word	0x0800611d
 8006154:	0800611d 	.word	0x0800611d
 8006158:	0800611d 	.word	0x0800611d
 800615c:	0800611d 	.word	0x0800611d
 8006160:	0800629f 	.word	0x0800629f
 8006164:	080061cb 	.word	0x080061cb
 8006168:	08006259 	.word	0x08006259
 800616c:	0800611d 	.word	0x0800611d
 8006170:	0800611d 	.word	0x0800611d
 8006174:	080062c1 	.word	0x080062c1
 8006178:	0800611d 	.word	0x0800611d
 800617c:	080061cb 	.word	0x080061cb
 8006180:	0800611d 	.word	0x0800611d
 8006184:	0800611d 	.word	0x0800611d
 8006188:	08006261 	.word	0x08006261
 800618c:	6833      	ldr	r3, [r6, #0]
 800618e:	1d1a      	adds	r2, r3, #4
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6032      	str	r2, [r6, #0]
 8006194:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006198:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800619c:	2301      	movs	r3, #1
 800619e:	e09c      	b.n	80062da <_printf_i+0x1e6>
 80061a0:	6833      	ldr	r3, [r6, #0]
 80061a2:	6820      	ldr	r0, [r4, #0]
 80061a4:	1d19      	adds	r1, r3, #4
 80061a6:	6031      	str	r1, [r6, #0]
 80061a8:	0606      	lsls	r6, r0, #24
 80061aa:	d501      	bpl.n	80061b0 <_printf_i+0xbc>
 80061ac:	681d      	ldr	r5, [r3, #0]
 80061ae:	e003      	b.n	80061b8 <_printf_i+0xc4>
 80061b0:	0645      	lsls	r5, r0, #25
 80061b2:	d5fb      	bpl.n	80061ac <_printf_i+0xb8>
 80061b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061b8:	2d00      	cmp	r5, #0
 80061ba:	da03      	bge.n	80061c4 <_printf_i+0xd0>
 80061bc:	232d      	movs	r3, #45	@ 0x2d
 80061be:	426d      	negs	r5, r5
 80061c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061c4:	230a      	movs	r3, #10
 80061c6:	4858      	ldr	r0, [pc, #352]	@ (8006328 <_printf_i+0x234>)
 80061c8:	e011      	b.n	80061ee <_printf_i+0xfa>
 80061ca:	6821      	ldr	r1, [r4, #0]
 80061cc:	6833      	ldr	r3, [r6, #0]
 80061ce:	0608      	lsls	r0, r1, #24
 80061d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80061d4:	d402      	bmi.n	80061dc <_printf_i+0xe8>
 80061d6:	0649      	lsls	r1, r1, #25
 80061d8:	bf48      	it	mi
 80061da:	b2ad      	uxthmi	r5, r5
 80061dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80061de:	6033      	str	r3, [r6, #0]
 80061e0:	bf14      	ite	ne
 80061e2:	230a      	movne	r3, #10
 80061e4:	2308      	moveq	r3, #8
 80061e6:	4850      	ldr	r0, [pc, #320]	@ (8006328 <_printf_i+0x234>)
 80061e8:	2100      	movs	r1, #0
 80061ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061ee:	6866      	ldr	r6, [r4, #4]
 80061f0:	2e00      	cmp	r6, #0
 80061f2:	60a6      	str	r6, [r4, #8]
 80061f4:	db05      	blt.n	8006202 <_printf_i+0x10e>
 80061f6:	6821      	ldr	r1, [r4, #0]
 80061f8:	432e      	orrs	r6, r5
 80061fa:	f021 0104 	bic.w	r1, r1, #4
 80061fe:	6021      	str	r1, [r4, #0]
 8006200:	d04b      	beq.n	800629a <_printf_i+0x1a6>
 8006202:	4616      	mov	r6, r2
 8006204:	fbb5 f1f3 	udiv	r1, r5, r3
 8006208:	fb03 5711 	mls	r7, r3, r1, r5
 800620c:	5dc7      	ldrb	r7, [r0, r7]
 800620e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006212:	462f      	mov	r7, r5
 8006214:	42bb      	cmp	r3, r7
 8006216:	460d      	mov	r5, r1
 8006218:	d9f4      	bls.n	8006204 <_printf_i+0x110>
 800621a:	2b08      	cmp	r3, #8
 800621c:	d10b      	bne.n	8006236 <_printf_i+0x142>
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	07df      	lsls	r7, r3, #31
 8006222:	d508      	bpl.n	8006236 <_printf_i+0x142>
 8006224:	6923      	ldr	r3, [r4, #16]
 8006226:	6861      	ldr	r1, [r4, #4]
 8006228:	4299      	cmp	r1, r3
 800622a:	bfde      	ittt	le
 800622c:	2330      	movle	r3, #48	@ 0x30
 800622e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006232:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006236:	1b92      	subs	r2, r2, r6
 8006238:	6122      	str	r2, [r4, #16]
 800623a:	464b      	mov	r3, r9
 800623c:	4621      	mov	r1, r4
 800623e:	4640      	mov	r0, r8
 8006240:	f8cd a000 	str.w	sl, [sp]
 8006244:	aa03      	add	r2, sp, #12
 8006246:	f7ff fee3 	bl	8006010 <_printf_common>
 800624a:	3001      	adds	r0, #1
 800624c:	d14a      	bne.n	80062e4 <_printf_i+0x1f0>
 800624e:	f04f 30ff 	mov.w	r0, #4294967295
 8006252:	b004      	add	sp, #16
 8006254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	f043 0320 	orr.w	r3, r3, #32
 800625e:	6023      	str	r3, [r4, #0]
 8006260:	2778      	movs	r7, #120	@ 0x78
 8006262:	4832      	ldr	r0, [pc, #200]	@ (800632c <_printf_i+0x238>)
 8006264:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	6831      	ldr	r1, [r6, #0]
 800626c:	061f      	lsls	r7, r3, #24
 800626e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006272:	d402      	bmi.n	800627a <_printf_i+0x186>
 8006274:	065f      	lsls	r7, r3, #25
 8006276:	bf48      	it	mi
 8006278:	b2ad      	uxthmi	r5, r5
 800627a:	6031      	str	r1, [r6, #0]
 800627c:	07d9      	lsls	r1, r3, #31
 800627e:	bf44      	itt	mi
 8006280:	f043 0320 	orrmi.w	r3, r3, #32
 8006284:	6023      	strmi	r3, [r4, #0]
 8006286:	b11d      	cbz	r5, 8006290 <_printf_i+0x19c>
 8006288:	2310      	movs	r3, #16
 800628a:	e7ad      	b.n	80061e8 <_printf_i+0xf4>
 800628c:	4826      	ldr	r0, [pc, #152]	@ (8006328 <_printf_i+0x234>)
 800628e:	e7e9      	b.n	8006264 <_printf_i+0x170>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	f023 0320 	bic.w	r3, r3, #32
 8006296:	6023      	str	r3, [r4, #0]
 8006298:	e7f6      	b.n	8006288 <_printf_i+0x194>
 800629a:	4616      	mov	r6, r2
 800629c:	e7bd      	b.n	800621a <_printf_i+0x126>
 800629e:	6833      	ldr	r3, [r6, #0]
 80062a0:	6825      	ldr	r5, [r4, #0]
 80062a2:	1d18      	adds	r0, r3, #4
 80062a4:	6961      	ldr	r1, [r4, #20]
 80062a6:	6030      	str	r0, [r6, #0]
 80062a8:	062e      	lsls	r6, r5, #24
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	d501      	bpl.n	80062b2 <_printf_i+0x1be>
 80062ae:	6019      	str	r1, [r3, #0]
 80062b0:	e002      	b.n	80062b8 <_printf_i+0x1c4>
 80062b2:	0668      	lsls	r0, r5, #25
 80062b4:	d5fb      	bpl.n	80062ae <_printf_i+0x1ba>
 80062b6:	8019      	strh	r1, [r3, #0]
 80062b8:	2300      	movs	r3, #0
 80062ba:	4616      	mov	r6, r2
 80062bc:	6123      	str	r3, [r4, #16]
 80062be:	e7bc      	b.n	800623a <_printf_i+0x146>
 80062c0:	6833      	ldr	r3, [r6, #0]
 80062c2:	2100      	movs	r1, #0
 80062c4:	1d1a      	adds	r2, r3, #4
 80062c6:	6032      	str	r2, [r6, #0]
 80062c8:	681e      	ldr	r6, [r3, #0]
 80062ca:	6862      	ldr	r2, [r4, #4]
 80062cc:	4630      	mov	r0, r6
 80062ce:	f000 fa06 	bl	80066de <memchr>
 80062d2:	b108      	cbz	r0, 80062d8 <_printf_i+0x1e4>
 80062d4:	1b80      	subs	r0, r0, r6
 80062d6:	6060      	str	r0, [r4, #4]
 80062d8:	6863      	ldr	r3, [r4, #4]
 80062da:	6123      	str	r3, [r4, #16]
 80062dc:	2300      	movs	r3, #0
 80062de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062e2:	e7aa      	b.n	800623a <_printf_i+0x146>
 80062e4:	4632      	mov	r2, r6
 80062e6:	4649      	mov	r1, r9
 80062e8:	4640      	mov	r0, r8
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	47d0      	blx	sl
 80062ee:	3001      	adds	r0, #1
 80062f0:	d0ad      	beq.n	800624e <_printf_i+0x15a>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	079b      	lsls	r3, r3, #30
 80062f6:	d413      	bmi.n	8006320 <_printf_i+0x22c>
 80062f8:	68e0      	ldr	r0, [r4, #12]
 80062fa:	9b03      	ldr	r3, [sp, #12]
 80062fc:	4298      	cmp	r0, r3
 80062fe:	bfb8      	it	lt
 8006300:	4618      	movlt	r0, r3
 8006302:	e7a6      	b.n	8006252 <_printf_i+0x15e>
 8006304:	2301      	movs	r3, #1
 8006306:	4632      	mov	r2, r6
 8006308:	4649      	mov	r1, r9
 800630a:	4640      	mov	r0, r8
 800630c:	47d0      	blx	sl
 800630e:	3001      	adds	r0, #1
 8006310:	d09d      	beq.n	800624e <_printf_i+0x15a>
 8006312:	3501      	adds	r5, #1
 8006314:	68e3      	ldr	r3, [r4, #12]
 8006316:	9903      	ldr	r1, [sp, #12]
 8006318:	1a5b      	subs	r3, r3, r1
 800631a:	42ab      	cmp	r3, r5
 800631c:	dcf2      	bgt.n	8006304 <_printf_i+0x210>
 800631e:	e7eb      	b.n	80062f8 <_printf_i+0x204>
 8006320:	2500      	movs	r5, #0
 8006322:	f104 0619 	add.w	r6, r4, #25
 8006326:	e7f5      	b.n	8006314 <_printf_i+0x220>
 8006328:	0800836f 	.word	0x0800836f
 800632c:	08008380 	.word	0x08008380

08006330 <_scanf_chars>:
 8006330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006334:	4615      	mov	r5, r2
 8006336:	688a      	ldr	r2, [r1, #8]
 8006338:	4680      	mov	r8, r0
 800633a:	460c      	mov	r4, r1
 800633c:	b932      	cbnz	r2, 800634c <_scanf_chars+0x1c>
 800633e:	698a      	ldr	r2, [r1, #24]
 8006340:	2a00      	cmp	r2, #0
 8006342:	bf14      	ite	ne
 8006344:	f04f 32ff 	movne.w	r2, #4294967295
 8006348:	2201      	moveq	r2, #1
 800634a:	608a      	str	r2, [r1, #8]
 800634c:	2700      	movs	r7, #0
 800634e:	6822      	ldr	r2, [r4, #0]
 8006350:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80063e0 <_scanf_chars+0xb0>
 8006354:	06d1      	lsls	r1, r2, #27
 8006356:	bf5f      	itttt	pl
 8006358:	681a      	ldrpl	r2, [r3, #0]
 800635a:	1d11      	addpl	r1, r2, #4
 800635c:	6019      	strpl	r1, [r3, #0]
 800635e:	6816      	ldrpl	r6, [r2, #0]
 8006360:	69a0      	ldr	r0, [r4, #24]
 8006362:	b188      	cbz	r0, 8006388 <_scanf_chars+0x58>
 8006364:	2801      	cmp	r0, #1
 8006366:	d107      	bne.n	8006378 <_scanf_chars+0x48>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	781a      	ldrb	r2, [r3, #0]
 800636c:	6963      	ldr	r3, [r4, #20]
 800636e:	5c9b      	ldrb	r3, [r3, r2]
 8006370:	b953      	cbnz	r3, 8006388 <_scanf_chars+0x58>
 8006372:	2f00      	cmp	r7, #0
 8006374:	d031      	beq.n	80063da <_scanf_chars+0xaa>
 8006376:	e022      	b.n	80063be <_scanf_chars+0x8e>
 8006378:	2802      	cmp	r0, #2
 800637a:	d120      	bne.n	80063be <_scanf_chars+0x8e>
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006384:	071b      	lsls	r3, r3, #28
 8006386:	d41a      	bmi.n	80063be <_scanf_chars+0x8e>
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	3701      	adds	r7, #1
 800638c:	06da      	lsls	r2, r3, #27
 800638e:	bf5e      	ittt	pl
 8006390:	682b      	ldrpl	r3, [r5, #0]
 8006392:	781b      	ldrbpl	r3, [r3, #0]
 8006394:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006398:	682a      	ldr	r2, [r5, #0]
 800639a:	686b      	ldr	r3, [r5, #4]
 800639c:	3201      	adds	r2, #1
 800639e:	602a      	str	r2, [r5, #0]
 80063a0:	68a2      	ldr	r2, [r4, #8]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	3a01      	subs	r2, #1
 80063a6:	606b      	str	r3, [r5, #4]
 80063a8:	60a2      	str	r2, [r4, #8]
 80063aa:	b142      	cbz	r2, 80063be <_scanf_chars+0x8e>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	dcd7      	bgt.n	8006360 <_scanf_chars+0x30>
 80063b0:	4629      	mov	r1, r5
 80063b2:	4640      	mov	r0, r8
 80063b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80063b8:	4798      	blx	r3
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d0d0      	beq.n	8006360 <_scanf_chars+0x30>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	f013 0310 	ands.w	r3, r3, #16
 80063c4:	d105      	bne.n	80063d2 <_scanf_chars+0xa2>
 80063c6:	68e2      	ldr	r2, [r4, #12]
 80063c8:	3201      	adds	r2, #1
 80063ca:	60e2      	str	r2, [r4, #12]
 80063cc:	69a2      	ldr	r2, [r4, #24]
 80063ce:	b102      	cbz	r2, 80063d2 <_scanf_chars+0xa2>
 80063d0:	7033      	strb	r3, [r6, #0]
 80063d2:	2000      	movs	r0, #0
 80063d4:	6923      	ldr	r3, [r4, #16]
 80063d6:	443b      	add	r3, r7
 80063d8:	6123      	str	r3, [r4, #16]
 80063da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063de:	bf00      	nop
 80063e0:	080083ad 	.word	0x080083ad

080063e4 <_scanf_i>:
 80063e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e8:	460c      	mov	r4, r1
 80063ea:	4698      	mov	r8, r3
 80063ec:	4b72      	ldr	r3, [pc, #456]	@ (80065b8 <_scanf_i+0x1d4>)
 80063ee:	b087      	sub	sp, #28
 80063f0:	4682      	mov	sl, r0
 80063f2:	4616      	mov	r6, r2
 80063f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80063f8:	ab03      	add	r3, sp, #12
 80063fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80063fe:	4b6f      	ldr	r3, [pc, #444]	@ (80065bc <_scanf_i+0x1d8>)
 8006400:	69a1      	ldr	r1, [r4, #24]
 8006402:	4a6f      	ldr	r2, [pc, #444]	@ (80065c0 <_scanf_i+0x1dc>)
 8006404:	4627      	mov	r7, r4
 8006406:	2903      	cmp	r1, #3
 8006408:	bf08      	it	eq
 800640a:	461a      	moveq	r2, r3
 800640c:	68a3      	ldr	r3, [r4, #8]
 800640e:	9201      	str	r2, [sp, #4]
 8006410:	1e5a      	subs	r2, r3, #1
 8006412:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006416:	bf81      	itttt	hi
 8006418:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800641c:	eb03 0905 	addhi.w	r9, r3, r5
 8006420:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006424:	60a3      	strhi	r3, [r4, #8]
 8006426:	f857 3b1c 	ldr.w	r3, [r7], #28
 800642a:	bf98      	it	ls
 800642c:	f04f 0900 	movls.w	r9, #0
 8006430:	463d      	mov	r5, r7
 8006432:	f04f 0b00 	mov.w	fp, #0
 8006436:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800643a:	6023      	str	r3, [r4, #0]
 800643c:	6831      	ldr	r1, [r6, #0]
 800643e:	ab03      	add	r3, sp, #12
 8006440:	2202      	movs	r2, #2
 8006442:	7809      	ldrb	r1, [r1, #0]
 8006444:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006448:	f000 f949 	bl	80066de <memchr>
 800644c:	b328      	cbz	r0, 800649a <_scanf_i+0xb6>
 800644e:	f1bb 0f01 	cmp.w	fp, #1
 8006452:	d159      	bne.n	8006508 <_scanf_i+0x124>
 8006454:	6862      	ldr	r2, [r4, #4]
 8006456:	b92a      	cbnz	r2, 8006464 <_scanf_i+0x80>
 8006458:	2108      	movs	r1, #8
 800645a:	6822      	ldr	r2, [r4, #0]
 800645c:	6061      	str	r1, [r4, #4]
 800645e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006462:	6022      	str	r2, [r4, #0]
 8006464:	6822      	ldr	r2, [r4, #0]
 8006466:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800646a:	6022      	str	r2, [r4, #0]
 800646c:	68a2      	ldr	r2, [r4, #8]
 800646e:	1e51      	subs	r1, r2, #1
 8006470:	60a1      	str	r1, [r4, #8]
 8006472:	b192      	cbz	r2, 800649a <_scanf_i+0xb6>
 8006474:	6832      	ldr	r2, [r6, #0]
 8006476:	1c51      	adds	r1, r2, #1
 8006478:	6031      	str	r1, [r6, #0]
 800647a:	7812      	ldrb	r2, [r2, #0]
 800647c:	f805 2b01 	strb.w	r2, [r5], #1
 8006480:	6872      	ldr	r2, [r6, #4]
 8006482:	3a01      	subs	r2, #1
 8006484:	2a00      	cmp	r2, #0
 8006486:	6072      	str	r2, [r6, #4]
 8006488:	dc07      	bgt.n	800649a <_scanf_i+0xb6>
 800648a:	4631      	mov	r1, r6
 800648c:	4650      	mov	r0, sl
 800648e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006492:	4790      	blx	r2
 8006494:	2800      	cmp	r0, #0
 8006496:	f040 8085 	bne.w	80065a4 <_scanf_i+0x1c0>
 800649a:	f10b 0b01 	add.w	fp, fp, #1
 800649e:	f1bb 0f03 	cmp.w	fp, #3
 80064a2:	d1cb      	bne.n	800643c <_scanf_i+0x58>
 80064a4:	6863      	ldr	r3, [r4, #4]
 80064a6:	b90b      	cbnz	r3, 80064ac <_scanf_i+0xc8>
 80064a8:	230a      	movs	r3, #10
 80064aa:	6063      	str	r3, [r4, #4]
 80064ac:	6863      	ldr	r3, [r4, #4]
 80064ae:	4945      	ldr	r1, [pc, #276]	@ (80065c4 <_scanf_i+0x1e0>)
 80064b0:	6960      	ldr	r0, [r4, #20]
 80064b2:	1ac9      	subs	r1, r1, r3
 80064b4:	f000 f888 	bl	80065c8 <__sccl>
 80064b8:	f04f 0b00 	mov.w	fp, #0
 80064bc:	68a3      	ldr	r3, [r4, #8]
 80064be:	6822      	ldr	r2, [r4, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d03d      	beq.n	8006540 <_scanf_i+0x15c>
 80064c4:	6831      	ldr	r1, [r6, #0]
 80064c6:	6960      	ldr	r0, [r4, #20]
 80064c8:	f891 c000 	ldrb.w	ip, [r1]
 80064cc:	f810 000c 	ldrb.w	r0, [r0, ip]
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d035      	beq.n	8006540 <_scanf_i+0x15c>
 80064d4:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80064d8:	d124      	bne.n	8006524 <_scanf_i+0x140>
 80064da:	0510      	lsls	r0, r2, #20
 80064dc:	d522      	bpl.n	8006524 <_scanf_i+0x140>
 80064de:	f10b 0b01 	add.w	fp, fp, #1
 80064e2:	f1b9 0f00 	cmp.w	r9, #0
 80064e6:	d003      	beq.n	80064f0 <_scanf_i+0x10c>
 80064e8:	3301      	adds	r3, #1
 80064ea:	f109 39ff 	add.w	r9, r9, #4294967295
 80064ee:	60a3      	str	r3, [r4, #8]
 80064f0:	6873      	ldr	r3, [r6, #4]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	6073      	str	r3, [r6, #4]
 80064f8:	dd1b      	ble.n	8006532 <_scanf_i+0x14e>
 80064fa:	6833      	ldr	r3, [r6, #0]
 80064fc:	3301      	adds	r3, #1
 80064fe:	6033      	str	r3, [r6, #0]
 8006500:	68a3      	ldr	r3, [r4, #8]
 8006502:	3b01      	subs	r3, #1
 8006504:	60a3      	str	r3, [r4, #8]
 8006506:	e7d9      	b.n	80064bc <_scanf_i+0xd8>
 8006508:	f1bb 0f02 	cmp.w	fp, #2
 800650c:	d1ae      	bne.n	800646c <_scanf_i+0x88>
 800650e:	6822      	ldr	r2, [r4, #0]
 8006510:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8006514:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006518:	d1c4      	bne.n	80064a4 <_scanf_i+0xc0>
 800651a:	2110      	movs	r1, #16
 800651c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006520:	6061      	str	r1, [r4, #4]
 8006522:	e7a2      	b.n	800646a <_scanf_i+0x86>
 8006524:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8006528:	6022      	str	r2, [r4, #0]
 800652a:	780b      	ldrb	r3, [r1, #0]
 800652c:	f805 3b01 	strb.w	r3, [r5], #1
 8006530:	e7de      	b.n	80064f0 <_scanf_i+0x10c>
 8006532:	4631      	mov	r1, r6
 8006534:	4650      	mov	r0, sl
 8006536:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800653a:	4798      	blx	r3
 800653c:	2800      	cmp	r0, #0
 800653e:	d0df      	beq.n	8006500 <_scanf_i+0x11c>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	05d9      	lsls	r1, r3, #23
 8006544:	d50d      	bpl.n	8006562 <_scanf_i+0x17e>
 8006546:	42bd      	cmp	r5, r7
 8006548:	d909      	bls.n	800655e <_scanf_i+0x17a>
 800654a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800654e:	4632      	mov	r2, r6
 8006550:	4650      	mov	r0, sl
 8006552:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006556:	f105 39ff 	add.w	r9, r5, #4294967295
 800655a:	4798      	blx	r3
 800655c:	464d      	mov	r5, r9
 800655e:	42bd      	cmp	r5, r7
 8006560:	d028      	beq.n	80065b4 <_scanf_i+0x1d0>
 8006562:	6822      	ldr	r2, [r4, #0]
 8006564:	f012 0210 	ands.w	r2, r2, #16
 8006568:	d113      	bne.n	8006592 <_scanf_i+0x1ae>
 800656a:	702a      	strb	r2, [r5, #0]
 800656c:	4639      	mov	r1, r7
 800656e:	6863      	ldr	r3, [r4, #4]
 8006570:	4650      	mov	r0, sl
 8006572:	9e01      	ldr	r6, [sp, #4]
 8006574:	47b0      	blx	r6
 8006576:	f8d8 3000 	ldr.w	r3, [r8]
 800657a:	6821      	ldr	r1, [r4, #0]
 800657c:	1d1a      	adds	r2, r3, #4
 800657e:	f8c8 2000 	str.w	r2, [r8]
 8006582:	f011 0f20 	tst.w	r1, #32
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	d00f      	beq.n	80065aa <_scanf_i+0x1c6>
 800658a:	6018      	str	r0, [r3, #0]
 800658c:	68e3      	ldr	r3, [r4, #12]
 800658e:	3301      	adds	r3, #1
 8006590:	60e3      	str	r3, [r4, #12]
 8006592:	2000      	movs	r0, #0
 8006594:	6923      	ldr	r3, [r4, #16]
 8006596:	1bed      	subs	r5, r5, r7
 8006598:	445d      	add	r5, fp
 800659a:	442b      	add	r3, r5
 800659c:	6123      	str	r3, [r4, #16]
 800659e:	b007      	add	sp, #28
 80065a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a4:	f04f 0b00 	mov.w	fp, #0
 80065a8:	e7ca      	b.n	8006540 <_scanf_i+0x15c>
 80065aa:	07ca      	lsls	r2, r1, #31
 80065ac:	bf4c      	ite	mi
 80065ae:	8018      	strhmi	r0, [r3, #0]
 80065b0:	6018      	strpl	r0, [r3, #0]
 80065b2:	e7eb      	b.n	800658c <_scanf_i+0x1a8>
 80065b4:	2001      	movs	r0, #1
 80065b6:	e7f2      	b.n	800659e <_scanf_i+0x1ba>
 80065b8:	08007684 	.word	0x08007684
 80065bc:	08006869 	.word	0x08006869
 80065c0:	08006949 	.word	0x08006949
 80065c4:	080083a1 	.word	0x080083a1

080065c8 <__sccl>:
 80065c8:	b570      	push	{r4, r5, r6, lr}
 80065ca:	780b      	ldrb	r3, [r1, #0]
 80065cc:	4604      	mov	r4, r0
 80065ce:	2b5e      	cmp	r3, #94	@ 0x5e
 80065d0:	bf0b      	itete	eq
 80065d2:	784b      	ldrbeq	r3, [r1, #1]
 80065d4:	1c4a      	addne	r2, r1, #1
 80065d6:	1c8a      	addeq	r2, r1, #2
 80065d8:	2100      	movne	r1, #0
 80065da:	bf08      	it	eq
 80065dc:	2101      	moveq	r1, #1
 80065de:	3801      	subs	r0, #1
 80065e0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80065e4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80065e8:	42a8      	cmp	r0, r5
 80065ea:	d1fb      	bne.n	80065e4 <__sccl+0x1c>
 80065ec:	b90b      	cbnz	r3, 80065f2 <__sccl+0x2a>
 80065ee:	1e50      	subs	r0, r2, #1
 80065f0:	bd70      	pop	{r4, r5, r6, pc}
 80065f2:	f081 0101 	eor.w	r1, r1, #1
 80065f6:	4610      	mov	r0, r2
 80065f8:	54e1      	strb	r1, [r4, r3]
 80065fa:	4602      	mov	r2, r0
 80065fc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006600:	2d2d      	cmp	r5, #45	@ 0x2d
 8006602:	d005      	beq.n	8006610 <__sccl+0x48>
 8006604:	2d5d      	cmp	r5, #93	@ 0x5d
 8006606:	d016      	beq.n	8006636 <__sccl+0x6e>
 8006608:	2d00      	cmp	r5, #0
 800660a:	d0f1      	beq.n	80065f0 <__sccl+0x28>
 800660c:	462b      	mov	r3, r5
 800660e:	e7f2      	b.n	80065f6 <__sccl+0x2e>
 8006610:	7846      	ldrb	r6, [r0, #1]
 8006612:	2e5d      	cmp	r6, #93	@ 0x5d
 8006614:	d0fa      	beq.n	800660c <__sccl+0x44>
 8006616:	42b3      	cmp	r3, r6
 8006618:	dcf8      	bgt.n	800660c <__sccl+0x44>
 800661a:	461a      	mov	r2, r3
 800661c:	3002      	adds	r0, #2
 800661e:	3201      	adds	r2, #1
 8006620:	4296      	cmp	r6, r2
 8006622:	54a1      	strb	r1, [r4, r2]
 8006624:	dcfb      	bgt.n	800661e <__sccl+0x56>
 8006626:	1af2      	subs	r2, r6, r3
 8006628:	3a01      	subs	r2, #1
 800662a:	42b3      	cmp	r3, r6
 800662c:	bfa8      	it	ge
 800662e:	2200      	movge	r2, #0
 8006630:	1c5d      	adds	r5, r3, #1
 8006632:	18ab      	adds	r3, r5, r2
 8006634:	e7e1      	b.n	80065fa <__sccl+0x32>
 8006636:	4610      	mov	r0, r2
 8006638:	e7da      	b.n	80065f0 <__sccl+0x28>

0800663a <__submore>:
 800663a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800663e:	460c      	mov	r4, r1
 8006640:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006642:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006646:	4299      	cmp	r1, r3
 8006648:	d11b      	bne.n	8006682 <__submore+0x48>
 800664a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800664e:	f7ff f83b 	bl	80056c8 <_malloc_r>
 8006652:	b918      	cbnz	r0, 800665c <__submore+0x22>
 8006654:	f04f 30ff 	mov.w	r0, #4294967295
 8006658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800665c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006660:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006662:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8006666:	6360      	str	r0, [r4, #52]	@ 0x34
 8006668:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800666c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006670:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8006674:	7043      	strb	r3, [r0, #1]
 8006676:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800667a:	7003      	strb	r3, [r0, #0]
 800667c:	6020      	str	r0, [r4, #0]
 800667e:	2000      	movs	r0, #0
 8006680:	e7ea      	b.n	8006658 <__submore+0x1e>
 8006682:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8006684:	0077      	lsls	r7, r6, #1
 8006686:	463a      	mov	r2, r7
 8006688:	f000 f845 	bl	8006716 <_realloc_r>
 800668c:	4605      	mov	r5, r0
 800668e:	2800      	cmp	r0, #0
 8006690:	d0e0      	beq.n	8006654 <__submore+0x1a>
 8006692:	eb00 0806 	add.w	r8, r0, r6
 8006696:	4601      	mov	r1, r0
 8006698:	4632      	mov	r2, r6
 800669a:	4640      	mov	r0, r8
 800669c:	f000 f82d 	bl	80066fa <memcpy>
 80066a0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80066a4:	f8c4 8000 	str.w	r8, [r4]
 80066a8:	e7e9      	b.n	800667e <__submore+0x44>

080066aa <memmove>:
 80066aa:	4288      	cmp	r0, r1
 80066ac:	b510      	push	{r4, lr}
 80066ae:	eb01 0402 	add.w	r4, r1, r2
 80066b2:	d902      	bls.n	80066ba <memmove+0x10>
 80066b4:	4284      	cmp	r4, r0
 80066b6:	4623      	mov	r3, r4
 80066b8:	d807      	bhi.n	80066ca <memmove+0x20>
 80066ba:	1e43      	subs	r3, r0, #1
 80066bc:	42a1      	cmp	r1, r4
 80066be:	d008      	beq.n	80066d2 <memmove+0x28>
 80066c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066c8:	e7f8      	b.n	80066bc <memmove+0x12>
 80066ca:	4601      	mov	r1, r0
 80066cc:	4402      	add	r2, r0
 80066ce:	428a      	cmp	r2, r1
 80066d0:	d100      	bne.n	80066d4 <memmove+0x2a>
 80066d2:	bd10      	pop	{r4, pc}
 80066d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066dc:	e7f7      	b.n	80066ce <memmove+0x24>

080066de <memchr>:
 80066de:	4603      	mov	r3, r0
 80066e0:	b510      	push	{r4, lr}
 80066e2:	b2c9      	uxtb	r1, r1
 80066e4:	4402      	add	r2, r0
 80066e6:	4293      	cmp	r3, r2
 80066e8:	4618      	mov	r0, r3
 80066ea:	d101      	bne.n	80066f0 <memchr+0x12>
 80066ec:	2000      	movs	r0, #0
 80066ee:	e003      	b.n	80066f8 <memchr+0x1a>
 80066f0:	7804      	ldrb	r4, [r0, #0]
 80066f2:	3301      	adds	r3, #1
 80066f4:	428c      	cmp	r4, r1
 80066f6:	d1f6      	bne.n	80066e6 <memchr+0x8>
 80066f8:	bd10      	pop	{r4, pc}

080066fa <memcpy>:
 80066fa:	440a      	add	r2, r1
 80066fc:	4291      	cmp	r1, r2
 80066fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8006702:	d100      	bne.n	8006706 <memcpy+0xc>
 8006704:	4770      	bx	lr
 8006706:	b510      	push	{r4, lr}
 8006708:	f811 4b01 	ldrb.w	r4, [r1], #1
 800670c:	4291      	cmp	r1, r2
 800670e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006712:	d1f9      	bne.n	8006708 <memcpy+0xe>
 8006714:	bd10      	pop	{r4, pc}

08006716 <_realloc_r>:
 8006716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800671a:	4607      	mov	r7, r0
 800671c:	4614      	mov	r4, r2
 800671e:	460d      	mov	r5, r1
 8006720:	b921      	cbnz	r1, 800672c <_realloc_r+0x16>
 8006722:	4611      	mov	r1, r2
 8006724:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006728:	f7fe bfce 	b.w	80056c8 <_malloc_r>
 800672c:	b92a      	cbnz	r2, 800673a <_realloc_r+0x24>
 800672e:	f7ff f901 	bl	8005934 <_free_r>
 8006732:	4625      	mov	r5, r4
 8006734:	4628      	mov	r0, r5
 8006736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800673a:	f000 f907 	bl	800694c <_malloc_usable_size_r>
 800673e:	4284      	cmp	r4, r0
 8006740:	4606      	mov	r6, r0
 8006742:	d802      	bhi.n	800674a <_realloc_r+0x34>
 8006744:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006748:	d8f4      	bhi.n	8006734 <_realloc_r+0x1e>
 800674a:	4621      	mov	r1, r4
 800674c:	4638      	mov	r0, r7
 800674e:	f7fe ffbb 	bl	80056c8 <_malloc_r>
 8006752:	4680      	mov	r8, r0
 8006754:	b908      	cbnz	r0, 800675a <_realloc_r+0x44>
 8006756:	4645      	mov	r5, r8
 8006758:	e7ec      	b.n	8006734 <_realloc_r+0x1e>
 800675a:	42b4      	cmp	r4, r6
 800675c:	4622      	mov	r2, r4
 800675e:	4629      	mov	r1, r5
 8006760:	bf28      	it	cs
 8006762:	4632      	movcs	r2, r6
 8006764:	f7ff ffc9 	bl	80066fa <memcpy>
 8006768:	4629      	mov	r1, r5
 800676a:	4638      	mov	r0, r7
 800676c:	f7ff f8e2 	bl	8005934 <_free_r>
 8006770:	e7f1      	b.n	8006756 <_realloc_r+0x40>
	...

08006774 <_strtol_l.isra.0>:
 8006774:	2b24      	cmp	r3, #36	@ 0x24
 8006776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800677a:	4686      	mov	lr, r0
 800677c:	4690      	mov	r8, r2
 800677e:	d801      	bhi.n	8006784 <_strtol_l.isra.0+0x10>
 8006780:	2b01      	cmp	r3, #1
 8006782:	d106      	bne.n	8006792 <_strtol_l.isra.0+0x1e>
 8006784:	f7ff f8aa 	bl	80058dc <__errno>
 8006788:	2316      	movs	r3, #22
 800678a:	6003      	str	r3, [r0, #0]
 800678c:	2000      	movs	r0, #0
 800678e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006792:	460d      	mov	r5, r1
 8006794:	4833      	ldr	r0, [pc, #204]	@ (8006864 <_strtol_l.isra.0+0xf0>)
 8006796:	462a      	mov	r2, r5
 8006798:	f815 4b01 	ldrb.w	r4, [r5], #1
 800679c:	5d06      	ldrb	r6, [r0, r4]
 800679e:	f016 0608 	ands.w	r6, r6, #8
 80067a2:	d1f8      	bne.n	8006796 <_strtol_l.isra.0+0x22>
 80067a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80067a6:	d110      	bne.n	80067ca <_strtol_l.isra.0+0x56>
 80067a8:	2601      	movs	r6, #1
 80067aa:	782c      	ldrb	r4, [r5, #0]
 80067ac:	1c95      	adds	r5, r2, #2
 80067ae:	f033 0210 	bics.w	r2, r3, #16
 80067b2:	d115      	bne.n	80067e0 <_strtol_l.isra.0+0x6c>
 80067b4:	2c30      	cmp	r4, #48	@ 0x30
 80067b6:	d10d      	bne.n	80067d4 <_strtol_l.isra.0+0x60>
 80067b8:	782a      	ldrb	r2, [r5, #0]
 80067ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80067be:	2a58      	cmp	r2, #88	@ 0x58
 80067c0:	d108      	bne.n	80067d4 <_strtol_l.isra.0+0x60>
 80067c2:	786c      	ldrb	r4, [r5, #1]
 80067c4:	3502      	adds	r5, #2
 80067c6:	2310      	movs	r3, #16
 80067c8:	e00a      	b.n	80067e0 <_strtol_l.isra.0+0x6c>
 80067ca:	2c2b      	cmp	r4, #43	@ 0x2b
 80067cc:	bf04      	itt	eq
 80067ce:	782c      	ldrbeq	r4, [r5, #0]
 80067d0:	1c95      	addeq	r5, r2, #2
 80067d2:	e7ec      	b.n	80067ae <_strtol_l.isra.0+0x3a>
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1f6      	bne.n	80067c6 <_strtol_l.isra.0+0x52>
 80067d8:	2c30      	cmp	r4, #48	@ 0x30
 80067da:	bf14      	ite	ne
 80067dc:	230a      	movne	r3, #10
 80067de:	2308      	moveq	r3, #8
 80067e0:	2200      	movs	r2, #0
 80067e2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80067e6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80067ea:	fbbc f9f3 	udiv	r9, ip, r3
 80067ee:	4610      	mov	r0, r2
 80067f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80067f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80067f8:	2f09      	cmp	r7, #9
 80067fa:	d80f      	bhi.n	800681c <_strtol_l.isra.0+0xa8>
 80067fc:	463c      	mov	r4, r7
 80067fe:	42a3      	cmp	r3, r4
 8006800:	dd1b      	ble.n	800683a <_strtol_l.isra.0+0xc6>
 8006802:	1c57      	adds	r7, r2, #1
 8006804:	d007      	beq.n	8006816 <_strtol_l.isra.0+0xa2>
 8006806:	4581      	cmp	r9, r0
 8006808:	d314      	bcc.n	8006834 <_strtol_l.isra.0+0xc0>
 800680a:	d101      	bne.n	8006810 <_strtol_l.isra.0+0x9c>
 800680c:	45a2      	cmp	sl, r4
 800680e:	db11      	blt.n	8006834 <_strtol_l.isra.0+0xc0>
 8006810:	2201      	movs	r2, #1
 8006812:	fb00 4003 	mla	r0, r0, r3, r4
 8006816:	f815 4b01 	ldrb.w	r4, [r5], #1
 800681a:	e7eb      	b.n	80067f4 <_strtol_l.isra.0+0x80>
 800681c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006820:	2f19      	cmp	r7, #25
 8006822:	d801      	bhi.n	8006828 <_strtol_l.isra.0+0xb4>
 8006824:	3c37      	subs	r4, #55	@ 0x37
 8006826:	e7ea      	b.n	80067fe <_strtol_l.isra.0+0x8a>
 8006828:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800682c:	2f19      	cmp	r7, #25
 800682e:	d804      	bhi.n	800683a <_strtol_l.isra.0+0xc6>
 8006830:	3c57      	subs	r4, #87	@ 0x57
 8006832:	e7e4      	b.n	80067fe <_strtol_l.isra.0+0x8a>
 8006834:	f04f 32ff 	mov.w	r2, #4294967295
 8006838:	e7ed      	b.n	8006816 <_strtol_l.isra.0+0xa2>
 800683a:	1c53      	adds	r3, r2, #1
 800683c:	d108      	bne.n	8006850 <_strtol_l.isra.0+0xdc>
 800683e:	2322      	movs	r3, #34	@ 0x22
 8006840:	4660      	mov	r0, ip
 8006842:	f8ce 3000 	str.w	r3, [lr]
 8006846:	f1b8 0f00 	cmp.w	r8, #0
 800684a:	d0a0      	beq.n	800678e <_strtol_l.isra.0+0x1a>
 800684c:	1e69      	subs	r1, r5, #1
 800684e:	e006      	b.n	800685e <_strtol_l.isra.0+0xea>
 8006850:	b106      	cbz	r6, 8006854 <_strtol_l.isra.0+0xe0>
 8006852:	4240      	negs	r0, r0
 8006854:	f1b8 0f00 	cmp.w	r8, #0
 8006858:	d099      	beq.n	800678e <_strtol_l.isra.0+0x1a>
 800685a:	2a00      	cmp	r2, #0
 800685c:	d1f6      	bne.n	800684c <_strtol_l.isra.0+0xd8>
 800685e:	f8c8 1000 	str.w	r1, [r8]
 8006862:	e794      	b.n	800678e <_strtol_l.isra.0+0x1a>
 8006864:	080083ad 	.word	0x080083ad

08006868 <_strtol_r>:
 8006868:	f7ff bf84 	b.w	8006774 <_strtol_l.isra.0>

0800686c <_strtoul_l.isra.0>:
 800686c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006870:	4686      	mov	lr, r0
 8006872:	460d      	mov	r5, r1
 8006874:	4e33      	ldr	r6, [pc, #204]	@ (8006944 <_strtoul_l.isra.0+0xd8>)
 8006876:	4628      	mov	r0, r5
 8006878:	f815 4b01 	ldrb.w	r4, [r5], #1
 800687c:	5d37      	ldrb	r7, [r6, r4]
 800687e:	f017 0708 	ands.w	r7, r7, #8
 8006882:	d1f8      	bne.n	8006876 <_strtoul_l.isra.0+0xa>
 8006884:	2c2d      	cmp	r4, #45	@ 0x2d
 8006886:	d110      	bne.n	80068aa <_strtoul_l.isra.0+0x3e>
 8006888:	2701      	movs	r7, #1
 800688a:	782c      	ldrb	r4, [r5, #0]
 800688c:	1c85      	adds	r5, r0, #2
 800688e:	f033 0010 	bics.w	r0, r3, #16
 8006892:	d115      	bne.n	80068c0 <_strtoul_l.isra.0+0x54>
 8006894:	2c30      	cmp	r4, #48	@ 0x30
 8006896:	d10d      	bne.n	80068b4 <_strtoul_l.isra.0+0x48>
 8006898:	7828      	ldrb	r0, [r5, #0]
 800689a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800689e:	2858      	cmp	r0, #88	@ 0x58
 80068a0:	d108      	bne.n	80068b4 <_strtoul_l.isra.0+0x48>
 80068a2:	786c      	ldrb	r4, [r5, #1]
 80068a4:	3502      	adds	r5, #2
 80068a6:	2310      	movs	r3, #16
 80068a8:	e00a      	b.n	80068c0 <_strtoul_l.isra.0+0x54>
 80068aa:	2c2b      	cmp	r4, #43	@ 0x2b
 80068ac:	bf04      	itt	eq
 80068ae:	782c      	ldrbeq	r4, [r5, #0]
 80068b0:	1c85      	addeq	r5, r0, #2
 80068b2:	e7ec      	b.n	800688e <_strtoul_l.isra.0+0x22>
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1f6      	bne.n	80068a6 <_strtoul_l.isra.0+0x3a>
 80068b8:	2c30      	cmp	r4, #48	@ 0x30
 80068ba:	bf14      	ite	ne
 80068bc:	230a      	movne	r3, #10
 80068be:	2308      	moveq	r3, #8
 80068c0:	f04f 38ff 	mov.w	r8, #4294967295
 80068c4:	fbb8 f8f3 	udiv	r8, r8, r3
 80068c8:	2600      	movs	r6, #0
 80068ca:	fb03 f908 	mul.w	r9, r3, r8
 80068ce:	4630      	mov	r0, r6
 80068d0:	ea6f 0909 	mvn.w	r9, r9
 80068d4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80068d8:	f1bc 0f09 	cmp.w	ip, #9
 80068dc:	d810      	bhi.n	8006900 <_strtoul_l.isra.0+0x94>
 80068de:	4664      	mov	r4, ip
 80068e0:	42a3      	cmp	r3, r4
 80068e2:	dd1e      	ble.n	8006922 <_strtoul_l.isra.0+0xb6>
 80068e4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80068e8:	d007      	beq.n	80068fa <_strtoul_l.isra.0+0x8e>
 80068ea:	4580      	cmp	r8, r0
 80068ec:	d316      	bcc.n	800691c <_strtoul_l.isra.0+0xb0>
 80068ee:	d101      	bne.n	80068f4 <_strtoul_l.isra.0+0x88>
 80068f0:	45a1      	cmp	r9, r4
 80068f2:	db13      	blt.n	800691c <_strtoul_l.isra.0+0xb0>
 80068f4:	2601      	movs	r6, #1
 80068f6:	fb00 4003 	mla	r0, r0, r3, r4
 80068fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068fe:	e7e9      	b.n	80068d4 <_strtoul_l.isra.0+0x68>
 8006900:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8006904:	f1bc 0f19 	cmp.w	ip, #25
 8006908:	d801      	bhi.n	800690e <_strtoul_l.isra.0+0xa2>
 800690a:	3c37      	subs	r4, #55	@ 0x37
 800690c:	e7e8      	b.n	80068e0 <_strtoul_l.isra.0+0x74>
 800690e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8006912:	f1bc 0f19 	cmp.w	ip, #25
 8006916:	d804      	bhi.n	8006922 <_strtoul_l.isra.0+0xb6>
 8006918:	3c57      	subs	r4, #87	@ 0x57
 800691a:	e7e1      	b.n	80068e0 <_strtoul_l.isra.0+0x74>
 800691c:	f04f 36ff 	mov.w	r6, #4294967295
 8006920:	e7eb      	b.n	80068fa <_strtoul_l.isra.0+0x8e>
 8006922:	1c73      	adds	r3, r6, #1
 8006924:	d106      	bne.n	8006934 <_strtoul_l.isra.0+0xc8>
 8006926:	2322      	movs	r3, #34	@ 0x22
 8006928:	4630      	mov	r0, r6
 800692a:	f8ce 3000 	str.w	r3, [lr]
 800692e:	b932      	cbnz	r2, 800693e <_strtoul_l.isra.0+0xd2>
 8006930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006934:	b107      	cbz	r7, 8006938 <_strtoul_l.isra.0+0xcc>
 8006936:	4240      	negs	r0, r0
 8006938:	2a00      	cmp	r2, #0
 800693a:	d0f9      	beq.n	8006930 <_strtoul_l.isra.0+0xc4>
 800693c:	b106      	cbz	r6, 8006940 <_strtoul_l.isra.0+0xd4>
 800693e:	1e69      	subs	r1, r5, #1
 8006940:	6011      	str	r1, [r2, #0]
 8006942:	e7f5      	b.n	8006930 <_strtoul_l.isra.0+0xc4>
 8006944:	080083ad 	.word	0x080083ad

08006948 <_strtoul_r>:
 8006948:	f7ff bf90 	b.w	800686c <_strtoul_l.isra.0>

0800694c <_malloc_usable_size_r>:
 800694c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006950:	1f18      	subs	r0, r3, #4
 8006952:	2b00      	cmp	r3, #0
 8006954:	bfbc      	itt	lt
 8006956:	580b      	ldrlt	r3, [r1, r0]
 8006958:	18c0      	addlt	r0, r0, r3
 800695a:	4770      	bx	lr

0800695c <sinf>:
 800695c:	b507      	push	{r0, r1, r2, lr}
 800695e:	4a1b      	ldr	r2, [pc, #108]	@ (80069cc <sinf+0x70>)
 8006960:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8006964:	4293      	cmp	r3, r2
 8006966:	4601      	mov	r1, r0
 8006968:	d806      	bhi.n	8006978 <sinf+0x1c>
 800696a:	2200      	movs	r2, #0
 800696c:	2100      	movs	r1, #0
 800696e:	b003      	add	sp, #12
 8006970:	f85d eb04 	ldr.w	lr, [sp], #4
 8006974:	f000 b8ac 	b.w	8006ad0 <__kernel_sinf>
 8006978:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800697c:	d304      	bcc.n	8006988 <sinf+0x2c>
 800697e:	f7f9 fdad 	bl	80004dc <__aeabi_fsub>
 8006982:	b003      	add	sp, #12
 8006984:	f85d fb04 	ldr.w	pc, [sp], #4
 8006988:	4669      	mov	r1, sp
 800698a:	f000 f917 	bl	8006bbc <__ieee754_rem_pio2f>
 800698e:	f000 0003 	and.w	r0, r0, #3
 8006992:	2801      	cmp	r0, #1
 8006994:	d008      	beq.n	80069a8 <sinf+0x4c>
 8006996:	2802      	cmp	r0, #2
 8006998:	d00b      	beq.n	80069b2 <sinf+0x56>
 800699a:	b990      	cbnz	r0, 80069c2 <sinf+0x66>
 800699c:	2201      	movs	r2, #1
 800699e:	9901      	ldr	r1, [sp, #4]
 80069a0:	9800      	ldr	r0, [sp, #0]
 80069a2:	f000 f895 	bl	8006ad0 <__kernel_sinf>
 80069a6:	e7ec      	b.n	8006982 <sinf+0x26>
 80069a8:	9901      	ldr	r1, [sp, #4]
 80069aa:	9800      	ldr	r0, [sp, #0]
 80069ac:	f000 f810 	bl	80069d0 <__kernel_cosf>
 80069b0:	e7e7      	b.n	8006982 <sinf+0x26>
 80069b2:	2201      	movs	r2, #1
 80069b4:	9901      	ldr	r1, [sp, #4]
 80069b6:	9800      	ldr	r0, [sp, #0]
 80069b8:	f000 f88a 	bl	8006ad0 <__kernel_sinf>
 80069bc:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80069c0:	e7df      	b.n	8006982 <sinf+0x26>
 80069c2:	9901      	ldr	r1, [sp, #4]
 80069c4:	9800      	ldr	r0, [sp, #0]
 80069c6:	f000 f803 	bl	80069d0 <__kernel_cosf>
 80069ca:	e7f7      	b.n	80069bc <sinf+0x60>
 80069cc:	3f490fd8 	.word	0x3f490fd8

080069d0 <__kernel_cosf>:
 80069d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d4:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80069d8:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 80069dc:	4606      	mov	r6, r0
 80069de:	4688      	mov	r8, r1
 80069e0:	d203      	bcs.n	80069ea <__kernel_cosf+0x1a>
 80069e2:	f7fa f84b 	bl	8000a7c <__aeabi_f2iz>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d05c      	beq.n	8006aa4 <__kernel_cosf+0xd4>
 80069ea:	4631      	mov	r1, r6
 80069ec:	4630      	mov	r0, r6
 80069ee:	f7f9 fe7f 	bl	80006f0 <__aeabi_fmul>
 80069f2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80069f6:	4604      	mov	r4, r0
 80069f8:	f7f9 fe7a 	bl	80006f0 <__aeabi_fmul>
 80069fc:	492b      	ldr	r1, [pc, #172]	@ (8006aac <__kernel_cosf+0xdc>)
 80069fe:	4607      	mov	r7, r0
 8006a00:	4620      	mov	r0, r4
 8006a02:	f7f9 fe75 	bl	80006f0 <__aeabi_fmul>
 8006a06:	492a      	ldr	r1, [pc, #168]	@ (8006ab0 <__kernel_cosf+0xe0>)
 8006a08:	f7f9 fd6a 	bl	80004e0 <__addsf3>
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	f7f9 fe6f 	bl	80006f0 <__aeabi_fmul>
 8006a12:	4928      	ldr	r1, [pc, #160]	@ (8006ab4 <__kernel_cosf+0xe4>)
 8006a14:	f7f9 fd62 	bl	80004dc <__aeabi_fsub>
 8006a18:	4621      	mov	r1, r4
 8006a1a:	f7f9 fe69 	bl	80006f0 <__aeabi_fmul>
 8006a1e:	4926      	ldr	r1, [pc, #152]	@ (8006ab8 <__kernel_cosf+0xe8>)
 8006a20:	f7f9 fd5e 	bl	80004e0 <__addsf3>
 8006a24:	4621      	mov	r1, r4
 8006a26:	f7f9 fe63 	bl	80006f0 <__aeabi_fmul>
 8006a2a:	4924      	ldr	r1, [pc, #144]	@ (8006abc <__kernel_cosf+0xec>)
 8006a2c:	f7f9 fd56 	bl	80004dc <__aeabi_fsub>
 8006a30:	4621      	mov	r1, r4
 8006a32:	f7f9 fe5d 	bl	80006f0 <__aeabi_fmul>
 8006a36:	4922      	ldr	r1, [pc, #136]	@ (8006ac0 <__kernel_cosf+0xf0>)
 8006a38:	f7f9 fd52 	bl	80004e0 <__addsf3>
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	f7f9 fe57 	bl	80006f0 <__aeabi_fmul>
 8006a42:	4621      	mov	r1, r4
 8006a44:	f7f9 fe54 	bl	80006f0 <__aeabi_fmul>
 8006a48:	4641      	mov	r1, r8
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	f7f9 fe4f 	bl	80006f0 <__aeabi_fmul>
 8006a52:	4601      	mov	r1, r0
 8006a54:	4620      	mov	r0, r4
 8006a56:	f7f9 fd41 	bl	80004dc <__aeabi_fsub>
 8006a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ac4 <__kernel_cosf+0xf4>)
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	429d      	cmp	r5, r3
 8006a60:	d80a      	bhi.n	8006a78 <__kernel_cosf+0xa8>
 8006a62:	4601      	mov	r1, r0
 8006a64:	4638      	mov	r0, r7
 8006a66:	f7f9 fd39 	bl	80004dc <__aeabi_fsub>
 8006a6a:	4601      	mov	r1, r0
 8006a6c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006a70:	f7f9 fd34 	bl	80004dc <__aeabi_fsub>
 8006a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a78:	4b13      	ldr	r3, [pc, #76]	@ (8006ac8 <__kernel_cosf+0xf8>)
 8006a7a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006a7e:	429d      	cmp	r5, r3
 8006a80:	bf8c      	ite	hi
 8006a82:	4d12      	ldrhi	r5, [pc, #72]	@ (8006acc <__kernel_cosf+0xfc>)
 8006a84:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8006a88:	4629      	mov	r1, r5
 8006a8a:	f7f9 fd27 	bl	80004dc <__aeabi_fsub>
 8006a8e:	4629      	mov	r1, r5
 8006a90:	4606      	mov	r6, r0
 8006a92:	4638      	mov	r0, r7
 8006a94:	f7f9 fd22 	bl	80004dc <__aeabi_fsub>
 8006a98:	4621      	mov	r1, r4
 8006a9a:	f7f9 fd1f 	bl	80004dc <__aeabi_fsub>
 8006a9e:	4601      	mov	r1, r0
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	e7e5      	b.n	8006a70 <__kernel_cosf+0xa0>
 8006aa4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006aa8:	e7e4      	b.n	8006a74 <__kernel_cosf+0xa4>
 8006aaa:	bf00      	nop
 8006aac:	ad47d74e 	.word	0xad47d74e
 8006ab0:	310f74f6 	.word	0x310f74f6
 8006ab4:	3493f27c 	.word	0x3493f27c
 8006ab8:	37d00d01 	.word	0x37d00d01
 8006abc:	3ab60b61 	.word	0x3ab60b61
 8006ac0:	3d2aaaab 	.word	0x3d2aaaab
 8006ac4:	3e999999 	.word	0x3e999999
 8006ac8:	3f480000 	.word	0x3f480000
 8006acc:	3e900000 	.word	0x3e900000

08006ad0 <__kernel_sinf>:
 8006ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ad4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8006ad8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8006adc:	4604      	mov	r4, r0
 8006ade:	460f      	mov	r7, r1
 8006ae0:	4691      	mov	r9, r2
 8006ae2:	d203      	bcs.n	8006aec <__kernel_sinf+0x1c>
 8006ae4:	f7f9 ffca 	bl	8000a7c <__aeabi_f2iz>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	d035      	beq.n	8006b58 <__kernel_sinf+0x88>
 8006aec:	4621      	mov	r1, r4
 8006aee:	4620      	mov	r0, r4
 8006af0:	f7f9 fdfe 	bl	80006f0 <__aeabi_fmul>
 8006af4:	4605      	mov	r5, r0
 8006af6:	4601      	mov	r1, r0
 8006af8:	4620      	mov	r0, r4
 8006afa:	f7f9 fdf9 	bl	80006f0 <__aeabi_fmul>
 8006afe:	4929      	ldr	r1, [pc, #164]	@ (8006ba4 <__kernel_sinf+0xd4>)
 8006b00:	4606      	mov	r6, r0
 8006b02:	4628      	mov	r0, r5
 8006b04:	f7f9 fdf4 	bl	80006f0 <__aeabi_fmul>
 8006b08:	4927      	ldr	r1, [pc, #156]	@ (8006ba8 <__kernel_sinf+0xd8>)
 8006b0a:	f7f9 fce7 	bl	80004dc <__aeabi_fsub>
 8006b0e:	4629      	mov	r1, r5
 8006b10:	f7f9 fdee 	bl	80006f0 <__aeabi_fmul>
 8006b14:	4925      	ldr	r1, [pc, #148]	@ (8006bac <__kernel_sinf+0xdc>)
 8006b16:	f7f9 fce3 	bl	80004e0 <__addsf3>
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	f7f9 fde8 	bl	80006f0 <__aeabi_fmul>
 8006b20:	4923      	ldr	r1, [pc, #140]	@ (8006bb0 <__kernel_sinf+0xe0>)
 8006b22:	f7f9 fcdb 	bl	80004dc <__aeabi_fsub>
 8006b26:	4629      	mov	r1, r5
 8006b28:	f7f9 fde2 	bl	80006f0 <__aeabi_fmul>
 8006b2c:	4921      	ldr	r1, [pc, #132]	@ (8006bb4 <__kernel_sinf+0xe4>)
 8006b2e:	f7f9 fcd7 	bl	80004e0 <__addsf3>
 8006b32:	4680      	mov	r8, r0
 8006b34:	f1b9 0f00 	cmp.w	r9, #0
 8006b38:	d111      	bne.n	8006b5e <__kernel_sinf+0x8e>
 8006b3a:	4601      	mov	r1, r0
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	f7f9 fdd7 	bl	80006f0 <__aeabi_fmul>
 8006b42:	491d      	ldr	r1, [pc, #116]	@ (8006bb8 <__kernel_sinf+0xe8>)
 8006b44:	f7f9 fcca 	bl	80004dc <__aeabi_fsub>
 8006b48:	4631      	mov	r1, r6
 8006b4a:	f7f9 fdd1 	bl	80006f0 <__aeabi_fmul>
 8006b4e:	4601      	mov	r1, r0
 8006b50:	4620      	mov	r0, r4
 8006b52:	f7f9 fcc5 	bl	80004e0 <__addsf3>
 8006b56:	4604      	mov	r4, r0
 8006b58:	4620      	mov	r0, r4
 8006b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b5e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006b62:	4638      	mov	r0, r7
 8006b64:	f7f9 fdc4 	bl	80006f0 <__aeabi_fmul>
 8006b68:	4641      	mov	r1, r8
 8006b6a:	4681      	mov	r9, r0
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	f7f9 fdbf 	bl	80006f0 <__aeabi_fmul>
 8006b72:	4601      	mov	r1, r0
 8006b74:	4648      	mov	r0, r9
 8006b76:	f7f9 fcb1 	bl	80004dc <__aeabi_fsub>
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	f7f9 fdb8 	bl	80006f0 <__aeabi_fmul>
 8006b80:	4639      	mov	r1, r7
 8006b82:	f7f9 fcab 	bl	80004dc <__aeabi_fsub>
 8006b86:	490c      	ldr	r1, [pc, #48]	@ (8006bb8 <__kernel_sinf+0xe8>)
 8006b88:	4605      	mov	r5, r0
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f7f9 fdb0 	bl	80006f0 <__aeabi_fmul>
 8006b90:	4601      	mov	r1, r0
 8006b92:	4628      	mov	r0, r5
 8006b94:	f7f9 fca4 	bl	80004e0 <__addsf3>
 8006b98:	4601      	mov	r1, r0
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f7f9 fc9e 	bl	80004dc <__aeabi_fsub>
 8006ba0:	e7d9      	b.n	8006b56 <__kernel_sinf+0x86>
 8006ba2:	bf00      	nop
 8006ba4:	2f2ec9d3 	.word	0x2f2ec9d3
 8006ba8:	32d72f34 	.word	0x32d72f34
 8006bac:	3638ef1b 	.word	0x3638ef1b
 8006bb0:	39500d01 	.word	0x39500d01
 8006bb4:	3c088889 	.word	0x3c088889
 8006bb8:	3e2aaaab 	.word	0x3e2aaaab

08006bbc <__ieee754_rem_pio2f>:
 8006bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc0:	4aa4      	ldr	r2, [pc, #656]	@ (8006e54 <__ieee754_rem_pio2f+0x298>)
 8006bc2:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8006bc6:	4590      	cmp	r8, r2
 8006bc8:	460c      	mov	r4, r1
 8006bca:	4682      	mov	sl, r0
 8006bcc:	b087      	sub	sp, #28
 8006bce:	d804      	bhi.n	8006bda <__ieee754_rem_pio2f+0x1e>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	6008      	str	r0, [r1, #0]
 8006bd4:	604b      	str	r3, [r1, #4]
 8006bd6:	2500      	movs	r5, #0
 8006bd8:	e01d      	b.n	8006c16 <__ieee754_rem_pio2f+0x5a>
 8006bda:	4a9f      	ldr	r2, [pc, #636]	@ (8006e58 <__ieee754_rem_pio2f+0x29c>)
 8006bdc:	4590      	cmp	r8, r2
 8006bde:	d84f      	bhi.n	8006c80 <__ieee754_rem_pio2f+0xc4>
 8006be0:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8006be4:	2800      	cmp	r0, #0
 8006be6:	499d      	ldr	r1, [pc, #628]	@ (8006e5c <__ieee754_rem_pio2f+0x2a0>)
 8006be8:	4f9d      	ldr	r7, [pc, #628]	@ (8006e60 <__ieee754_rem_pio2f+0x2a4>)
 8006bea:	f025 050f 	bic.w	r5, r5, #15
 8006bee:	dd24      	ble.n	8006c3a <__ieee754_rem_pio2f+0x7e>
 8006bf0:	f7f9 fc74 	bl	80004dc <__aeabi_fsub>
 8006bf4:	42bd      	cmp	r5, r7
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	d011      	beq.n	8006c1e <__ieee754_rem_pio2f+0x62>
 8006bfa:	499a      	ldr	r1, [pc, #616]	@ (8006e64 <__ieee754_rem_pio2f+0x2a8>)
 8006bfc:	f7f9 fc6e 	bl	80004dc <__aeabi_fsub>
 8006c00:	4601      	mov	r1, r0
 8006c02:	4605      	mov	r5, r0
 8006c04:	4630      	mov	r0, r6
 8006c06:	f7f9 fc69 	bl	80004dc <__aeabi_fsub>
 8006c0a:	4996      	ldr	r1, [pc, #600]	@ (8006e64 <__ieee754_rem_pio2f+0x2a8>)
 8006c0c:	f7f9 fc66 	bl	80004dc <__aeabi_fsub>
 8006c10:	6025      	str	r5, [r4, #0]
 8006c12:	2501      	movs	r5, #1
 8006c14:	6060      	str	r0, [r4, #4]
 8006c16:	4628      	mov	r0, r5
 8006c18:	b007      	add	sp, #28
 8006c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c1e:	4992      	ldr	r1, [pc, #584]	@ (8006e68 <__ieee754_rem_pio2f+0x2ac>)
 8006c20:	f7f9 fc5c 	bl	80004dc <__aeabi_fsub>
 8006c24:	4991      	ldr	r1, [pc, #580]	@ (8006e6c <__ieee754_rem_pio2f+0x2b0>)
 8006c26:	4606      	mov	r6, r0
 8006c28:	f7f9 fc58 	bl	80004dc <__aeabi_fsub>
 8006c2c:	4601      	mov	r1, r0
 8006c2e:	4605      	mov	r5, r0
 8006c30:	4630      	mov	r0, r6
 8006c32:	f7f9 fc53 	bl	80004dc <__aeabi_fsub>
 8006c36:	498d      	ldr	r1, [pc, #564]	@ (8006e6c <__ieee754_rem_pio2f+0x2b0>)
 8006c38:	e7e8      	b.n	8006c0c <__ieee754_rem_pio2f+0x50>
 8006c3a:	f7f9 fc51 	bl	80004e0 <__addsf3>
 8006c3e:	42bd      	cmp	r5, r7
 8006c40:	4606      	mov	r6, r0
 8006c42:	d00f      	beq.n	8006c64 <__ieee754_rem_pio2f+0xa8>
 8006c44:	4987      	ldr	r1, [pc, #540]	@ (8006e64 <__ieee754_rem_pio2f+0x2a8>)
 8006c46:	f7f9 fc4b 	bl	80004e0 <__addsf3>
 8006c4a:	4601      	mov	r1, r0
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	4630      	mov	r0, r6
 8006c50:	f7f9 fc44 	bl	80004dc <__aeabi_fsub>
 8006c54:	4983      	ldr	r1, [pc, #524]	@ (8006e64 <__ieee754_rem_pio2f+0x2a8>)
 8006c56:	f7f9 fc43 	bl	80004e0 <__addsf3>
 8006c5a:	6025      	str	r5, [r4, #0]
 8006c5c:	6060      	str	r0, [r4, #4]
 8006c5e:	f04f 35ff 	mov.w	r5, #4294967295
 8006c62:	e7d8      	b.n	8006c16 <__ieee754_rem_pio2f+0x5a>
 8006c64:	4980      	ldr	r1, [pc, #512]	@ (8006e68 <__ieee754_rem_pio2f+0x2ac>)
 8006c66:	f7f9 fc3b 	bl	80004e0 <__addsf3>
 8006c6a:	4980      	ldr	r1, [pc, #512]	@ (8006e6c <__ieee754_rem_pio2f+0x2b0>)
 8006c6c:	4606      	mov	r6, r0
 8006c6e:	f7f9 fc37 	bl	80004e0 <__addsf3>
 8006c72:	4601      	mov	r1, r0
 8006c74:	4605      	mov	r5, r0
 8006c76:	4630      	mov	r0, r6
 8006c78:	f7f9 fc30 	bl	80004dc <__aeabi_fsub>
 8006c7c:	497b      	ldr	r1, [pc, #492]	@ (8006e6c <__ieee754_rem_pio2f+0x2b0>)
 8006c7e:	e7ea      	b.n	8006c56 <__ieee754_rem_pio2f+0x9a>
 8006c80:	4a7b      	ldr	r2, [pc, #492]	@ (8006e70 <__ieee754_rem_pio2f+0x2b4>)
 8006c82:	4590      	cmp	r8, r2
 8006c84:	f200 8095 	bhi.w	8006db2 <__ieee754_rem_pio2f+0x1f6>
 8006c88:	f000 f8fe 	bl	8006e88 <fabsf>
 8006c8c:	4979      	ldr	r1, [pc, #484]	@ (8006e74 <__ieee754_rem_pio2f+0x2b8>)
 8006c8e:	4606      	mov	r6, r0
 8006c90:	f7f9 fd2e 	bl	80006f0 <__aeabi_fmul>
 8006c94:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006c98:	f7f9 fc22 	bl	80004e0 <__addsf3>
 8006c9c:	f7f9 feee 	bl	8000a7c <__aeabi_f2iz>
 8006ca0:	4605      	mov	r5, r0
 8006ca2:	f7f9 fcd1 	bl	8000648 <__aeabi_i2f>
 8006ca6:	496d      	ldr	r1, [pc, #436]	@ (8006e5c <__ieee754_rem_pio2f+0x2a0>)
 8006ca8:	4681      	mov	r9, r0
 8006caa:	f7f9 fd21 	bl	80006f0 <__aeabi_fmul>
 8006cae:	4601      	mov	r1, r0
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f7f9 fc13 	bl	80004dc <__aeabi_fsub>
 8006cb6:	496b      	ldr	r1, [pc, #428]	@ (8006e64 <__ieee754_rem_pio2f+0x2a8>)
 8006cb8:	4607      	mov	r7, r0
 8006cba:	4648      	mov	r0, r9
 8006cbc:	f7f9 fd18 	bl	80006f0 <__aeabi_fmul>
 8006cc0:	2d1f      	cmp	r5, #31
 8006cc2:	4606      	mov	r6, r0
 8006cc4:	dc0e      	bgt.n	8006ce4 <__ieee754_rem_pio2f+0x128>
 8006cc6:	4a6c      	ldr	r2, [pc, #432]	@ (8006e78 <__ieee754_rem_pio2f+0x2bc>)
 8006cc8:	1e69      	subs	r1, r5, #1
 8006cca:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006cce:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8006cd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d004      	beq.n	8006ce4 <__ieee754_rem_pio2f+0x128>
 8006cda:	4631      	mov	r1, r6
 8006cdc:	4638      	mov	r0, r7
 8006cde:	f7f9 fbfd 	bl	80004dc <__aeabi_fsub>
 8006ce2:	e00b      	b.n	8006cfc <__ieee754_rem_pio2f+0x140>
 8006ce4:	4631      	mov	r1, r6
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	f7f9 fbf8 	bl	80004dc <__aeabi_fsub>
 8006cec:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006cf0:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8006cf4:	2b08      	cmp	r3, #8
 8006cf6:	ea4f 5be8 	mov.w	fp, r8, asr #23
 8006cfa:	dc01      	bgt.n	8006d00 <__ieee754_rem_pio2f+0x144>
 8006cfc:	6020      	str	r0, [r4, #0]
 8006cfe:	e026      	b.n	8006d4e <__ieee754_rem_pio2f+0x192>
 8006d00:	4959      	ldr	r1, [pc, #356]	@ (8006e68 <__ieee754_rem_pio2f+0x2ac>)
 8006d02:	4648      	mov	r0, r9
 8006d04:	f7f9 fcf4 	bl	80006f0 <__aeabi_fmul>
 8006d08:	4606      	mov	r6, r0
 8006d0a:	4601      	mov	r1, r0
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	f7f9 fbe5 	bl	80004dc <__aeabi_fsub>
 8006d12:	4601      	mov	r1, r0
 8006d14:	4680      	mov	r8, r0
 8006d16:	4638      	mov	r0, r7
 8006d18:	f7f9 fbe0 	bl	80004dc <__aeabi_fsub>
 8006d1c:	4631      	mov	r1, r6
 8006d1e:	f7f9 fbdd 	bl	80004dc <__aeabi_fsub>
 8006d22:	4606      	mov	r6, r0
 8006d24:	4951      	ldr	r1, [pc, #324]	@ (8006e6c <__ieee754_rem_pio2f+0x2b0>)
 8006d26:	4648      	mov	r0, r9
 8006d28:	f7f9 fce2 	bl	80006f0 <__aeabi_fmul>
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	f7f9 fbd5 	bl	80004dc <__aeabi_fsub>
 8006d32:	4601      	mov	r1, r0
 8006d34:	4606      	mov	r6, r0
 8006d36:	4640      	mov	r0, r8
 8006d38:	f7f9 fbd0 	bl	80004dc <__aeabi_fsub>
 8006d3c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006d40:	ebab 0b03 	sub.w	fp, fp, r3
 8006d44:	f1bb 0f19 	cmp.w	fp, #25
 8006d48:	dc18      	bgt.n	8006d7c <__ieee754_rem_pio2f+0x1c0>
 8006d4a:	4647      	mov	r7, r8
 8006d4c:	6020      	str	r0, [r4, #0]
 8006d4e:	f8d4 8000 	ldr.w	r8, [r4]
 8006d52:	4638      	mov	r0, r7
 8006d54:	4641      	mov	r1, r8
 8006d56:	f7f9 fbc1 	bl	80004dc <__aeabi_fsub>
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	f7f9 fbbe 	bl	80004dc <__aeabi_fsub>
 8006d60:	f1ba 0f00 	cmp.w	sl, #0
 8006d64:	6060      	str	r0, [r4, #4]
 8006d66:	f6bf af56 	bge.w	8006c16 <__ieee754_rem_pio2f+0x5a>
 8006d6a:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 8006d6e:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8006d72:	f8c4 8000 	str.w	r8, [r4]
 8006d76:	6060      	str	r0, [r4, #4]
 8006d78:	426d      	negs	r5, r5
 8006d7a:	e74c      	b.n	8006c16 <__ieee754_rem_pio2f+0x5a>
 8006d7c:	493f      	ldr	r1, [pc, #252]	@ (8006e7c <__ieee754_rem_pio2f+0x2c0>)
 8006d7e:	4648      	mov	r0, r9
 8006d80:	f7f9 fcb6 	bl	80006f0 <__aeabi_fmul>
 8006d84:	4606      	mov	r6, r0
 8006d86:	4601      	mov	r1, r0
 8006d88:	4640      	mov	r0, r8
 8006d8a:	f7f9 fba7 	bl	80004dc <__aeabi_fsub>
 8006d8e:	4601      	mov	r1, r0
 8006d90:	4607      	mov	r7, r0
 8006d92:	4640      	mov	r0, r8
 8006d94:	f7f9 fba2 	bl	80004dc <__aeabi_fsub>
 8006d98:	4631      	mov	r1, r6
 8006d9a:	f7f9 fb9f 	bl	80004dc <__aeabi_fsub>
 8006d9e:	4606      	mov	r6, r0
 8006da0:	4937      	ldr	r1, [pc, #220]	@ (8006e80 <__ieee754_rem_pio2f+0x2c4>)
 8006da2:	4648      	mov	r0, r9
 8006da4:	f7f9 fca4 	bl	80006f0 <__aeabi_fmul>
 8006da8:	4631      	mov	r1, r6
 8006daa:	f7f9 fb97 	bl	80004dc <__aeabi_fsub>
 8006dae:	4606      	mov	r6, r0
 8006db0:	e793      	b.n	8006cda <__ieee754_rem_pio2f+0x11e>
 8006db2:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8006db6:	d305      	bcc.n	8006dc4 <__ieee754_rem_pio2f+0x208>
 8006db8:	4601      	mov	r1, r0
 8006dba:	f7f9 fb8f 	bl	80004dc <__aeabi_fsub>
 8006dbe:	6060      	str	r0, [r4, #4]
 8006dc0:	6020      	str	r0, [r4, #0]
 8006dc2:	e708      	b.n	8006bd6 <__ieee754_rem_pio2f+0x1a>
 8006dc4:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8006dc8:	3e86      	subs	r6, #134	@ 0x86
 8006dca:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 8006dce:	4640      	mov	r0, r8
 8006dd0:	f7f9 fe54 	bl	8000a7c <__aeabi_f2iz>
 8006dd4:	f7f9 fc38 	bl	8000648 <__aeabi_i2f>
 8006dd8:	4601      	mov	r1, r0
 8006dda:	9003      	str	r0, [sp, #12]
 8006ddc:	4640      	mov	r0, r8
 8006dde:	f7f9 fb7d 	bl	80004dc <__aeabi_fsub>
 8006de2:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8006de6:	f7f9 fc83 	bl	80006f0 <__aeabi_fmul>
 8006dea:	4607      	mov	r7, r0
 8006dec:	f7f9 fe46 	bl	8000a7c <__aeabi_f2iz>
 8006df0:	f7f9 fc2a 	bl	8000648 <__aeabi_i2f>
 8006df4:	4601      	mov	r1, r0
 8006df6:	9004      	str	r0, [sp, #16]
 8006df8:	4605      	mov	r5, r0
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	f7f9 fb6e 	bl	80004dc <__aeabi_fsub>
 8006e00:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8006e04:	f7f9 fc74 	bl	80006f0 <__aeabi_fmul>
 8006e08:	2100      	movs	r1, #0
 8006e0a:	9005      	str	r0, [sp, #20]
 8006e0c:	f7f9 fe04 	bl	8000a18 <__aeabi_fcmpeq>
 8006e10:	b1f0      	cbz	r0, 8006e50 <__ieee754_rem_pio2f+0x294>
 8006e12:	2100      	movs	r1, #0
 8006e14:	4628      	mov	r0, r5
 8006e16:	f7f9 fdff 	bl	8000a18 <__aeabi_fcmpeq>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	bf14      	ite	ne
 8006e1e:	2301      	movne	r3, #1
 8006e20:	2302      	moveq	r3, #2
 8006e22:	4a18      	ldr	r2, [pc, #96]	@ (8006e84 <__ieee754_rem_pio2f+0x2c8>)
 8006e24:	4621      	mov	r1, r4
 8006e26:	9201      	str	r2, [sp, #4]
 8006e28:	2202      	movs	r2, #2
 8006e2a:	a803      	add	r0, sp, #12
 8006e2c:	9200      	str	r2, [sp, #0]
 8006e2e:	4632      	mov	r2, r6
 8006e30:	f000 f82e 	bl	8006e90 <__kernel_rem_pio2f>
 8006e34:	f1ba 0f00 	cmp.w	sl, #0
 8006e38:	4605      	mov	r5, r0
 8006e3a:	f6bf aeec 	bge.w	8006c16 <__ieee754_rem_pio2f+0x5a>
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	6863      	ldr	r3, [r4, #4]
 8006e48:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006e4c:	6063      	str	r3, [r4, #4]
 8006e4e:	e793      	b.n	8006d78 <__ieee754_rem_pio2f+0x1bc>
 8006e50:	2303      	movs	r3, #3
 8006e52:	e7e6      	b.n	8006e22 <__ieee754_rem_pio2f+0x266>
 8006e54:	3f490fd8 	.word	0x3f490fd8
 8006e58:	4016cbe3 	.word	0x4016cbe3
 8006e5c:	3fc90f80 	.word	0x3fc90f80
 8006e60:	3fc90fd0 	.word	0x3fc90fd0
 8006e64:	37354443 	.word	0x37354443
 8006e68:	37354400 	.word	0x37354400
 8006e6c:	2e85a308 	.word	0x2e85a308
 8006e70:	43490f80 	.word	0x43490f80
 8006e74:	3f22f984 	.word	0x3f22f984
 8006e78:	080084b0 	.word	0x080084b0
 8006e7c:	2e85a300 	.word	0x2e85a300
 8006e80:	248d3132 	.word	0x248d3132
 8006e84:	08008530 	.word	0x08008530

08006e88 <fabsf>:
 8006e88:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006e8c:	4770      	bx	lr
	...

08006e90 <__kernel_rem_pio2f>:
 8006e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e94:	b0db      	sub	sp, #364	@ 0x16c
 8006e96:	9202      	str	r2, [sp, #8]
 8006e98:	9304      	str	r3, [sp, #16]
 8006e9a:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8006e9c:	4bac      	ldr	r3, [pc, #688]	@ (8007150 <__kernel_rem_pio2f+0x2c0>)
 8006e9e:	9005      	str	r0, [sp, #20]
 8006ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea4:	9100      	str	r1, [sp, #0]
 8006ea6:	9301      	str	r3, [sp, #4]
 8006ea8:	9b04      	ldr	r3, [sp, #16]
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	9303      	str	r3, [sp, #12]
 8006eae:	9b02      	ldr	r3, [sp, #8]
 8006eb0:	1d1a      	adds	r2, r3, #4
 8006eb2:	f2c0 8099 	blt.w	8006fe8 <__kernel_rem_pio2f+0x158>
 8006eb6:	1edc      	subs	r4, r3, #3
 8006eb8:	bf48      	it	mi
 8006eba:	1d1c      	addmi	r4, r3, #4
 8006ebc:	10e4      	asrs	r4, r4, #3
 8006ebe:	2500      	movs	r5, #0
 8006ec0:	f04f 0b00 	mov.w	fp, #0
 8006ec4:	1c67      	adds	r7, r4, #1
 8006ec6:	00fb      	lsls	r3, r7, #3
 8006ec8:	9306      	str	r3, [sp, #24]
 8006eca:	9b02      	ldr	r3, [sp, #8]
 8006ecc:	9a03      	ldr	r2, [sp, #12]
 8006ece:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8006ed2:	9b01      	ldr	r3, [sp, #4]
 8006ed4:	eba4 0802 	sub.w	r8, r4, r2
 8006ed8:	eb03 0902 	add.w	r9, r3, r2
 8006edc:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8006ede:	ae1e      	add	r6, sp, #120	@ 0x78
 8006ee0:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8006ee4:	454d      	cmp	r5, r9
 8006ee6:	f340 8081 	ble.w	8006fec <__kernel_rem_pio2f+0x15c>
 8006eea:	9a04      	ldr	r2, [sp, #16]
 8006eec:	ab1e      	add	r3, sp, #120	@ 0x78
 8006eee:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8006ef2:	f04f 0900 	mov.w	r9, #0
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8006efc:	9a01      	ldr	r2, [sp, #4]
 8006efe:	4591      	cmp	r9, r2
 8006f00:	f340 809a 	ble.w	8007038 <__kernel_rem_pio2f+0x1a8>
 8006f04:	4613      	mov	r3, r2
 8006f06:	aa0a      	add	r2, sp, #40	@ 0x28
 8006f08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006f0c:	9308      	str	r3, [sp, #32]
 8006f0e:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8006f10:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006f14:	9c01      	ldr	r4, [sp, #4]
 8006f16:	9307      	str	r3, [sp, #28]
 8006f18:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8006f1c:	4646      	mov	r6, r8
 8006f1e:	4625      	mov	r5, r4
 8006f20:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8006f24:	ab5a      	add	r3, sp, #360	@ 0x168
 8006f26:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006f2a:	f853 bc50 	ldr.w	fp, [r3, #-80]
 8006f2e:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8006f32:	2d00      	cmp	r5, #0
 8006f34:	f300 8085 	bgt.w	8007042 <__kernel_rem_pio2f+0x1b2>
 8006f38:	4639      	mov	r1, r7
 8006f3a:	4658      	mov	r0, fp
 8006f3c:	f000 fa46 	bl	80073cc <scalbnf>
 8006f40:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8006f44:	4605      	mov	r5, r0
 8006f46:	f7f9 fbd3 	bl	80006f0 <__aeabi_fmul>
 8006f4a:	f000 fa8b 	bl	8007464 <floorf>
 8006f4e:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8006f52:	f7f9 fbcd 	bl	80006f0 <__aeabi_fmul>
 8006f56:	4601      	mov	r1, r0
 8006f58:	4628      	mov	r0, r5
 8006f5a:	f7f9 fabf 	bl	80004dc <__aeabi_fsub>
 8006f5e:	4605      	mov	r5, r0
 8006f60:	f7f9 fd8c 	bl	8000a7c <__aeabi_f2iz>
 8006f64:	4606      	mov	r6, r0
 8006f66:	f7f9 fb6f 	bl	8000648 <__aeabi_i2f>
 8006f6a:	4601      	mov	r1, r0
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f7f9 fab5 	bl	80004dc <__aeabi_fsub>
 8006f72:	2f00      	cmp	r7, #0
 8006f74:	4681      	mov	r9, r0
 8006f76:	f340 8081 	ble.w	800707c <__kernel_rem_pio2f+0x1ec>
 8006f7a:	1e62      	subs	r2, r4, #1
 8006f7c:	ab0a      	add	r3, sp, #40	@ 0x28
 8006f7e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8006f82:	f1c7 0108 	rsb	r1, r7, #8
 8006f86:	fa45 f301 	asr.w	r3, r5, r1
 8006f8a:	441e      	add	r6, r3
 8006f8c:	408b      	lsls	r3, r1
 8006f8e:	1aed      	subs	r5, r5, r3
 8006f90:	ab0a      	add	r3, sp, #40	@ 0x28
 8006f92:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006f96:	f1c7 0307 	rsb	r3, r7, #7
 8006f9a:	411d      	asrs	r5, r3
 8006f9c:	2d00      	cmp	r5, #0
 8006f9e:	dd7a      	ble.n	8007096 <__kernel_rem_pio2f+0x206>
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	4692      	mov	sl, r2
 8006fa4:	3601      	adds	r6, #1
 8006fa6:	4294      	cmp	r4, r2
 8006fa8:	f300 80aa 	bgt.w	8007100 <__kernel_rem_pio2f+0x270>
 8006fac:	2f00      	cmp	r7, #0
 8006fae:	dd05      	ble.n	8006fbc <__kernel_rem_pio2f+0x12c>
 8006fb0:	2f01      	cmp	r7, #1
 8006fb2:	f000 80b6 	beq.w	8007122 <__kernel_rem_pio2f+0x292>
 8006fb6:	2f02      	cmp	r7, #2
 8006fb8:	f000 80bd 	beq.w	8007136 <__kernel_rem_pio2f+0x2a6>
 8006fbc:	2d02      	cmp	r5, #2
 8006fbe:	d16a      	bne.n	8007096 <__kernel_rem_pio2f+0x206>
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006fc6:	f7f9 fa89 	bl	80004dc <__aeabi_fsub>
 8006fca:	4681      	mov	r9, r0
 8006fcc:	f1ba 0f00 	cmp.w	sl, #0
 8006fd0:	d061      	beq.n	8007096 <__kernel_rem_pio2f+0x206>
 8006fd2:	4639      	mov	r1, r7
 8006fd4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006fd8:	f000 f9f8 	bl	80073cc <scalbnf>
 8006fdc:	4601      	mov	r1, r0
 8006fde:	4648      	mov	r0, r9
 8006fe0:	f7f9 fa7c 	bl	80004dc <__aeabi_fsub>
 8006fe4:	4681      	mov	r9, r0
 8006fe6:	e056      	b.n	8007096 <__kernel_rem_pio2f+0x206>
 8006fe8:	2400      	movs	r4, #0
 8006fea:	e768      	b.n	8006ebe <__kernel_rem_pio2f+0x2e>
 8006fec:	eb18 0f05 	cmn.w	r8, r5
 8006ff0:	d407      	bmi.n	8007002 <__kernel_rem_pio2f+0x172>
 8006ff2:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8006ff6:	f7f9 fb27 	bl	8000648 <__aeabi_i2f>
 8006ffa:	f846 0b04 	str.w	r0, [r6], #4
 8006ffe:	3501      	adds	r5, #1
 8007000:	e770      	b.n	8006ee4 <__kernel_rem_pio2f+0x54>
 8007002:	4658      	mov	r0, fp
 8007004:	e7f9      	b.n	8006ffa <__kernel_rem_pio2f+0x16a>
 8007006:	9307      	str	r3, [sp, #28]
 8007008:	9b05      	ldr	r3, [sp, #20]
 800700a:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800700e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007012:	f7f9 fb6d 	bl	80006f0 <__aeabi_fmul>
 8007016:	4601      	mov	r1, r0
 8007018:	4630      	mov	r0, r6
 800701a:	f7f9 fa61 	bl	80004e0 <__addsf3>
 800701e:	4606      	mov	r6, r0
 8007020:	9b07      	ldr	r3, [sp, #28]
 8007022:	f108 0801 	add.w	r8, r8, #1
 8007026:	9a03      	ldr	r2, [sp, #12]
 8007028:	4590      	cmp	r8, r2
 800702a:	ddec      	ble.n	8007006 <__kernel_rem_pio2f+0x176>
 800702c:	f84a 6b04 	str.w	r6, [sl], #4
 8007030:	f109 0901 	add.w	r9, r9, #1
 8007034:	3504      	adds	r5, #4
 8007036:	e761      	b.n	8006efc <__kernel_rem_pio2f+0x6c>
 8007038:	46ab      	mov	fp, r5
 800703a:	461e      	mov	r6, r3
 800703c:	f04f 0800 	mov.w	r8, #0
 8007040:	e7f1      	b.n	8007026 <__kernel_rem_pio2f+0x196>
 8007042:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8007046:	4658      	mov	r0, fp
 8007048:	f7f9 fb52 	bl	80006f0 <__aeabi_fmul>
 800704c:	f7f9 fd16 	bl	8000a7c <__aeabi_f2iz>
 8007050:	f7f9 fafa 	bl	8000648 <__aeabi_i2f>
 8007054:	4649      	mov	r1, r9
 8007056:	9009      	str	r0, [sp, #36]	@ 0x24
 8007058:	f7f9 fb4a 	bl	80006f0 <__aeabi_fmul>
 800705c:	4601      	mov	r1, r0
 800705e:	4658      	mov	r0, fp
 8007060:	f7f9 fa3c 	bl	80004dc <__aeabi_fsub>
 8007064:	f7f9 fd0a 	bl	8000a7c <__aeabi_f2iz>
 8007068:	3d01      	subs	r5, #1
 800706a:	f846 0b04 	str.w	r0, [r6], #4
 800706e:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8007072:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007074:	f7f9 fa34 	bl	80004e0 <__addsf3>
 8007078:	4683      	mov	fp, r0
 800707a:	e75a      	b.n	8006f32 <__kernel_rem_pio2f+0xa2>
 800707c:	d105      	bne.n	800708a <__kernel_rem_pio2f+0x1fa>
 800707e:	1e63      	subs	r3, r4, #1
 8007080:	aa0a      	add	r2, sp, #40	@ 0x28
 8007082:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8007086:	11ed      	asrs	r5, r5, #7
 8007088:	e788      	b.n	8006f9c <__kernel_rem_pio2f+0x10c>
 800708a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800708e:	f7f9 fce1 	bl	8000a54 <__aeabi_fcmpge>
 8007092:	4605      	mov	r5, r0
 8007094:	bb90      	cbnz	r0, 80070fc <__kernel_rem_pio2f+0x26c>
 8007096:	2100      	movs	r1, #0
 8007098:	4648      	mov	r0, r9
 800709a:	f7f9 fcbd 	bl	8000a18 <__aeabi_fcmpeq>
 800709e:	2800      	cmp	r0, #0
 80070a0:	f000 8090 	beq.w	80071c4 <__kernel_rem_pio2f+0x334>
 80070a4:	2200      	movs	r2, #0
 80070a6:	1e63      	subs	r3, r4, #1
 80070a8:	9901      	ldr	r1, [sp, #4]
 80070aa:	428b      	cmp	r3, r1
 80070ac:	da4a      	bge.n	8007144 <__kernel_rem_pio2f+0x2b4>
 80070ae:	2a00      	cmp	r2, #0
 80070b0:	d076      	beq.n	80071a0 <__kernel_rem_pio2f+0x310>
 80070b2:	3c01      	subs	r4, #1
 80070b4:	ab0a      	add	r3, sp, #40	@ 0x28
 80070b6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80070ba:	3f08      	subs	r7, #8
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d0f8      	beq.n	80070b2 <__kernel_rem_pio2f+0x222>
 80070c0:	4639      	mov	r1, r7
 80070c2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80070c6:	f000 f981 	bl	80073cc <scalbnf>
 80070ca:	46a2      	mov	sl, r4
 80070cc:	4607      	mov	r7, r0
 80070ce:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 80070d2:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 80070d6:	f1ba 0f00 	cmp.w	sl, #0
 80070da:	f280 80a1 	bge.w	8007220 <__kernel_rem_pio2f+0x390>
 80070de:	4627      	mov	r7, r4
 80070e0:	2200      	movs	r2, #0
 80070e2:	2f00      	cmp	r7, #0
 80070e4:	f2c0 80cb 	blt.w	800727e <__kernel_rem_pio2f+0x3ee>
 80070e8:	a946      	add	r1, sp, #280	@ 0x118
 80070ea:	4690      	mov	r8, r2
 80070ec:	f04f 0a00 	mov.w	sl, #0
 80070f0:	4b18      	ldr	r3, [pc, #96]	@ (8007154 <__kernel_rem_pio2f+0x2c4>)
 80070f2:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 80070f6:	eba4 0907 	sub.w	r9, r4, r7
 80070fa:	e0b4      	b.n	8007266 <__kernel_rem_pio2f+0x3d6>
 80070fc:	2502      	movs	r5, #2
 80070fe:	e74f      	b.n	8006fa0 <__kernel_rem_pio2f+0x110>
 8007100:	f858 3b04 	ldr.w	r3, [r8], #4
 8007104:	f1ba 0f00 	cmp.w	sl, #0
 8007108:	d108      	bne.n	800711c <__kernel_rem_pio2f+0x28c>
 800710a:	b123      	cbz	r3, 8007116 <__kernel_rem_pio2f+0x286>
 800710c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8007110:	f848 3c04 	str.w	r3, [r8, #-4]
 8007114:	2301      	movs	r3, #1
 8007116:	469a      	mov	sl, r3
 8007118:	3201      	adds	r2, #1
 800711a:	e744      	b.n	8006fa6 <__kernel_rem_pio2f+0x116>
 800711c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8007120:	e7f6      	b.n	8007110 <__kernel_rem_pio2f+0x280>
 8007122:	1e62      	subs	r2, r4, #1
 8007124:	ab0a      	add	r3, sp, #40	@ 0x28
 8007126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800712e:	a90a      	add	r1, sp, #40	@ 0x28
 8007130:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007134:	e742      	b.n	8006fbc <__kernel_rem_pio2f+0x12c>
 8007136:	1e62      	subs	r2, r4, #1
 8007138:	ab0a      	add	r3, sp, #40	@ 0x28
 800713a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007142:	e7f4      	b.n	800712e <__kernel_rem_pio2f+0x29e>
 8007144:	a90a      	add	r1, sp, #40	@ 0x28
 8007146:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800714a:	3b01      	subs	r3, #1
 800714c:	430a      	orrs	r2, r1
 800714e:	e7ab      	b.n	80070a8 <__kernel_rem_pio2f+0x218>
 8007150:	08008874 	.word	0x08008874
 8007154:	08008848 	.word	0x08008848
 8007158:	3301      	adds	r3, #1
 800715a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800715e:	2900      	cmp	r1, #0
 8007160:	d0fa      	beq.n	8007158 <__kernel_rem_pio2f+0x2c8>
 8007162:	9a04      	ldr	r2, [sp, #16]
 8007164:	a91e      	add	r1, sp, #120	@ 0x78
 8007166:	18a2      	adds	r2, r4, r2
 8007168:	1c66      	adds	r6, r4, #1
 800716a:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800716e:	441c      	add	r4, r3
 8007170:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 8007174:	42b4      	cmp	r4, r6
 8007176:	f6ff aecf 	blt.w	8006f18 <__kernel_rem_pio2f+0x88>
 800717a:	9b07      	ldr	r3, [sp, #28]
 800717c:	46ab      	mov	fp, r5
 800717e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007182:	f7f9 fa61 	bl	8000648 <__aeabi_i2f>
 8007186:	f04f 0a00 	mov.w	sl, #0
 800718a:	f04f 0800 	mov.w	r8, #0
 800718e:	6028      	str	r0, [r5, #0]
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	459a      	cmp	sl, r3
 8007194:	dd07      	ble.n	80071a6 <__kernel_rem_pio2f+0x316>
 8007196:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800719a:	3504      	adds	r5, #4
 800719c:	3601      	adds	r6, #1
 800719e:	e7e9      	b.n	8007174 <__kernel_rem_pio2f+0x2e4>
 80071a0:	2301      	movs	r3, #1
 80071a2:	9a08      	ldr	r2, [sp, #32]
 80071a4:	e7d9      	b.n	800715a <__kernel_rem_pio2f+0x2ca>
 80071a6:	9b05      	ldr	r3, [sp, #20]
 80071a8:	f85b 0904 	ldr.w	r0, [fp], #-4
 80071ac:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 80071b0:	f7f9 fa9e 	bl	80006f0 <__aeabi_fmul>
 80071b4:	4601      	mov	r1, r0
 80071b6:	4640      	mov	r0, r8
 80071b8:	f7f9 f992 	bl	80004e0 <__addsf3>
 80071bc:	f10a 0a01 	add.w	sl, sl, #1
 80071c0:	4680      	mov	r8, r0
 80071c2:	e7e5      	b.n	8007190 <__kernel_rem_pio2f+0x300>
 80071c4:	9b06      	ldr	r3, [sp, #24]
 80071c6:	9a02      	ldr	r2, [sp, #8]
 80071c8:	4648      	mov	r0, r9
 80071ca:	1a99      	subs	r1, r3, r2
 80071cc:	f000 f8fe 	bl	80073cc <scalbnf>
 80071d0:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80071d4:	4680      	mov	r8, r0
 80071d6:	f7f9 fc3d 	bl	8000a54 <__aeabi_fcmpge>
 80071da:	b1f8      	cbz	r0, 800721c <__kernel_rem_pio2f+0x38c>
 80071dc:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 80071e0:	4640      	mov	r0, r8
 80071e2:	f7f9 fa85 	bl	80006f0 <__aeabi_fmul>
 80071e6:	f7f9 fc49 	bl	8000a7c <__aeabi_f2iz>
 80071ea:	f7f9 fa2d 	bl	8000648 <__aeabi_i2f>
 80071ee:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80071f2:	4681      	mov	r9, r0
 80071f4:	f7f9 fa7c 	bl	80006f0 <__aeabi_fmul>
 80071f8:	4601      	mov	r1, r0
 80071fa:	4640      	mov	r0, r8
 80071fc:	f7f9 f96e 	bl	80004dc <__aeabi_fsub>
 8007200:	f7f9 fc3c 	bl	8000a7c <__aeabi_f2iz>
 8007204:	ab0a      	add	r3, sp, #40	@ 0x28
 8007206:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800720a:	4648      	mov	r0, r9
 800720c:	3401      	adds	r4, #1
 800720e:	3708      	adds	r7, #8
 8007210:	f7f9 fc34 	bl	8000a7c <__aeabi_f2iz>
 8007214:	ab0a      	add	r3, sp, #40	@ 0x28
 8007216:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800721a:	e751      	b.n	80070c0 <__kernel_rem_pio2f+0x230>
 800721c:	4640      	mov	r0, r8
 800721e:	e7f7      	b.n	8007210 <__kernel_rem_pio2f+0x380>
 8007220:	ab0a      	add	r3, sp, #40	@ 0x28
 8007222:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007226:	f7f9 fa0f 	bl	8000648 <__aeabi_i2f>
 800722a:	4639      	mov	r1, r7
 800722c:	f7f9 fa60 	bl	80006f0 <__aeabi_fmul>
 8007230:	4649      	mov	r1, r9
 8007232:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 8007236:	4638      	mov	r0, r7
 8007238:	f7f9 fa5a 	bl	80006f0 <__aeabi_fmul>
 800723c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007240:	4607      	mov	r7, r0
 8007242:	e748      	b.n	80070d6 <__kernel_rem_pio2f+0x246>
 8007244:	f853 0b04 	ldr.w	r0, [r3], #4
 8007248:	f85b 1b04 	ldr.w	r1, [fp], #4
 800724c:	9203      	str	r2, [sp, #12]
 800724e:	9302      	str	r3, [sp, #8]
 8007250:	f7f9 fa4e 	bl	80006f0 <__aeabi_fmul>
 8007254:	4601      	mov	r1, r0
 8007256:	4640      	mov	r0, r8
 8007258:	f7f9 f942 	bl	80004e0 <__addsf3>
 800725c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007260:	4680      	mov	r8, r0
 8007262:	f10a 0a01 	add.w	sl, sl, #1
 8007266:	9901      	ldr	r1, [sp, #4]
 8007268:	458a      	cmp	sl, r1
 800726a:	dc01      	bgt.n	8007270 <__kernel_rem_pio2f+0x3e0>
 800726c:	45ca      	cmp	sl, r9
 800726e:	dde9      	ble.n	8007244 <__kernel_rem_pio2f+0x3b4>
 8007270:	ab5a      	add	r3, sp, #360	@ 0x168
 8007272:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8007276:	f849 8ca0 	str.w	r8, [r9, #-160]
 800727a:	3f01      	subs	r7, #1
 800727c:	e731      	b.n	80070e2 <__kernel_rem_pio2f+0x252>
 800727e:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8007280:	2b02      	cmp	r3, #2
 8007282:	dc07      	bgt.n	8007294 <__kernel_rem_pio2f+0x404>
 8007284:	2b00      	cmp	r3, #0
 8007286:	dc4e      	bgt.n	8007326 <__kernel_rem_pio2f+0x496>
 8007288:	d02e      	beq.n	80072e8 <__kernel_rem_pio2f+0x458>
 800728a:	f006 0007 	and.w	r0, r6, #7
 800728e:	b05b      	add	sp, #364	@ 0x16c
 8007290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007294:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8007296:	2b03      	cmp	r3, #3
 8007298:	d1f7      	bne.n	800728a <__kernel_rem_pio2f+0x3fa>
 800729a:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800729e:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 80072a2:	46b8      	mov	r8, r7
 80072a4:	46a2      	mov	sl, r4
 80072a6:	f1ba 0f00 	cmp.w	sl, #0
 80072aa:	dc49      	bgt.n	8007340 <__kernel_rem_pio2f+0x4b0>
 80072ac:	46a1      	mov	r9, r4
 80072ae:	f1b9 0f01 	cmp.w	r9, #1
 80072b2:	dc60      	bgt.n	8007376 <__kernel_rem_pio2f+0x4e6>
 80072b4:	2000      	movs	r0, #0
 80072b6:	2c01      	cmp	r4, #1
 80072b8:	dc76      	bgt.n	80073a8 <__kernel_rem_pio2f+0x518>
 80072ba:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 80072bc:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80072be:	2d00      	cmp	r5, #0
 80072c0:	d178      	bne.n	80073b4 <__kernel_rem_pio2f+0x524>
 80072c2:	9900      	ldr	r1, [sp, #0]
 80072c4:	600a      	str	r2, [r1, #0]
 80072c6:	460a      	mov	r2, r1
 80072c8:	604b      	str	r3, [r1, #4]
 80072ca:	6090      	str	r0, [r2, #8]
 80072cc:	e7dd      	b.n	800728a <__kernel_rem_pio2f+0x3fa>
 80072ce:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80072d2:	f7f9 f905 	bl	80004e0 <__addsf3>
 80072d6:	3c01      	subs	r4, #1
 80072d8:	2c00      	cmp	r4, #0
 80072da:	daf8      	bge.n	80072ce <__kernel_rem_pio2f+0x43e>
 80072dc:	b10d      	cbz	r5, 80072e2 <__kernel_rem_pio2f+0x452>
 80072de:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80072e2:	9b00      	ldr	r3, [sp, #0]
 80072e4:	6018      	str	r0, [r3, #0]
 80072e6:	e7d0      	b.n	800728a <__kernel_rem_pio2f+0x3fa>
 80072e8:	2000      	movs	r0, #0
 80072ea:	af32      	add	r7, sp, #200	@ 0xc8
 80072ec:	e7f4      	b.n	80072d8 <__kernel_rem_pio2f+0x448>
 80072ee:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 80072f2:	f7f9 f8f5 	bl	80004e0 <__addsf3>
 80072f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80072fa:	f1b8 0f00 	cmp.w	r8, #0
 80072fe:	daf6      	bge.n	80072ee <__kernel_rem_pio2f+0x45e>
 8007300:	b1ad      	cbz	r5, 800732e <__kernel_rem_pio2f+0x49e>
 8007302:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8007306:	9a00      	ldr	r2, [sp, #0]
 8007308:	4601      	mov	r1, r0
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800730e:	f7f9 f8e5 	bl	80004dc <__aeabi_fsub>
 8007312:	f04f 0801 	mov.w	r8, #1
 8007316:	4544      	cmp	r4, r8
 8007318:	da0b      	bge.n	8007332 <__kernel_rem_pio2f+0x4a2>
 800731a:	b10d      	cbz	r5, 8007320 <__kernel_rem_pio2f+0x490>
 800731c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8007320:	9b00      	ldr	r3, [sp, #0]
 8007322:	6058      	str	r0, [r3, #4]
 8007324:	e7b1      	b.n	800728a <__kernel_rem_pio2f+0x3fa>
 8007326:	46a0      	mov	r8, r4
 8007328:	2000      	movs	r0, #0
 800732a:	af32      	add	r7, sp, #200	@ 0xc8
 800732c:	e7e5      	b.n	80072fa <__kernel_rem_pio2f+0x46a>
 800732e:	4603      	mov	r3, r0
 8007330:	e7e9      	b.n	8007306 <__kernel_rem_pio2f+0x476>
 8007332:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8007336:	f7f9 f8d3 	bl	80004e0 <__addsf3>
 800733a:	f108 0801 	add.w	r8, r8, #1
 800733e:	e7ea      	b.n	8007316 <__kernel_rem_pio2f+0x486>
 8007340:	f8d8 3000 	ldr.w	r3, [r8]
 8007344:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8007348:	4619      	mov	r1, r3
 800734a:	4610      	mov	r0, r2
 800734c:	9302      	str	r3, [sp, #8]
 800734e:	9201      	str	r2, [sp, #4]
 8007350:	f7f9 f8c6 	bl	80004e0 <__addsf3>
 8007354:	9a01      	ldr	r2, [sp, #4]
 8007356:	4601      	mov	r1, r0
 8007358:	4681      	mov	r9, r0
 800735a:	4610      	mov	r0, r2
 800735c:	f7f9 f8be 	bl	80004dc <__aeabi_fsub>
 8007360:	9b02      	ldr	r3, [sp, #8]
 8007362:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007366:	4619      	mov	r1, r3
 8007368:	f7f9 f8ba 	bl	80004e0 <__addsf3>
 800736c:	f848 0904 	str.w	r0, [r8], #-4
 8007370:	f8c8 9000 	str.w	r9, [r8]
 8007374:	e797      	b.n	80072a6 <__kernel_rem_pio2f+0x416>
 8007376:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800737a:	f8d7 a000 	ldr.w	sl, [r7]
 800737e:	4618      	mov	r0, r3
 8007380:	4651      	mov	r1, sl
 8007382:	9301      	str	r3, [sp, #4]
 8007384:	f7f9 f8ac 	bl	80004e0 <__addsf3>
 8007388:	9b01      	ldr	r3, [sp, #4]
 800738a:	4601      	mov	r1, r0
 800738c:	4680      	mov	r8, r0
 800738e:	4618      	mov	r0, r3
 8007390:	f7f9 f8a4 	bl	80004dc <__aeabi_fsub>
 8007394:	4651      	mov	r1, sl
 8007396:	f7f9 f8a3 	bl	80004e0 <__addsf3>
 800739a:	f847 0904 	str.w	r0, [r7], #-4
 800739e:	f109 39ff 	add.w	r9, r9, #4294967295
 80073a2:	f8c7 8000 	str.w	r8, [r7]
 80073a6:	e782      	b.n	80072ae <__kernel_rem_pio2f+0x41e>
 80073a8:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 80073ac:	f7f9 f898 	bl	80004e0 <__addsf3>
 80073b0:	3c01      	subs	r4, #1
 80073b2:	e780      	b.n	80072b6 <__kernel_rem_pio2f+0x426>
 80073b4:	9900      	ldr	r1, [sp, #0]
 80073b6:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 80073ba:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80073be:	600a      	str	r2, [r1, #0]
 80073c0:	604b      	str	r3, [r1, #4]
 80073c2:	460a      	mov	r2, r1
 80073c4:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80073c8:	e77f      	b.n	80072ca <__kernel_rem_pio2f+0x43a>
 80073ca:	bf00      	nop

080073cc <scalbnf>:
 80073cc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4603      	mov	r3, r0
 80073d4:	460d      	mov	r5, r1
 80073d6:	4604      	mov	r4, r0
 80073d8:	d02e      	beq.n	8007438 <scalbnf+0x6c>
 80073da:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80073de:	d304      	bcc.n	80073ea <scalbnf+0x1e>
 80073e0:	4601      	mov	r1, r0
 80073e2:	f7f9 f87d 	bl	80004e0 <__addsf3>
 80073e6:	4603      	mov	r3, r0
 80073e8:	e026      	b.n	8007438 <scalbnf+0x6c>
 80073ea:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 80073ee:	d118      	bne.n	8007422 <scalbnf+0x56>
 80073f0:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 80073f4:	f7f9 f97c 	bl	80006f0 <__aeabi_fmul>
 80073f8:	4a17      	ldr	r2, [pc, #92]	@ (8007458 <scalbnf+0x8c>)
 80073fa:	4603      	mov	r3, r0
 80073fc:	4295      	cmp	r5, r2
 80073fe:	db0c      	blt.n	800741a <scalbnf+0x4e>
 8007400:	4604      	mov	r4, r0
 8007402:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8007406:	3a19      	subs	r2, #25
 8007408:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800740c:	428d      	cmp	r5, r1
 800740e:	dd0a      	ble.n	8007426 <scalbnf+0x5a>
 8007410:	4912      	ldr	r1, [pc, #72]	@ (800745c <scalbnf+0x90>)
 8007412:	4618      	mov	r0, r3
 8007414:	f361 001e 	bfi	r0, r1, #0, #31
 8007418:	e000      	b.n	800741c <scalbnf+0x50>
 800741a:	4911      	ldr	r1, [pc, #68]	@ (8007460 <scalbnf+0x94>)
 800741c:	f7f9 f968 	bl	80006f0 <__aeabi_fmul>
 8007420:	e7e1      	b.n	80073e6 <scalbnf+0x1a>
 8007422:	0dd2      	lsrs	r2, r2, #23
 8007424:	e7f0      	b.n	8007408 <scalbnf+0x3c>
 8007426:	1951      	adds	r1, r2, r5
 8007428:	29fe      	cmp	r1, #254	@ 0xfe
 800742a:	dcf1      	bgt.n	8007410 <scalbnf+0x44>
 800742c:	2900      	cmp	r1, #0
 800742e:	dd05      	ble.n	800743c <scalbnf+0x70>
 8007430:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8007434:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8007438:	4618      	mov	r0, r3
 800743a:	bd38      	pop	{r3, r4, r5, pc}
 800743c:	f111 0f16 	cmn.w	r1, #22
 8007440:	da01      	bge.n	8007446 <scalbnf+0x7a>
 8007442:	4907      	ldr	r1, [pc, #28]	@ (8007460 <scalbnf+0x94>)
 8007444:	e7e5      	b.n	8007412 <scalbnf+0x46>
 8007446:	f101 0019 	add.w	r0, r1, #25
 800744a:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800744e:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8007452:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8007456:	e7e1      	b.n	800741c <scalbnf+0x50>
 8007458:	ffff3cb0 	.word	0xffff3cb0
 800745c:	7149f2ca 	.word	0x7149f2ca
 8007460:	0da24260 	.word	0x0da24260

08007464 <floorf>:
 8007464:	b570      	push	{r4, r5, r6, lr}
 8007466:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800746a:	3d7f      	subs	r5, #127	@ 0x7f
 800746c:	2d16      	cmp	r5, #22
 800746e:	4601      	mov	r1, r0
 8007470:	4604      	mov	r4, r0
 8007472:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8007476:	dc26      	bgt.n	80074c6 <floorf+0x62>
 8007478:	2d00      	cmp	r5, #0
 800747a:	da0f      	bge.n	800749c <floorf+0x38>
 800747c:	4917      	ldr	r1, [pc, #92]	@ (80074dc <floorf+0x78>)
 800747e:	f7f9 f82f 	bl	80004e0 <__addsf3>
 8007482:	2100      	movs	r1, #0
 8007484:	f7f9 faf0 	bl	8000a68 <__aeabi_fcmpgt>
 8007488:	b130      	cbz	r0, 8007498 <floorf+0x34>
 800748a:	2c00      	cmp	r4, #0
 800748c:	da23      	bge.n	80074d6 <floorf+0x72>
 800748e:	2e00      	cmp	r6, #0
 8007490:	4c13      	ldr	r4, [pc, #76]	@ (80074e0 <floorf+0x7c>)
 8007492:	bf08      	it	eq
 8007494:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007498:	4621      	mov	r1, r4
 800749a:	e01a      	b.n	80074d2 <floorf+0x6e>
 800749c:	4e11      	ldr	r6, [pc, #68]	@ (80074e4 <floorf+0x80>)
 800749e:	412e      	asrs	r6, r5
 80074a0:	4230      	tst	r0, r6
 80074a2:	d016      	beq.n	80074d2 <floorf+0x6e>
 80074a4:	490d      	ldr	r1, [pc, #52]	@ (80074dc <floorf+0x78>)
 80074a6:	f7f9 f81b 	bl	80004e0 <__addsf3>
 80074aa:	2100      	movs	r1, #0
 80074ac:	f7f9 fadc 	bl	8000a68 <__aeabi_fcmpgt>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	d0f1      	beq.n	8007498 <floorf+0x34>
 80074b4:	2c00      	cmp	r4, #0
 80074b6:	bfbe      	ittt	lt
 80074b8:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 80074bc:	412b      	asrlt	r3, r5
 80074be:	18e4      	addlt	r4, r4, r3
 80074c0:	ea24 0406 	bic.w	r4, r4, r6
 80074c4:	e7e8      	b.n	8007498 <floorf+0x34>
 80074c6:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 80074ca:	d302      	bcc.n	80074d2 <floorf+0x6e>
 80074cc:	f7f9 f808 	bl	80004e0 <__addsf3>
 80074d0:	4601      	mov	r1, r0
 80074d2:	4608      	mov	r0, r1
 80074d4:	bd70      	pop	{r4, r5, r6, pc}
 80074d6:	2400      	movs	r4, #0
 80074d8:	e7de      	b.n	8007498 <floorf+0x34>
 80074da:	bf00      	nop
 80074dc:	7149f2ca 	.word	0x7149f2ca
 80074e0:	bf800000 	.word	0xbf800000
 80074e4:	007fffff 	.word	0x007fffff

080074e8 <_init>:
 80074e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ea:	bf00      	nop
 80074ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ee:	bc08      	pop	{r3}
 80074f0:	469e      	mov	lr, r3
 80074f2:	4770      	bx	lr

080074f4 <_fini>:
 80074f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f6:	bf00      	nop
 80074f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074fa:	bc08      	pop	{r3}
 80074fc:	469e      	mov	lr, r3
 80074fe:	4770      	bx	lr
